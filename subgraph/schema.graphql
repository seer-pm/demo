enum MarketType {
  Generic
  Futarchy
}

type Market @entity {
  id: ID!
  type: MarketType!
  factory: Bytes!
  creator: Bytes!
  marketName: String!
  outcomes: [String!]!
  outcomesSupply: BigInt!
  lowerBound: BigInt!
  upperBound: BigInt!
  parentCollectionId: Bytes!
  parentOutcome: BigInt!
  parentMarket: Market
  childMarkets: [Market!]! @derivedFrom(field: "parentMarket")
  wrappedTokens: [Bytes!]!
  " collateral token for Generic markets. It's either the MarketFactory's collateralToken or the parentMarket corresponding wrapped token "
  collateralToken: Bytes!
  " collateral token 1 for Futarchy markets "
  collateralToken1: Bytes!
  " collateral token 2 for Futarchy markets "
  collateralToken2: Bytes!
  conditionId: Bytes!
  ctfCondition: Condition!
  questionId: Bytes!
  templateId: BigInt!
  encodedQuestions: [String!]!
  payoutReported: Boolean!
  payoutNumerators: [BigInt!]!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
  questions: [MarketQuestion!]! @derivedFrom(field: "market")
  openingTs: BigInt!
  hasAnswers: Boolean!
  " finalizeTs is equal to 33260976000 (random big number) if there is any unanswered question, otherwise it contains the finalizeTs value of the lattest question. This allows us to filter multi scalar markets using `finalizeTs > now` for markets with pending answers, and `finalizeTs < now` for markets with pending execution "
  finalizeTs: BigInt!
  questionsInArbitration: BigInt!
  index: BigInt!
}

type MarketsCount @entity {
  id: ID!
  count: BigInt!
}

type Question @entity {
  id: ID!
  index: Int!
  arbitrator: Bytes!
  opening_ts: BigInt!
  timeout: BigInt!
  finalize_ts: BigInt!
  is_pending_arbitration: Boolean!
  best_answer: Bytes!
  bond: BigInt!
  min_bond: BigInt!
  arbitration_occurred: Boolean!
  marketQuestions: [MarketQuestion!]! @derivedFrom(field: "question")
}

type MarketQuestion @entity {
  id: ID!
  market: Market!
  question: Question!
  " a market can have the same question multiple times, we use the index to identify each one of them "
  index: Int!
}

type Condition @entity {
  " Conditional token conditionId "
  id: ID!
  markets: [Market!]! @derivedFrom(field: "ctfCondition")
}

type ConditionalEvent @entity {
  id: Bytes!
  market: Market!
  accountId: Bytes!
  type: String!
  amount: BigInt!
  blockNumber: BigInt!
  collateral: Bytes!
  transactionHash: Bytes!
}

type CurateMetadata @entity {
  "The registry address"
  id: Bytes!
  "The current registration meta evidence URI"
  registrationMetaEvidenceURI: String!
  "The current removal meta evidence URI"
  clearingMetaEvidenceURI: String!
  "The number of MetaEvidence event logs emitted."
  metaEvidenceCount: BigInt!
}

type ArbitratorMetadata @entity {
  "The arbitrator address"
  id: Bytes!
  "The current arbitrator meta evidence URI"
  registrationMetaEvidenceURI: String!
}