{
  "address": "0xd45d4B7736bb7158AaC2Fc12Bc3997C5e95D35E7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IMarketFactory",
          "name": "marketFactory",
          "type": "address"
        },
        {
          "internalType": "contract Market",
          "name": "market",
          "type": "address"
        }
      ],
      "name": "getMarket",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "id",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "marketName",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "outcomes",
              "type": "string[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "id",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "marketName",
                  "type": "string"
                },
                {
                  "internalType": "string[]",
                  "name": "outcomes",
                  "type": "string[]"
                },
                {
                  "internalType": "address[]",
                  "name": "wrappedTokens",
                  "type": "address[]"
                },
                {
                  "internalType": "bytes32",
                  "name": "conditionId",
                  "type": "bytes32"
                },
                {
                  "internalType": "bool",
                  "name": "payoutReported",
                  "type": "bool"
                },
                {
                  "internalType": "uint256[]",
                  "name": "payoutNumerators",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct MarketView.ParentMarketInfo",
              "name": "parentMarket",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "parentOutcome",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "wrappedTokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "outcomesSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lowerBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upperBound",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "parentCollectionId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "conditionId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "questionId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "templateId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "content_hash",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "arbitrator",
                  "type": "address"
                },
                {
                  "internalType": "uint32",
                  "name": "opening_ts",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "timeout",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "finalize_ts",
                  "type": "uint32"
                },
                {
                  "internalType": "bool",
                  "name": "is_pending_arbitration",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "bounty",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "best_answer",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "history_hash",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "bond",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "min_bond",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IRealityETH_v3_0.Question[]",
              "name": "questions",
              "type": "tuple[]"
            },
            {
              "internalType": "bytes32[]",
              "name": "questionsIds",
              "type": "bytes32[]"
            },
            {
              "internalType": "string[]",
              "name": "encodedQuestions",
              "type": "string[]"
            },
            {
              "internalType": "bool",
              "name": "payoutReported",
              "type": "bool"
            },
            {
              "internalType": "uint256[]",
              "name": "payoutNumerators",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct MarketView.MarketInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "internalType": "contract IMarketFactory",
          "name": "marketFactory",
          "type": "address"
        }
      ],
      "name": "getMarkets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "id",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "marketName",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "outcomes",
              "type": "string[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "id",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "marketName",
                  "type": "string"
                },
                {
                  "internalType": "string[]",
                  "name": "outcomes",
                  "type": "string[]"
                },
                {
                  "internalType": "address[]",
                  "name": "wrappedTokens",
                  "type": "address[]"
                },
                {
                  "internalType": "bytes32",
                  "name": "conditionId",
                  "type": "bytes32"
                },
                {
                  "internalType": "bool",
                  "name": "payoutReported",
                  "type": "bool"
                },
                {
                  "internalType": "uint256[]",
                  "name": "payoutNumerators",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct MarketView.ParentMarketInfo",
              "name": "parentMarket",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "parentOutcome",
              "type": "uint256"
            },
            {
              "internalType": "address[]",
              "name": "wrappedTokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "outcomesSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lowerBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upperBound",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "parentCollectionId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "conditionId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "questionId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "templateId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "content_hash",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "arbitrator",
                  "type": "address"
                },
                {
                  "internalType": "uint32",
                  "name": "opening_ts",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "timeout",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "finalize_ts",
                  "type": "uint32"
                },
                {
                  "internalType": "bool",
                  "name": "is_pending_arbitration",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "bounty",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "best_answer",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "history_hash",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "bond",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "min_bond",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IRealityETH_v3_0.Question[]",
              "name": "questions",
              "type": "tuple[]"
            },
            {
              "internalType": "bytes32[]",
              "name": "questionsIds",
              "type": "bytes32[]"
            },
            {
              "internalType": "string[]",
              "name": "encodedQuestions",
              "type": "string[]"
            },
            {
              "internalType": "bool",
              "name": "payoutReported",
              "type": "bool"
            },
            {
              "internalType": "uint256[]",
              "name": "payoutNumerators",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct MarketView.MarketInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "questionId",
          "type": "bytes32"
        },
        {
          "internalType": "contract IRealityETH_v3_0",
          "name": "realitio",
          "type": "address"
        }
      ],
      "name": "getQuestionId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb589928947099c087c8fef7a2c2f840ecdf0c3b63dc3477b25bc0a331639bdd1",
  "receipt": {
    "to": null,
    "from": "0x4EDCA105188a0783Ab3A6f09c50567D1E3F8591D",
    "contractAddress": "0xd45d4B7736bb7158AaC2Fc12Bc3997C5e95D35E7",
    "transactionIndex": 12,
    "gasUsed": "1813264",
    "logsBloom": "0x
    "blockHash": "0x5f55754b678aff13460e350bc3999ffbecb097392ca565099f7b4283a808cde6",
    "transactionHash": "0xb589928947099c087c8fef7a2c2f840ecdf0c3b63dc3477b25bc0a331639bdd1",
    "logs": [],
    "blockNumber": 37510633,
    "cumulativeGasUsed": "3390971",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 27,
  "solcInputHash": "361bf62a96cf1af232ffaac74b3fb39a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IMarketFactory\",\"name\":\"marketFactory\",\"type\":\"address\"},{\"internalType\":\"contract Market\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"getMarket\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"outcomes\",\"type\":\"string[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"outcomes\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"wrappedTokens\",\"type\":\"address[]\"},{\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"payoutReported\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"payoutNumerators\",\"type\":\"uint256[]\"}],\"internalType\":\"struct MarketView.ParentMarketInfo\",\"name\":\"parentMarket\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"parentOutcome\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"wrappedTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"outcomesSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lowerBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperBound\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"parentCollectionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"questionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"templateId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"content_hash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"arbitrator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"opening_ts\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"timeout\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"finalize_ts\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"is_pending_arbitration\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"bounty\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"best_answer\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"history_hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min_bond\",\"type\":\"uint256\"}],\"internalType\":\"struct IRealityETH_v3_0.Question[]\",\"name\":\"questions\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"questionsIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"string[]\",\"name\":\"encodedQuestions\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"payoutReported\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"payoutNumerators\",\"type\":\"uint256[]\"}],\"internalType\":\"struct MarketView.MarketInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"contract IMarketFactory\",\"name\":\"marketFactory\",\"type\":\"address\"}],\"name\":\"getMarkets\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"outcomes\",\"type\":\"string[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"outcomes\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"wrappedTokens\",\"type\":\"address[]\"},{\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"payoutReported\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"payoutNumerators\",\"type\":\"uint256[]\"}],\"internalType\":\"struct MarketView.ParentMarketInfo\",\"name\":\"parentMarket\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"parentOutcome\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"wrappedTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"outcomesSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lowerBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperBound\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"parentCollectionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"questionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"templateId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"content_hash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"arbitrator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"opening_ts\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"timeout\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"finalize_ts\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"is_pending_arbitration\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"bounty\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"best_answer\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"history_hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min_bond\",\"type\":\"uint256\"}],\"internalType\":\"struct IRealityETH_v3_0.Question[]\",\"name\":\"questions\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"questionsIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"string[]\",\"name\":\"encodedQuestions\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"payoutReported\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"payoutNumerators\",\"type\":\"uint256[]\"}],\"internalType\":\"struct MarketView.MarketInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"questionId\",\"type\":\"bytes32\"},{\"internalType\":\"contract IRealityETH_v3_0\",\"name\":\"realitio\",\"type\":\"address\"}],\"name\":\"getQuestionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract used as a frontend helper. It doesn't have any state-changing function.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/MarketView.sol\":\"MarketView\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"src/Interfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IERC20 {\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address owner) external returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n}\\n\\n// https://github.com/RealityETH/reality-eth-monorepo/blob/main/packages/contracts/flat/RealityETH-3.0.sol\\ninterface IRealityETH_v3_0 {\\n    function askQuestionWithMinBond(\\n        uint256 template_id,\\n        string memory question,\\n        address arbitrator,\\n        uint32 timeout,\\n        uint32 opening_ts,\\n        uint256 nonce,\\n        uint256 min_bond\\n    ) external payable returns (bytes32);\\n\\n    function resultForOnceSettled(bytes32 question_id) external view returns (bytes32);\\n\\n    function getContentHash(bytes32 question_id) external view returns (bytes32);\\n\\n    function getTimeout(bytes32 question_id) external view returns (uint32);\\n\\n    function submitAnswer(bytes32 question_id, bytes32 answer, uint256 max_previous) external payable;\\n}\\n\\ninterface IConditionalTokens {\\n    function payoutNumerators(bytes32 conditionId, uint256 index) external view returns (uint256);\\n\\n    function payoutDenominator(bytes32 conditionId) external view returns (uint256);\\n\\n    function prepareCondition(address oracle, bytes32 questionId, uint256 outcomeSlotCount) external;\\n\\n    function reportPayouts(bytes32 questionId, uint256[] calldata payouts) external;\\n\\n    function splitPosition(\\n        /*IERC20*/\\n        address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint256[] calldata partition,\\n        uint256 amount\\n    ) external;\\n\\n    function mergePositions(\\n        /*IERC20*/\\n        address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint256[] calldata partition,\\n        uint256 amount\\n    ) external;\\n\\n    function redeemPositions(\\n        /*IERC20*/\\n        address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint256[] calldata indexSets\\n    ) external;\\n\\n    function getConditionId(\\n        address oracle,\\n        bytes32 questionId,\\n        uint256 outcomeSlotCount\\n    ) external pure returns (bytes32);\\n\\n    function getCollectionId(\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint256 indexSet\\n    ) external view returns (bytes32);\\n\\n    function getPositionId(address collateralToken, bytes32 collectionId) external pure returns (uint256);\\n\\n    function getOutcomeSlotCount(bytes32 conditionId) external view returns (uint256);\\n\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    function balanceOf(address owner, uint256 id) external view returns (uint256);\\n}\\n\\ninterface IWrapped1155Factory {\\n    function requireWrapped1155(\\n        /*IERC1155*/\\n        address multiToken,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external /*Wrapped1155*/ returns (IERC20);\\n\\n    function unwrap(\\n        /*IERC1155*/\\n        address multiToken,\\n        uint256 tokenId,\\n        uint256 amount,\\n        address recipient,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1a66fb5758a0ca15b706a7d9a163505803103930acd58c188565a88e81499fa3\",\"license\":\"MIT\"},\"src/Market.sol\":{\"content\":\"/**\\n *  @authors: [@xyzseer]\\n *  @reviewers: [@nvm1410, @madhurMongia, @unknownunknown1, @mani99brar]\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {IERC20} from \\\"./Interfaces.sol\\\";\\nimport \\\"./RealityProxy.sol\\\";\\n\\ncontract Market {\\n    /// @dev Flag to initialize the market only once.\\n    bool public initialized;\\n\\n    /// @dev Contains the information associated to Reality.\\n    /// @param questionsIds Reality questions ids.\\n    /// @param templateId Reality templateId.\\n    /// @param encodedQuestions Encoded questions parameters, needed to create and reopen a question.\\n    struct RealityParams {\\n        bytes32[] questionsIds;\\n        uint256 templateId;\\n        string[] encodedQuestions;\\n    }\\n\\n    /// @dev Contains the information associated to Conditional Tokens.\\n    /// @param conditionId Conditional Tokens conditionId.\\n    /// @param parentCollectionId Conditional Tokens parentCollectionId.\\n    /// @param parentOutcome Conditional outcome to use (optional).\\n    /// @param parentMarket Conditional market to use (optional).\\n    /// @param questionId Conditional Tokens questionId.\\n    /// @param wrapped1155 Outcome tokens Wrapped1155 address.\\n    /// @param data Wrapped1155 token data.\\n    struct ConditionalTokensParams {\\n        bytes32 conditionId;\\n        bytes32 parentCollectionId;\\n        uint256 parentOutcome;\\n        address parentMarket;\\n        bytes32 questionId;\\n        IERC20[] wrapped1155;\\n        bytes[] data;\\n    }\\n\\n    /// @dev The name of the market.\\n    string public marketName;\\n    /// @dev The market outcomes, doesn't include the INVALID_RESULT outcome.\\n    string[] public outcomes;\\n    /// @dev Lower bound, only used for scalar markets.\\n    uint256 public lowerBound;\\n    /// @dev Upper bound, only used for scalar markets.\\n    uint256 public upperBound;\\n    /// @dev Conditional Tokens parameters.\\n    ConditionalTokensParams public conditionalTokensParams;\\n    /// @dev Reality parameters.\\n    RealityParams public realityParams;\\n    /// @dev Oracle contract.\\n    RealityProxy public realityProxy;\\n\\n    /// @dev Initializer.\\n    /// @param _marketName The name of the market.\\n    /// @param _outcomes The market outcomes, doesn't include the INVALID_RESULT outcome.\\n    /// @param _lowerBound Lower bound, only used for scalar markets.\\n    /// @param _upperBound Upper bound, only used for scalar markets.\\n    /// @param _conditionalTokensParams Conditional Tokens params.\\n    /// @param _realityParams Reality params.\\n    /// @param _realityProxy Oracle contract.\\n    function initialize(\\n        string memory _marketName,\\n        string[] memory _outcomes,\\n        uint256 _lowerBound,\\n        uint256 _upperBound,\\n        ConditionalTokensParams memory _conditionalTokensParams,\\n        RealityParams memory _realityParams,\\n        RealityProxy _realityProxy\\n    ) external {\\n        require(!initialized, \\\"Already initialized.\\\");\\n\\n        marketName = _marketName;\\n        outcomes = _outcomes;\\n        lowerBound = _lowerBound;\\n        upperBound = _upperBound;\\n        conditionalTokensParams = _conditionalTokensParams;\\n        realityParams = _realityParams;\\n        realityProxy = _realityProxy;\\n\\n        initialized = true;\\n    }\\n\\n    /// @dev The templateId associated to the Reality question.\\n    /// @return The template id.\\n    function templateId() external view returns (uint256) {\\n        return realityParams.templateId;\\n    }\\n\\n    /// @dev Returns the Reality questions ids. Multi Scalar markets have one question for each outcome, while any other market has only one question.\\n    /// @return The Reality questions ids.\\n    function questionsIds() external view returns (bytes32[] memory) {\\n        return realityParams.questionsIds;\\n    }\\n\\n    /// @dev Encoded questions parameters, needed to create and reopen a question.\\n    /// @param index The question index.\\n    /// @return The encoded question.\\n    function encodedQuestions(uint256 index) external view returns (string memory) {\\n        return realityParams.encodedQuestions[index];\\n    }\\n\\n    /// @dev Conditional Tokens questionId.\\n    /// @return the question ID.\\n    function questionId() external view returns (bytes32) {\\n        return conditionalTokensParams.questionId;\\n    }\\n\\n    /// @dev Conditional Tokens conditionId.\\n    /// @return The condition ID.\\n    function conditionId() external view returns (bytes32) {\\n        return conditionalTokensParams.conditionId;\\n    }\\n\\n    /// @dev Conditional Tokens parentCollectionId.\\n    /// @return The parent collection ID.\\n    function parentCollectionId() external view returns (bytes32) {\\n        return conditionalTokensParams.parentCollectionId;\\n    }\\n\\n    /// @dev The parent market (optional). This market redeems to an outcome token of the parent market.\\n    /// @return The parent market address.\\n    function parentMarket() external view returns (address) {\\n        return conditionalTokensParams.parentMarket;\\n    }\\n\\n    /// @dev The parent outcome (optional). The parent market's outcome token this market redeems for.\\n    /// @return The parent outcome index.\\n    function parentOutcome() external view returns (uint256) {\\n        return conditionalTokensParams.parentOutcome;\\n    }\\n\\n    /// @dev Returns the wrapped1155 and the data corresponding to an outcome token.\\n    /// @param index The outcome index.\\n    /// @return wrapped1155 The wrapped token.\\n    /// @return data The token data.\\n    function wrappedOutcome(uint256 index) external view returns (IERC20 wrapped1155, bytes memory data) {\\n        return (conditionalTokensParams.wrapped1155[index], conditionalTokensParams.data[index]);\\n    }\\n\\n    /// @dev Returns the wrapped1155 and the data corresponding to the parent market.\\n    /// @return wrapped1155 The wrapped token.\\n    /// @return data The token data.\\n    function parentWrappedOutcome() external view returns (IERC20 wrapped1155, bytes memory data) {\\n        if (conditionalTokensParams.parentMarket != address(0)) {\\n            (wrapped1155, data) =\\n                Market(conditionalTokensParams.parentMarket).wrappedOutcome(conditionalTokensParams.parentOutcome);\\n        }\\n    }\\n\\n    /// @dev Returns the number of outcomes.\\n    /// Doesn't include the INVALID_RESULT outcome.\\n    /// @return numOutcomes The number of outcomes.\\n    function numOutcomes() external view returns (uint256) {\\n        return outcomes.length;\\n    }\\n\\n    /// @dev Helper function to resolve the market.\\n    function resolve() external {\\n        realityProxy.resolve(this);\\n    }\\n}\\n\",\"keccak256\":\"0xa1a7e99f16812a345d7cb9a063516632f5257704969914948016629605232a3d\",\"license\":\"MIT\"},\"src/MarketView.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {IERC20} from \\\"./Interfaces.sol\\\";\\nimport {Market} from \\\"./Market.sol\\\";\\n\\ninterface IConditionalTokens {\\n    function getCollectionId(\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint256 indexSet\\n    ) external view returns (bytes32);\\n\\n    function getPositionId(address collateralToken, bytes32 collectionId) external pure returns (uint256);\\n\\n    function getOutcomeSlotCount(bytes32 conditionId) external view returns (uint256);\\n\\n    function payoutDenominator(bytes32 conditionId) external view returns (uint256);\\n\\n    function payoutNumerators(bytes32 conditionId, uint256 index) external view returns (uint256);\\n}\\n\\ninterface IMarketFactory {\\n    function allMarkets() external view returns (address[] memory);\\n\\n    function conditionalTokens() external view returns (IConditionalTokens);\\n\\n    function realitio() external view returns (IRealityETH_v3_0);\\n\\n    function collateralToken() external view returns (address);\\n}\\n\\ninterface IRealityETH_v3_0 {\\n    struct Question {\\n        bytes32 content_hash;\\n        address arbitrator;\\n        uint32 opening_ts;\\n        uint32 timeout;\\n        uint32 finalize_ts;\\n        bool is_pending_arbitration;\\n        uint256 bounty;\\n        bytes32 best_answer;\\n        bytes32 history_hash;\\n        uint256 bond;\\n        uint256 min_bond;\\n    }\\n\\n    function questions(bytes32 question_id) external view returns (Question memory);\\n\\n    function isFinalized(bytes32 question_id) external view returns (bool);\\n\\n    function isSettledTooSoon(bytes32 question_id) external view returns (bool);\\n\\n    function reopened_questions(bytes32 question_id) external view returns (bytes32);\\n}\\n\\n/// @dev Contract used as a frontend helper. It doesn't have any state-changing function.\\ncontract MarketView {\\n    struct ParentMarketInfo {\\n        address id;\\n        string marketName;\\n        string[] outcomes;\\n        address[] wrappedTokens;\\n        bytes32 conditionId;\\n        bool payoutReported;\\n        uint256[] payoutNumerators;\\n    }\\n\\n    struct MarketInfo {\\n        address id;\\n        string marketName;\\n        string[] outcomes;\\n        ParentMarketInfo parentMarket;\\n        uint256 parentOutcome;\\n        address[] wrappedTokens;\\n        uint256 outcomesSupply;\\n        uint256 lowerBound;\\n        uint256 upperBound;\\n        bytes32 parentCollectionId;\\n        bytes32 conditionId;\\n        bytes32 questionId;\\n        uint256 templateId;\\n        IRealityETH_v3_0.Question[] questions;\\n        bytes32[] questionsIds;\\n        string[] encodedQuestions;\\n        bool payoutReported;\\n        uint256[] payoutNumerators;\\n    }\\n\\n    function getMarket(IMarketFactory marketFactory, Market market) public view returns (MarketInfo memory) {\\n        bytes32 conditionId = market.conditionId();\\n\\n        IConditionalTokens conditionalTokens = marketFactory.conditionalTokens();\\n\\n        (string[] memory outcomes, address[] memory wrappedTokens) =\\n            getOutcomesAndTokens(conditionalTokens, market, conditionId);\\n\\n        (IRealityETH_v3_0.Question[] memory questions, string[] memory encodedQuestions, bytes32[] memory questionsIds)\\n        = getQuestions(market, marketFactory);\\n\\n        return MarketInfo({\\n            id: address(market),\\n            marketName: market.marketName(),\\n            outcomes: outcomes,\\n            parentMarket: getParentMarketInfo(market, marketFactory.conditionalTokens()),\\n            parentOutcome: market.parentOutcome(),\\n            wrappedTokens: wrappedTokens,\\n            outcomesSupply: IERC20(wrappedTokens[0]).totalSupply(),\\n            lowerBound: market.lowerBound(),\\n            upperBound: market.upperBound(),\\n            parentCollectionId: market.parentCollectionId(),\\n            conditionId: conditionId,\\n            questionId: market.questionId(),\\n            templateId: market.templateId(),\\n            questions: questions,\\n            questionsIds: questionsIds,\\n            encodedQuestions: encodedQuestions,\\n            payoutReported: conditionalTokens.payoutDenominator(conditionId) > 0,\\n            payoutNumerators: getPayoutNumerators(conditionalTokens, market.conditionId())\\n        });\\n    }\\n\\n    function getParentMarketInfo(\\n        Market market,\\n        IConditionalTokens conditionalTokens\\n    ) internal view returns (ParentMarketInfo memory) {\\n        if (market.parentMarket() == address(0)) {\\n            return ParentMarketInfo({\\n                id: address(0),\\n                marketName: \\\"\\\",\\n                outcomes: new string[](0),\\n                wrappedTokens: new address[](0),\\n                conditionId: 0,\\n                payoutReported: false,\\n                payoutNumerators: new uint256[](0)\\n            });\\n        }\\n\\n        Market parentMarket = Market(market.parentMarket());\\n\\n        (string[] memory outcomes, address[] memory wrappedTokens) =\\n            getOutcomesAndTokens(conditionalTokens, parentMarket, market.conditionId());\\n\\n        return ParentMarketInfo({\\n            id: market.parentMarket(),\\n            marketName: parentMarket.marketName(),\\n            outcomes: outcomes,\\n            wrappedTokens: wrappedTokens,\\n            conditionId: parentMarket.conditionId(),\\n            payoutReported: conditionalTokens.payoutDenominator(parentMarket.conditionId()) > 0,\\n            payoutNumerators: getPayoutNumerators(conditionalTokens, parentMarket.conditionId())\\n        });\\n    }\\n\\n    function getPayoutNumerators(\\n        IConditionalTokens conditionalTokens,\\n        bytes32 conditionId\\n    ) internal view returns (uint256[] memory payoutNumerators) {\\n        uint256 outcomeSlotCount = conditionalTokens.getOutcomeSlotCount(conditionId);\\n\\n        payoutNumerators = new uint256[](outcomeSlotCount);\\n\\n        for (uint256 i = 0; i < outcomeSlotCount; i++) {\\n            payoutNumerators[i] = conditionalTokens.payoutNumerators(conditionId, i);\\n        }\\n\\n        return payoutNumerators;\\n    }\\n\\n    function getOutcomesAndTokens(\\n        IConditionalTokens conditionalTokens,\\n        Market market,\\n        bytes32 conditionId\\n    ) internal view returns (string[] memory outcomes, address[] memory wrappedTokens) {\\n        uint256 outcomeSlotCount = conditionalTokens.getOutcomeSlotCount(conditionId);\\n\\n        outcomes = new string[](outcomeSlotCount);\\n\\n        wrappedTokens = new address[](outcomeSlotCount);\\n\\n        for (uint256 i = 0; i < outcomeSlotCount; i++) {\\n            outcomes[i] = i == (outcomeSlotCount - 1) ? \\\"Invalid result\\\" : market.outcomes(i);\\n\\n            (IERC20 wrapped1155,) = market.wrappedOutcome(i);\\n            wrappedTokens[i] = address(wrapped1155);\\n        }\\n\\n        return (outcomes, wrappedTokens);\\n    }\\n\\n    function getQuestions(\\n        Market market,\\n        IMarketFactory marketFactory\\n    )\\n        internal\\n        view\\n        returns (\\n            IRealityETH_v3_0.Question[] memory questions,\\n            string[] memory encodedQuestions,\\n            bytes32[] memory questionsIds\\n        )\\n    {\\n        bytes32[] memory initialQuestionsIds = market.questionsIds();\\n        questions = new IRealityETH_v3_0.Question[](initialQuestionsIds.length);\\n        encodedQuestions = new string[](questions.length);\\n        questionsIds = new bytes32[](questions.length);\\n        {\\n            IRealityETH_v3_0 realitio = marketFactory.realitio();\\n            for (uint256 i = 0; i < questions.length; i++) {\\n                questionsIds[i] = getQuestionId(initialQuestionsIds[i], realitio);\\n                questions[i] = realitio.questions(questionsIds[i]);\\n                encodedQuestions[i] = market.encodedQuestions(i);\\n            }\\n        }\\n\\n        return (questions, encodedQuestions, questionsIds);\\n    }\\n\\n    function getMarkets(uint256 count, IMarketFactory marketFactory) external view returns (MarketInfo[] memory) {\\n        address[] memory allMarkets = marketFactory.allMarkets();\\n\\n        MarketInfo[] memory marketsInfo = new MarketInfo[](count);\\n\\n        if (allMarkets.length == 0) {\\n            return marketsInfo;\\n        }\\n\\n        uint256 lastIndex = allMarkets.length - 1;\\n        uint256 startIndex = allMarkets.length > count ? allMarkets.length - count : 0;\\n        uint256 currentIndex = 0;\\n\\n        for (uint256 j = lastIndex; j >= startIndex; j--) {\\n            marketsInfo[currentIndex++] = getMarket(marketFactory, Market(allMarkets[j]));\\n\\n            if (j == 0) {\\n                break;\\n            }\\n        }\\n\\n        return marketsInfo;\\n    }\\n\\n    function getQuestionId(bytes32 questionId, IRealityETH_v3_0 realitio) public view returns (bytes32) {\\n        if (realitio.isFinalized(questionId) && realitio.isSettledTooSoon(questionId)) {\\n            bytes32 replacementId = realitio.reopened_questions(questionId);\\n            if (replacementId != bytes32(0)) {\\n                questionId = replacementId;\\n            }\\n        }\\n        return questionId;\\n    }\\n}\\n\",\"keccak256\":\"0x4d4d3dc52306fe5c5cc4f2e284c12572b220a98ce80d6e3830ed47fab183f2a1\",\"license\":\"MIT\"},\"src/RealityProxy.sol\":{\"content\":\"/**\\n *  @authors: [@xyzseer]\\n *  @reviewers: [@nvm1410, @madhurMongia, @unknownunknown1, @mani99brar]\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {IConditionalTokens, IRealityETH_v3_0} from \\\"./Interfaces.sol\\\";\\nimport \\\"./Market.sol\\\";\\n\\ncontract RealityProxy {\\n    /// @dev Conditional Tokens contract.\\n    IConditionalTokens public immutable conditionalTokens;\\n    /// @dev Reality.eth contract.\\n    IRealityETH_v3_0 public immutable realitio;\\n\\n    /// @dev INVALID_RESULT reserved value.\\n    bytes32 internal constant INVALID_RESULT = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    /// @dev Template for scalar and multi scalar markets.\\n    uint256 internal constant REALITY_UINT_TEMPLATE = 1;\\n    /// @dev Template for categorical markets.\\n    uint256 internal constant REALITY_SINGLE_SELECT_TEMPLATE = 2;\\n    /// @dev Template for multi categorical markets.\\n    uint256 internal constant REALITY_MULTI_SELECT_TEMPLATE = 3;\\n\\n    /// @dev Constructor.\\n    /// @param _conditionalTokens Conditional Tokens contract address.\\n    /// @param _realitio Reality.eth contract address.\\n    constructor(IConditionalTokens _conditionalTokens, IRealityETH_v3_0 _realitio) {\\n        conditionalTokens = _conditionalTokens;\\n        realitio = _realitio;\\n    }\\n\\n    /// @dev Resolves the specified market.\\n    /// @param market Market to resolve. UNTRUSTED.\\n    function resolve(Market market) external {\\n        bytes32[] memory questionsIds = market.questionsIds();\\n        uint256 numOutcomes = market.numOutcomes();\\n        uint256 templateId = market.templateId();\\n        uint256 low = market.lowerBound();\\n        uint256 high = market.upperBound();\\n\\n        // questionId must be a hash of all the values used to resolve a market, this way if an attacker tries to resolve a fake market by changing some value its questionId will not match the id of a valid market.\\n        bytes32 questionId = keccak256(abi.encode(questionsIds, numOutcomes, templateId, low, high));\\n\\n        if (templateId == REALITY_SINGLE_SELECT_TEMPLATE) {\\n            resolveCategoricalMarket(questionId, questionsIds, numOutcomes);\\n            return;\\n        }\\n\\n        if (templateId == REALITY_MULTI_SELECT_TEMPLATE) {\\n            resolveMultiCategoricalMarket(questionId, questionsIds, numOutcomes);\\n            return;\\n        }\\n\\n        if (questionsIds.length > 1) {\\n            resolveMultiScalarMarket(questionId, questionsIds, numOutcomes);\\n            return;\\n        }\\n\\n        resolveScalarMarket(questionId, questionsIds, low, high);\\n    }\\n\\n    /// @dev Resolves to invalid if the answer is invalid or the result is greater than the amount of outcomes.\\n    /// @param questionId Conditional Tokens questionId.\\n    /// @param questionsIds Reality questions ids.\\n    /// @param numOutcomes The number of outcomes, excluding the INVALID_RESULT outcome.\\n    function resolveCategoricalMarket(\\n        bytes32 questionId,\\n        bytes32[] memory questionsIds,\\n        uint256 numOutcomes\\n    ) internal {\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionsIds[0]));\\n        uint256[] memory payouts = new uint256[](numOutcomes + 1);\\n\\n        if (answer == uint256(INVALID_RESULT) || answer >= numOutcomes) {\\n            // the last outcome is INVALID_RESULT.\\n            payouts[numOutcomes] = 1;\\n        } else {\\n            payouts[answer] = 1;\\n        }\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n\\n    /// @dev Resolves to invalid if the answer is invalid or all the results are zero.\\n    /// @param questionId Conditional Tokens questionId.\\n    /// @param questionsIds Reality questions ids.\\n    /// @param numOutcomes The number of outcomes, excluding the INVALID_RESULT outcome.\\n    function resolveMultiCategoricalMarket(\\n        bytes32 questionId,\\n        bytes32[] memory questionsIds,\\n        uint256 numOutcomes\\n    ) internal {\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionsIds[0]));\\n        uint256[] memory payouts = new uint256[](numOutcomes + 1);\\n\\n        if (answer == uint256(INVALID_RESULT)) {\\n            // the last outcome is INVALID_RESULT.\\n            payouts[numOutcomes] = 1;\\n        } else {\\n            bool allZeroes = true;\\n\\n            for (uint256 i = 0; i < numOutcomes; i++) {\\n                payouts[i] = (answer >> i) & 1;\\n                allZeroes = allZeroes && payouts[i] == 0;\\n            }\\n\\n            if (allZeroes) {\\n                // invalid result.\\n                payouts[numOutcomes] = 1;\\n            }\\n        }\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n\\n    /// @dev Resolves to invalid if the answer is invalid.\\n    /// @param questionId Conditional Tokens questionId.\\n    /// @param questionsIds Reality questions ids.\\n    /// @param low Lower bound.\\n    /// @param high Upper bound.\\n    function resolveScalarMarket(\\n        bytes32 questionId,\\n        bytes32[] memory questionsIds,\\n        uint256 low,\\n        uint256 high\\n    ) internal {\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionsIds[0]));\\n        uint256[] memory payouts = new uint256[](3);\\n\\n        if (answer == uint256(INVALID_RESULT)) {\\n            // the last outcome is INVALID_RESULT.\\n            payouts[2] = 1;\\n        } else if (answer <= low) {\\n            payouts[0] = 1;\\n        } else if (answer >= high) {\\n            payouts[1] = 1;\\n        } else {\\n            payouts[0] = high - answer;\\n            payouts[1] = answer - low;\\n        }\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n\\n    /// @dev If any individual result is invalid then the corresponding payout element is set to 0.\\n    /// @dev If all the elements of the payout vector are 0 or all are invalid, the market resolves to invalid.\\n    /// @param questionId Conditional Tokens questionId.\\n    /// @param questionsIds Reality questions ids.\\n    /// @param numOutcomes The number of outcomes, excluding the INVALID_RESULT outcome.\\n    function resolveMultiScalarMarket(\\n        bytes32 questionId,\\n        bytes32[] memory questionsIds,\\n        uint256 numOutcomes\\n    ) internal {\\n        uint256[] memory payouts = new uint256[](numOutcomes + 1);\\n        bool allZeroesOrInvalid = true;\\n\\n        /*\\n         * We set maxPayout to a sufficiently large number for most possible outcomes that also avoids overflows in the following places:\\n         * https://github.com/gnosis/conditional-tokens-contracts/blob/master/contracts/ConditionalTokens.sol#L89\\n         * https://github.com/gnosis/conditional-tokens-contracts/blob/master/contracts/ConditionalTokens.sol#L242\\n         */\\n        uint256 maxPayout = 2 ** (256 / 2) - 1;\\n\\n        for (uint256 i = 0; i < numOutcomes; i++) {\\n            payouts[i] = uint256(realitio.resultForOnceSettled(questionsIds[i]));\\n\\n            if (payouts[i] == uint256(INVALID_RESULT)) {\\n                payouts[i] = 0;\\n            } else if (payouts[i] > maxPayout) {\\n                payouts[i] = maxPayout;\\n            }\\n\\n            allZeroesOrInvalid = allZeroesOrInvalid && payouts[i] == 0;\\n        }\\n\\n        if (allZeroesOrInvalid) {\\n            // invalid result.\\n            payouts[numOutcomes] = 1;\\n        }\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n}\\n\",\"keccak256\":\"0x896712b726fc76f3f29f79b62c5a2976bd9df55cf5d5d42b4e69fce5c078b220\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611fd5806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063118cdf61146100465780633d7637371461006f578063714af34b14610090575b600080fd5b6100596100543660046116aa565b6100b0565b6040516100669190611a98565b60405180910390f35b61008261007d3660046116aa565b610233565b604051908152602001610066565b6100a361009e366004611afa565b610395565b6040516100669190611b28565b60606000826001600160a01b031663375a7cba6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156100f2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261011a9190810190611be4565b90506000846001600160401b0381111561013657610136611b42565b60405190808252806020026020018201604052801561016f57816020015b61015c6115b2565b8152602001906001900390816101545790505b509050815160000361018457915061022d9050565b6000600183516101949190611c98565b90506000868451116101a75760006101b4565b8684516101b49190611c98565b90506000825b828110610224576101e4888783815181106101d7576101d7611cab565b6020026020010151610395565b85836101ef81611cc1565b94508151811061020157610201611cab565b60209081029190910101528015610224578061021c81611cda565b9150506101ba565b50929450505050505b92915050565b604051633fc6a14f60e11b8152600481018390526000906001600160a01b03831690637f8d429e90602401602060405180830381865afa15801561027b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029f9190611d01565b801561030f5750604051630361db3d60e11b8152600481018490526001600160a01b038316906306c3b67a90602401602060405180830381865afa1580156102eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030f9190611d01565b1561038e5760405163c081d8a360e01b8152600481018490526000906001600160a01b0384169063c081d8a390602401602060405180830381865afa15801561035c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103809190611d1c565b9050801561038c578093505b505b5090919050565b61039d6115b2565b6000826001600160a01b0316632ddc7de76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104019190611d1c565b90506000846001600160a01b0316635bd9e2996040518163ffffffff1660e01b8152600401602060405180830381865afa158015610443573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104679190611d35565b9050600080610477838786610989565b91509150600080600061048a898b610c1f565b9250925092506040518061024001604052808a6001600160a01b031681526020018a6001600160a01b031663e6bfd26a6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156104e9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105119190810190611da0565b81526020018681526020016105878b8d6001600160a01b0316635bd9e2996040518163ffffffff1660e01b8152600401602060405180830381865afa15801561055e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105829190611d35565b610fc5565b81526020018a6001600160a01b0316630d0e932b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ee9190611d1c565b81526020018581526020018560008151811061060c5761060c611cab565b60200260200101516001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610651573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106759190611d1c565b81526020018a6001600160a01b031663a384d6ff6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106dc9190611d1c565b81526020018a6001600160a01b031663b09ad8a06040518163ffffffff1660e01b8152600401602060405180830381865afa15801561071f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107439190611d1c565b81526020018a6001600160a01b03166344bea37e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610786573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107aa9190611d1c565b81526020018881526020018a6001600160a01b031663b06a5c526040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108179190611d1c565b81526020018a6001600160a01b0316637aa77f296040518163ffffffff1660e01b8152600401602060405180830381865afa15801561085a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087e9190611d1c565b81526020018481526020018281526020018381526020016000886001600160a01b031663dd34de678b6040518263ffffffff1660e01b81526004016108c591815260200190565b602060405180830381865afa1580156108e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109069190611d1c565b1115158152602001610979888c6001600160a01b0316632ddc7de76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610950573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109749190611d1c565b61144b565b90529a9950505050505050505050565b6060806000856001600160a01b031663d42dc0c2856040518263ffffffff1660e01b81526004016109bc91815260200190565b602060405180830381865afa1580156109d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fd9190611d1c565b9050806001600160401b03811115610a1757610a17611b42565b604051908082528060200260200182016040528015610a4a57816020015b6060815260200190600190039081610a355790505b509250806001600160401b03811115610a6557610a65611b42565b604051908082528060200260200182016040528015610a8e578160200160208202803683370190505b50915060005b81811015610c1557610aa7600183611c98565b8114610b1f5760405163eed2a14760e01b8152600481018290526001600160a01b0387169063eed2a14790602401600060405180830381865afa158015610af2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b1a9190810190611da0565b610b47565b6040518060400160405280600e81526020016d125b9d985b1a59081c995cdd5b1d60921b8152505b848281518110610b5957610b59611cab565b6020908102919091010152604051630315311560e31b8152600481018290526000906001600160a01b038816906318a988a890602401600060405180830381865afa158015610bac573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610bd49190810190611df0565b50905080848381518110610bea57610bea611cab565b6001600160a01b03909216602092830291909101909101525080610c0d81611cc1565b915050610a94565b5050935093915050565b60608060606000856001600160a01b031663455d885e6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610c64573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c8c9190810190611e54565b905080516001600160401b03811115610ca757610ca7611b42565b604051908082528060200260200182016040528015610d2e57816020015b604080516101608101825260008082526020808301829052928201819052606082018190526080820181905260a0820181905260c0820181905260e08201819052610100820181905261012082018190526101408201528252600019909201910181610cc55790505b50935083516001600160401b03811115610d4a57610d4a611b42565b604051908082528060200260200182016040528015610d7d57816020015b6060815260200190600190039081610d685790505b50925083516001600160401b03811115610d9957610d99611b42565b604051908082528060200260200182016040528015610dc2578160200160208202803683370190505b5091506000856001600160a01b031663bc8802a26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e299190611d35565b905060005b8551811015610fbb57610e5a838281518110610e4c57610e4c611cab565b602002602001015183610233565b848281518110610e6c57610e6c611cab565b602002602001018181525050816001600160a01b03166395addb90858381518110610e9957610e99611cab565b60200260200101516040518263ffffffff1660e01b8152600401610ebf91815260200190565b61016060405180830381865afa158015610edd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f019190611eed565b868281518110610f1357610f13611cab565b602090810291909101015260405163149281dd60e11b8152600481018290526001600160a01b0389169063292503ba90602401600060405180830381865afa158015610f63573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f8b9190810190611da0565b858281518110610f9d57610f9d611cab565b60200260200101819052508080610fb390611cc1565b915050610e2e565b5050509250925092565b610fcd611657565b60006001600160a01b0316836001600160a01b031663d03ecc646040518163ffffffff1660e01b8152600401602060405180830381865afa158015611016573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103a9190611d35565b6001600160a01b0316036110f1576040805160e08101825260008082528251602080820185528282528084019190915283518281529081018452919283019190611094565b606081526020019060019003908161107f5790505b50815260200160006040519080825280602002602001820160405280156110c5578160200160208202803683370190505b50815260006020808301829052604080840183905280519283529082019052606090910152905061022d565b6000836001600160a01b031663d03ecc646040518163ffffffff1660e01b8152600401602060405180830381865afa158015611131573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111559190611d35565b90506000806111c68584886001600160a01b0316632ddc7de76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561119d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c19190611d1c565b610989565b915091506040518060e00160405280876001600160a01b031663d03ecc646040518163ffffffff1660e01b8152600401602060405180830381865afa158015611213573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112379190611d35565b6001600160a01b03168152602001846001600160a01b031663e6bfd26a6040518163ffffffff1660e01b8152600401600060405180830381865afa158015611283573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112ab9190810190611da0565b8152602001838152602001828152602001846001600160a01b0316632ddc7de76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061131e9190611d1c565b81526020016000876001600160a01b031663dd34de67876001600160a01b0316632ddc7de76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611372573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113969190611d1c565b6040518263ffffffff1660e01b81526004016113b491815260200190565b602060405180830381865afa1580156113d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f59190611d1c565b111515815260200161143f87866001600160a01b0316632ddc7de76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610950573d6000803e3d6000fd5b90529695505050505050565b604051636a16e06160e11b8152600481018290526060906000906001600160a01b0385169063d42dc0c290602401602060405180830381865afa158015611496573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ba9190611d1c565b9050806001600160401b038111156114d4576114d4611b42565b6040519080825280602002602001820160405280156114fd578160200160208202803683370190505b50915060005b818110156115aa57604051630141320560e21b815260048101859052602481018290526001600160a01b03861690630504c81490604401602060405180830381865afa158015611557573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157b9190611d1c565b83828151811061158d5761158d611cab565b6020908102919091010152806115a281611cc1565b915050611503565b505092915050565b60405180610240016040528060006001600160a01b0316815260200160608152602001606081526020016115e4611657565b8152602001600081526020016060815260200160008152602001600081526020016000815260200160008019168152602001600080191681526020016000801916815260200160008152602001606081526020016060815260200160608152602001600015158152602001606081525090565b6040805160e08101825260008082526060602083018190529282018390528282018390526080820181905260a082015260c081019190915290565b6001600160a01b03811681146116a757600080fd5b50565b600080604083850312156116bd57600080fd5b8235915060208301356116cf81611692565b809150509250929050565b60005b838110156116f55781810151838201526020016116dd565b50506000910152565b600081518084526117168160208601602086016116da565b601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b858110156117725782840389526117608483516116fe565b98850198935090840190600101611748565b5091979650505050505050565b600081518084526020808501945080840160005b838110156117b85781516001600160a01b031687529582019590820190600101611793565b509495945050505050565b600081518084526020808501945080840160005b838110156117b8578151875295820195908201906001016117d7565b60018060a01b0381511682526000602082015160e0602085015261181a60e08501826116fe565b905060408301518482036040860152611833828261172a565b9150506060830151848203606086015261184d828261177f565b9150506080830151608085015260a0830151151560a085015260c083015184820360c086015261187d82826117c3565b95945050505050565b600081518084526020808501945080840160005b838110156117b857815180518852838101516001600160a01b03168489015260408082015163ffffffff908116918a01919091526060808301518216908a01526080808301519091169089015260a08082015115159089015260c0808201519089015260e08082015190890152610100808201519089015261012080820151908901526101409081015190880152610160909601959082019060010161189a565b80516001600160a01b0316825260006102406020830151816020860152611964828601826116fe565b9150506040830151848203604086015261197e828261172a565b9150506060830151848203606086015261199882826117f3565b9150506080830151608085015260a083015184820360a08601526119bc828261177f565b60c0858101519087015260e08086015190870152610100808601519087015261012080860151908701526101408086015190870152610160808601519087015261018080860151908701526101a080860151878303828901529193509150611a248382611886565b925050506101c08084015185830382870152611a4083826117c3565b925050506101e08084015185830382870152611a5c838261172a565b9250505061020080840151611a748287018215159052565b50506102208084015185830382870152611a8e83826117c3565b9695505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015611aed57603f19888603018452611adb85835161193b565b94509285019290850190600101611abf565b5092979650505050505050565b60008060408385031215611b0d57600080fd5b8235611b1881611692565b915060208301356116cf81611692565b602081526000611b3b602083018461193b565b9392505050565b634e487b7160e01b600052604160045260246000fd5b60405161016081016001600160401b0381118282101715611b7b57611b7b611b42565b60405290565b604051601f8201601f191681016001600160401b0381118282101715611ba957611ba9611b42565b604052919050565b60006001600160401b03821115611bca57611bca611b42565b5060051b60200190565b8051611bdf81611692565b919050565b60006020808385031215611bf757600080fd5b82516001600160401b03811115611c0d57600080fd5b8301601f81018513611c1e57600080fd5b8051611c31611c2c82611bb1565b611b81565b81815260059190911b82018301908381019087831115611c5057600080fd5b928401925b82841015611c77578351611c6881611692565b82529284019290840190611c55565b979650505050505050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561022d5761022d611c82565b634e487b7160e01b600052603260045260246000fd5b600060018201611cd357611cd3611c82565b5060010190565b600081611ce957611ce9611c82565b506000190190565b80518015158114611bdf57600080fd5b600060208284031215611d1357600080fd5b611b3b82611cf1565b600060208284031215611d2e57600080fd5b5051919050565b600060208284031215611d4757600080fd5b8151611b3b81611692565b60006001600160401b03831115611d6b57611d6b611b42565b611d7e601f8401601f1916602001611b81565b9050828152838383011115611d9257600080fd5b611b3b8360208301846116da565b600060208284031215611db257600080fd5b81516001600160401b03811115611dc857600080fd5b8201601f81018413611dd957600080fd5b611de884825160208401611d52565b949350505050565b60008060408385031215611e0357600080fd5b8251611e0e81611692565b60208401519092506001600160401b03811115611e2a57600080fd5b8301601f81018513611e3b57600080fd5b611e4a85825160208401611d52565b9150509250929050565b60006020808385031215611e6757600080fd5b82516001600160401b03811115611e7d57600080fd5b8301601f81018513611e8e57600080fd5b8051611e9c611c2c82611bb1565b81815260059190911b82018301908381019087831115611ebb57600080fd5b928401925b82841015611c7757835182529284019290840190611ec0565b805163ffffffff81168114611bdf57600080fd5b60006101608284031215611f0057600080fd5b611f08611b58565b82518152611f1860208401611bd4565b6020820152611f2960408401611ed9565b6040820152611f3a60608401611ed9565b6060820152611f4b60808401611ed9565b6080820152611f5c60a08401611cf1565b60a082015260c0838101519082015260e080840151908201526101008084015190820152610120808401519082015261014092830151928101929092525091905056fea264697066735822122074cd1f2b6fab21e02a4a112576bd2652a27dbe89bdd7012111d94eadf02bee0564736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c8063118cdf61146100465780633d7637371461006f578063714af34b14610090575b600080fd5b6100596100543660046116aa565b6100b0565b6040516100669190611a98565b60405180910390f35b61008261007d3660046116aa565b610233565b604051908152602001610066565b6100a361009e366004611afa565b610395565b6040516100669190611b28565b60606000826001600160a01b031663375a7cba6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156100f2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261011a9190810190611be4565b90506000846001600160401b0381111561013657610136611b42565b60405190808252806020026020018201604052801561016f57816020015b61015c6115b2565b8152602001906001900390816101545790505b509050815160000361018457915061022d9050565b6000600183516101949190611c98565b90506000868451116101a75760006101b4565b8684516101b49190611c98565b90506000825b828110610224576101e4888783815181106101d7576101d7611cab565b6020026020010151610395565b85836101ef81611cc1565b94508151811061020157610201611cab565b60209081029190910101528015610224578061021c81611cda565b9150506101ba565b50929450505050505b92915050565b604051633fc6a14f60e11b8152600481018390526000906001600160a01b03831690637f8d429e90602401602060405180830381865afa15801561027b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029f9190611d01565b801561030f5750604051630361db3d60e11b8152600481018490526001600160a01b038316906306c3b67a90602401602060405180830381865afa1580156102eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030f9190611d01565b1561038e5760405163c081d8a360e01b8152600481018490526000906001600160a01b0384169063c081d8a390602401602060405180830381865afa15801561035c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103809190611d1c565b9050801561038c578093505b505b5090919050565b61039d6115b2565b6000826001600160a01b0316632ddc7de76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104019190611d1c565b90506000846001600160a01b0316635bd9e2996040518163ffffffff1660e01b8152600401602060405180830381865afa158015610443573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104679190611d35565b9050600080610477838786610989565b91509150600080600061048a898b610c1f565b9250925092506040518061024001604052808a6001600160a01b031681526020018a6001600160a01b031663e6bfd26a6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156104e9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105119190810190611da0565b81526020018681526020016105878b8d6001600160a01b0316635bd9e2996040518163ffffffff1660e01b8152600401602060405180830381865afa15801561055e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105829190611d35565b610fc5565b81526020018a6001600160a01b0316630d0e932b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105ca573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105ee9190611d1c565b81526020018581526020018560008151811061060c5761060c611cab565b60200260200101516001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610651573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106759190611d1c565b81526020018a6001600160a01b031663a384d6ff6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106dc9190611d1c565b81526020018a6001600160a01b031663b09ad8a06040518163ffffffff1660e01b8152600401602060405180830381865afa15801561071f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107439190611d1c565b81526020018a6001600160a01b03166344bea37e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610786573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107aa9190611d1c565b81526020018881526020018a6001600160a01b031663b06a5c526040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108179190611d1c565b81526020018a6001600160a01b0316637aa77f296040518163ffffffff1660e01b8152600401602060405180830381865afa15801561085a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087e9190611d1c565b81526020018481526020018281526020018381526020016000886001600160a01b031663dd34de678b6040518263ffffffff1660e01b81526004016108c591815260200190565b602060405180830381865afa1580156108e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109069190611d1c565b1115158152602001610979888c6001600160a01b0316632ddc7de76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610950573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109749190611d1c565b61144b565b90529a9950505050505050505050565b6060806000856001600160a01b031663d42dc0c2856040518263ffffffff1660e01b81526004016109bc91815260200190565b602060405180830381865afa1580156109d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109fd9190611d1c565b9050806001600160401b03811115610a1757610a17611b42565b604051908082528060200260200182016040528015610a4a57816020015b6060815260200190600190039081610a355790505b509250806001600160401b03811115610a6557610a65611b42565b604051908082528060200260200182016040528015610a8e578160200160208202803683370190505b50915060005b81811015610c1557610aa7600183611c98565b8114610b1f5760405163eed2a14760e01b8152600481018290526001600160a01b0387169063eed2a14790602401600060405180830381865afa158015610af2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b1a9190810190611da0565b610b47565b6040518060400160405280600e81526020016d125b9d985b1a59081c995cdd5b1d60921b8152505b848281518110610b5957610b59611cab565b6020908102919091010152604051630315311560e31b8152600481018290526000906001600160a01b038816906318a988a890602401600060405180830381865afa158015610bac573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610bd49190810190611df0565b50905080848381518110610bea57610bea611cab565b6001600160a01b03909216602092830291909101909101525080610c0d81611cc1565b915050610a94565b5050935093915050565b60608060606000856001600160a01b031663455d885e6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610c64573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c8c9190810190611e54565b905080516001600160401b03811115610ca757610ca7611b42565b604051908082528060200260200182016040528015610d2e57816020015b604080516101608101825260008082526020808301829052928201819052606082018190526080820181905260a0820181905260c0820181905260e08201819052610100820181905261012082018190526101408201528252600019909201910181610cc55790505b50935083516001600160401b03811115610d4a57610d4a611b42565b604051908082528060200260200182016040528015610d7d57816020015b6060815260200190600190039081610d685790505b50925083516001600160401b03811115610d9957610d99611b42565b604051908082528060200260200182016040528015610dc2578160200160208202803683370190505b5091506000856001600160a01b031663bc8802a26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e299190611d35565b905060005b8551811015610fbb57610e5a838281518110610e4c57610e4c611cab565b602002602001015183610233565b848281518110610e6c57610e6c611cab565b602002602001018181525050816001600160a01b03166395addb90858381518110610e9957610e99611cab565b60200260200101516040518263ffffffff1660e01b8152600401610ebf91815260200190565b61016060405180830381865afa158015610edd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f019190611eed565b868281518110610f1357610f13611cab565b602090810291909101015260405163149281dd60e11b8152600481018290526001600160a01b0389169063292503ba90602401600060405180830381865afa158015610f63573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f8b9190810190611da0565b858281518110610f9d57610f9d611cab565b60200260200101819052508080610fb390611cc1565b915050610e2e565b5050509250925092565b610fcd611657565b60006001600160a01b0316836001600160a01b031663d03ecc646040518163ffffffff1660e01b8152600401602060405180830381865afa158015611016573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103a9190611d35565b6001600160a01b0316036110f1576040805160e08101825260008082528251602080820185528282528084019190915283518281529081018452919283019190611094565b606081526020019060019003908161107f5790505b50815260200160006040519080825280602002602001820160405280156110c5578160200160208202803683370190505b50815260006020808301829052604080840183905280519283529082019052606090910152905061022d565b6000836001600160a01b031663d03ecc646040518163ffffffff1660e01b8152600401602060405180830381865afa158015611131573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111559190611d35565b90506000806111c68584886001600160a01b0316632ddc7de76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561119d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111c19190611d1c565b610989565b915091506040518060e00160405280876001600160a01b031663d03ecc646040518163ffffffff1660e01b8152600401602060405180830381865afa158015611213573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112379190611d35565b6001600160a01b03168152602001846001600160a01b031663e6bfd26a6040518163ffffffff1660e01b8152600401600060405180830381865afa158015611283573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112ab9190810190611da0565b8152602001838152602001828152602001846001600160a01b0316632ddc7de76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061131e9190611d1c565b81526020016000876001600160a01b031663dd34de67876001600160a01b0316632ddc7de76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611372573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113969190611d1c565b6040518263ffffffff1660e01b81526004016113b491815260200190565b602060405180830381865afa1580156113d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113f59190611d1c565b111515815260200161143f87866001600160a01b0316632ddc7de76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610950573d6000803e3d6000fd5b90529695505050505050565b604051636a16e06160e11b8152600481018290526060906000906001600160a01b0385169063d42dc0c290602401602060405180830381865afa158015611496573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ba9190611d1c565b9050806001600160401b038111156114d4576114d4611b42565b6040519080825280602002602001820160405280156114fd578160200160208202803683370190505b50915060005b818110156115aa57604051630141320560e21b815260048101859052602481018290526001600160a01b03861690630504c81490604401602060405180830381865afa158015611557573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061157b9190611d1c565b83828151811061158d5761158d611cab565b6020908102919091010152806115a281611cc1565b915050611503565b505092915050565b60405180610240016040528060006001600160a01b0316815260200160608152602001606081526020016115e4611657565b8152602001600081526020016060815260200160008152602001600081526020016000815260200160008019168152602001600080191681526020016000801916815260200160008152602001606081526020016060815260200160608152602001600015158152602001606081525090565b6040805160e08101825260008082526060602083018190529282018390528282018390526080820181905260a082015260c081019190915290565b6001600160a01b03811681146116a757600080fd5b50565b600080604083850312156116bd57600080fd5b8235915060208301356116cf81611692565b809150509250929050565b60005b838110156116f55781810151838201526020016116dd565b50506000910152565b600081518084526117168160208601602086016116da565b601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b858110156117725782840389526117608483516116fe565b98850198935090840190600101611748565b5091979650505050505050565b600081518084526020808501945080840160005b838110156117b85781516001600160a01b031687529582019590820190600101611793565b509495945050505050565b600081518084526020808501945080840160005b838110156117b8578151875295820195908201906001016117d7565b60018060a01b0381511682526000602082015160e0602085015261181a60e08501826116fe565b905060408301518482036040860152611833828261172a565b9150506060830151848203606086015261184d828261177f565b9150506080830151608085015260a0830151151560a085015260c083015184820360c086015261187d82826117c3565b95945050505050565b600081518084526020808501945080840160005b838110156117b857815180518852838101516001600160a01b03168489015260408082015163ffffffff908116918a01919091526060808301518216908a01526080808301519091169089015260a08082015115159089015260c0808201519089015260e08082015190890152610100808201519089015261012080820151908901526101409081015190880152610160909601959082019060010161189a565b80516001600160a01b0316825260006102406020830151816020860152611964828601826116fe565b9150506040830151848203604086015261197e828261172a565b9150506060830151848203606086015261199882826117f3565b9150506080830151608085015260a083015184820360a08601526119bc828261177f565b60c0858101519087015260e08086015190870152610100808601519087015261012080860151908701526101408086015190870152610160808601519087015261018080860151908701526101a080860151878303828901529193509150611a248382611886565b925050506101c08084015185830382870152611a4083826117c3565b925050506101e08084015185830382870152611a5c838261172a565b9250505061020080840151611a748287018215159052565b50506102208084015185830382870152611a8e83826117c3565b9695505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015611aed57603f19888603018452611adb85835161193b565b94509285019290850190600101611abf565b5092979650505050505050565b60008060408385031215611b0d57600080fd5b8235611b1881611692565b915060208301356116cf81611692565b602081526000611b3b602083018461193b565b9392505050565b634e487b7160e01b600052604160045260246000fd5b60405161016081016001600160401b0381118282101715611b7b57611b7b611b42565b60405290565b604051601f8201601f191681016001600160401b0381118282101715611ba957611ba9611b42565b604052919050565b60006001600160401b03821115611bca57611bca611b42565b5060051b60200190565b8051611bdf81611692565b919050565b60006020808385031215611bf757600080fd5b82516001600160401b03811115611c0d57600080fd5b8301601f81018513611c1e57600080fd5b8051611c31611c2c82611bb1565b611b81565b81815260059190911b82018301908381019087831115611c5057600080fd5b928401925b82841015611c77578351611c6881611692565b82529284019290840190611c55565b979650505050505050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561022d5761022d611c82565b634e487b7160e01b600052603260045260246000fd5b600060018201611cd357611cd3611c82565b5060010190565b600081611ce957611ce9611c82565b506000190190565b80518015158114611bdf57600080fd5b600060208284031215611d1357600080fd5b611b3b82611cf1565b600060208284031215611d2e57600080fd5b5051919050565b600060208284031215611d4757600080fd5b8151611b3b81611692565b60006001600160401b03831115611d6b57611d6b611b42565b611d7e601f8401601f1916602001611b81565b9050828152838383011115611d9257600080fd5b611b3b8360208301846116da565b600060208284031215611db257600080fd5b81516001600160401b03811115611dc857600080fd5b8201601f81018413611dd957600080fd5b611de884825160208401611d52565b949350505050565b60008060408385031215611e0357600080fd5b8251611e0e81611692565b60208401519092506001600160401b03811115611e2a57600080fd5b8301601f81018513611e3b57600080fd5b611e4a85825160208401611d52565b9150509250929050565b60006020808385031215611e6757600080fd5b82516001600160401b03811115611e7d57600080fd5b8301601f81018513611e8e57600080fd5b8051611e9c611c2c82611bb1565b81815260059190911b82018301908381019087831115611ebb57600080fd5b928401925b82841015611c7757835182529284019290840190611ec0565b805163ffffffff81168114611bdf57600080fd5b60006101608284031215611f0057600080fd5b611f08611b58565b82518152611f1860208401611bd4565b6020820152611f2960408401611ed9565b6040820152611f3a60608401611ed9565b6060820152611f4b60808401611ed9565b6080820152611f5c60a08401611cf1565b60a082015260c0838101519082015260e080840151908201526101008084015190820152610120808401519082015261014092830151928101929092525091905056fea264697066735822122074cd1f2b6fab21e02a4a112576bd2652a27dbe89bdd7012111d94eadf02bee0564736f6c63430008140033",
  "devdoc": {
    "details": "Contract used as a frontend helper. It doesn't have any state-changing function.",
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}