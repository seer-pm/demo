{
  "address": "0x95493F3e3F151eD9ee9338a4Fc1f49c00890F59C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IMarketFactory",
          "name": "marketFactory",
          "type": "address"
        },
        {
          "internalType": "contract Market",
          "name": "market",
          "type": "address"
        }
      ],
      "name": "getMarket",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "id",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "marketName",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "outcomes",
              "type": "string[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "id",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "marketName",
                  "type": "string"
                },
                {
                  "internalType": "string[]",
                  "name": "outcomes",
                  "type": "string[]"
                },
                {
                  "internalType": "address[]",
                  "name": "wrappedTokens",
                  "type": "address[]"
                },
                {
                  "internalType": "bytes32",
                  "name": "conditionId",
                  "type": "bytes32"
                },
                {
                  "internalType": "bool",
                  "name": "payoutReported",
                  "type": "bool"
                },
                {
                  "internalType": "uint256[]",
                  "name": "payoutNumerators",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct MarketView.ParentMarketInfo",
              "name": "parentMarket",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "parentOutcome",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "collateralToken",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "wrappedTokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "outcomesSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lowerBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upperBound",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "parentCollectionId",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "collateralToken1",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collateralToken2",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "conditionId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "questionId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "templateId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "content_hash",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "arbitrator",
                  "type": "address"
                },
                {
                  "internalType": "uint32",
                  "name": "opening_ts",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "timeout",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "finalize_ts",
                  "type": "uint32"
                },
                {
                  "internalType": "bool",
                  "name": "is_pending_arbitration",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "bounty",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "best_answer",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "history_hash",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "bond",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "min_bond",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IRealityETH_v3_0.Question[]",
              "name": "questions",
              "type": "tuple[]"
            },
            {
              "internalType": "bytes32[]",
              "name": "questionsIds",
              "type": "bytes32[]"
            },
            {
              "internalType": "string[]",
              "name": "encodedQuestions",
              "type": "string[]"
            },
            {
              "internalType": "bool",
              "name": "payoutReported",
              "type": "bool"
            },
            {
              "internalType": "uint256[]",
              "name": "payoutNumerators",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct MarketView.MarketInfo",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "count",
          "type": "uint256"
        },
        {
          "internalType": "contract IMarketFactory",
          "name": "marketFactory",
          "type": "address"
        }
      ],
      "name": "getMarkets",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "id",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "marketName",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "outcomes",
              "type": "string[]"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "id",
                  "type": "address"
                },
                {
                  "internalType": "string",
                  "name": "marketName",
                  "type": "string"
                },
                {
                  "internalType": "string[]",
                  "name": "outcomes",
                  "type": "string[]"
                },
                {
                  "internalType": "address[]",
                  "name": "wrappedTokens",
                  "type": "address[]"
                },
                {
                  "internalType": "bytes32",
                  "name": "conditionId",
                  "type": "bytes32"
                },
                {
                  "internalType": "bool",
                  "name": "payoutReported",
                  "type": "bool"
                },
                {
                  "internalType": "uint256[]",
                  "name": "payoutNumerators",
                  "type": "uint256[]"
                }
              ],
              "internalType": "struct MarketView.ParentMarketInfo",
              "name": "parentMarket",
              "type": "tuple"
            },
            {
              "internalType": "uint256",
              "name": "parentOutcome",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "collateralToken",
              "type": "address"
            },
            {
              "internalType": "address[]",
              "name": "wrappedTokens",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "outcomesSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lowerBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upperBound",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "parentCollectionId",
              "type": "bytes32"
            },
            {
              "internalType": "address",
              "name": "collateralToken1",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "collateralToken2",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "conditionId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "questionId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "templateId",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "bytes32",
                  "name": "content_hash",
                  "type": "bytes32"
                },
                {
                  "internalType": "address",
                  "name": "arbitrator",
                  "type": "address"
                },
                {
                  "internalType": "uint32",
                  "name": "opening_ts",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "timeout",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "finalize_ts",
                  "type": "uint32"
                },
                {
                  "internalType": "bool",
                  "name": "is_pending_arbitration",
                  "type": "bool"
                },
                {
                  "internalType": "uint256",
                  "name": "bounty",
                  "type": "uint256"
                },
                {
                  "internalType": "bytes32",
                  "name": "best_answer",
                  "type": "bytes32"
                },
                {
                  "internalType": "bytes32",
                  "name": "history_hash",
                  "type": "bytes32"
                },
                {
                  "internalType": "uint256",
                  "name": "bond",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "min_bond",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IRealityETH_v3_0.Question[]",
              "name": "questions",
              "type": "tuple[]"
            },
            {
              "internalType": "bytes32[]",
              "name": "questionsIds",
              "type": "bytes32[]"
            },
            {
              "internalType": "string[]",
              "name": "encodedQuestions",
              "type": "string[]"
            },
            {
              "internalType": "bool",
              "name": "payoutReported",
              "type": "bool"
            },
            {
              "internalType": "uint256[]",
              "name": "payoutNumerators",
              "type": "uint256[]"
            }
          ],
          "internalType": "struct MarketView.MarketInfo[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "questionId",
          "type": "bytes32"
        },
        {
          "internalType": "contract IRealityETH_v3_0",
          "name": "realitio",
          "type": "address"
        }
      ],
      "name": "getQuestionId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc3fdaee66a7d369a3b47526aae3d3a3a987f1af1a5346e92895a9dfd91778b2a",
  "receipt": {
    "to": null,
    "from": "0x4EDCA105188a0783Ab3A6f09c50567D1E3F8591D",
    "contractAddress": "0x95493F3e3F151eD9ee9338a4Fc1f49c00890F59C",
    "transactionIndex": 7,
    "gasUsed": "2086410",
    "logsBloom": "0x
    "blockHash": "0x9314faec2e2e6c17d52fe4612485cdd2a80a4b8549808c5d09aaf34c472bb485",
    "transactionHash": "0xc3fdaee66a7d369a3b47526aae3d3a3a987f1af1a5346e92895a9dfd91778b2a",
    "logs": [],
    "blockNumber": 38073038,
    "cumulativeGasUsed": "16163195",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 30,
  "solcInputHash": "b615d2104d47b5c5d2e23901078474b4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IMarketFactory\",\"name\":\"marketFactory\",\"type\":\"address\"},{\"internalType\":\"contract Market\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"getMarket\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"outcomes\",\"type\":\"string[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"outcomes\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"wrappedTokens\",\"type\":\"address[]\"},{\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"payoutReported\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"payoutNumerators\",\"type\":\"uint256[]\"}],\"internalType\":\"struct MarketView.ParentMarketInfo\",\"name\":\"parentMarket\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"parentOutcome\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"wrappedTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"outcomesSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lowerBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperBound\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"parentCollectionId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"collateralToken1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken2\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"questionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"templateId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"content_hash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"arbitrator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"opening_ts\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"timeout\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"finalize_ts\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"is_pending_arbitration\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"bounty\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"best_answer\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"history_hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min_bond\",\"type\":\"uint256\"}],\"internalType\":\"struct IRealityETH_v3_0.Question[]\",\"name\":\"questions\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"questionsIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"string[]\",\"name\":\"encodedQuestions\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"payoutReported\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"payoutNumerators\",\"type\":\"uint256[]\"}],\"internalType\":\"struct MarketView.MarketInfo\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"count\",\"type\":\"uint256\"},{\"internalType\":\"contract IMarketFactory\",\"name\":\"marketFactory\",\"type\":\"address\"}],\"name\":\"getMarkets\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"outcomes\",\"type\":\"string[]\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"id\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"outcomes\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"wrappedTokens\",\"type\":\"address[]\"},{\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"},{\"internalType\":\"bool\",\"name\":\"payoutReported\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"payoutNumerators\",\"type\":\"uint256[]\"}],\"internalType\":\"struct MarketView.ParentMarketInfo\",\"name\":\"parentMarket\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"parentOutcome\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"wrappedTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"outcomesSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lowerBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperBound\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"parentCollectionId\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"collateralToken1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"collateralToken2\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"questionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"templateId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"content_hash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"arbitrator\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"opening_ts\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"timeout\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"finalize_ts\",\"type\":\"uint32\"},{\"internalType\":\"bool\",\"name\":\"is_pending_arbitration\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"bounty\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"best_answer\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"history_hash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"bond\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"min_bond\",\"type\":\"uint256\"}],\"internalType\":\"struct IRealityETH_v3_0.Question[]\",\"name\":\"questions\",\"type\":\"tuple[]\"},{\"internalType\":\"bytes32[]\",\"name\":\"questionsIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"string[]\",\"name\":\"encodedQuestions\",\"type\":\"string[]\"},{\"internalType\":\"bool\",\"name\":\"payoutReported\",\"type\":\"bool\"},{\"internalType\":\"uint256[]\",\"name\":\"payoutNumerators\",\"type\":\"uint256[]\"}],\"internalType\":\"struct MarketView.MarketInfo[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"questionId\",\"type\":\"bytes32\"},{\"internalType\":\"contract IRealityETH_v3_0\",\"name\":\"realitio\",\"type\":\"address\"}],\"name\":\"getQuestionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract used as a frontend helper. It doesn't have any state-changing function.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/MarketView.sol\":\"MarketView\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"src/Interfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IERC20 {\\n    function symbol() external view returns (string memory);\\n\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address owner) external returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n}\\n\\n// https://github.com/RealityETH/reality-eth-monorepo/blob/main/packages/contracts/flat/RealityETH-3.0.sol\\ninterface IRealityETH_v3_0 {\\n    function askQuestionWithMinBond(\\n        uint256 template_id,\\n        string memory question,\\n        address arbitrator,\\n        uint32 timeout,\\n        uint32 opening_ts,\\n        uint256 nonce,\\n        uint256 min_bond\\n    ) external payable returns (bytes32);\\n\\n    function resultForOnceSettled(bytes32 question_id) external view returns (bytes32);\\n\\n    function getContentHash(bytes32 question_id) external view returns (bytes32);\\n\\n    function getTimeout(bytes32 question_id) external view returns (uint32);\\n\\n    function submitAnswer(bytes32 question_id, bytes32 answer, uint256 max_previous) external payable;\\n}\\n\\ninterface IConditionalTokens {\\n    function payoutNumerators(bytes32 conditionId, uint256 index) external view returns (uint256);\\n\\n    function payoutDenominator(bytes32 conditionId) external view returns (uint256);\\n\\n    function prepareCondition(address oracle, bytes32 questionId, uint256 outcomeSlotCount) external;\\n\\n    function reportPayouts(bytes32 questionId, uint256[] calldata payouts) external;\\n\\n    function splitPosition(\\n        /*IERC20*/\\n        address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint256[] calldata partition,\\n        uint256 amount\\n    ) external;\\n\\n    function mergePositions(\\n        /*IERC20*/\\n        address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint256[] calldata partition,\\n        uint256 amount\\n    ) external;\\n\\n    function redeemPositions(\\n        /*IERC20*/\\n        address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint256[] calldata indexSets\\n    ) external;\\n\\n    function getConditionId(\\n        address oracle,\\n        bytes32 questionId,\\n        uint256 outcomeSlotCount\\n    ) external pure returns (bytes32);\\n\\n    function getCollectionId(\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint256 indexSet\\n    ) external view returns (bytes32);\\n\\n    function getPositionId(address collateralToken, bytes32 collectionId) external pure returns (uint256);\\n\\n    function getOutcomeSlotCount(bytes32 conditionId) external view returns (uint256);\\n\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    function balanceOf(address owner, uint256 id) external view returns (uint256);\\n}\\n\\ninterface IWrapped1155Factory {\\n    function requireWrapped1155(\\n        /*IERC1155*/\\n        address multiToken,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external /*Wrapped1155*/ returns (IERC20);\\n\\n    function unwrap(\\n        /*IERC1155*/\\n        address multiToken,\\n        uint256 tokenId,\\n        uint256 amount,\\n        address recipient,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8892a345d504bf2d565948b1ec7a5302cf45024e6a0ea3ac810d5eb0b2827d77\",\"license\":\"MIT\"},\"src/Market.sol\":{\"content\":\"/**\\n *  @authors: [@xyzseer]\\n *  @reviewers: [@nvm1410, @madhurMongia, @unknownunknown1, @mani99brar]\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {IERC20} from \\\"./Interfaces.sol\\\";\\nimport \\\"./RealityProxy.sol\\\";\\n\\ncontract Market {\\n    /// @dev Flag to initialize the market only once.\\n    bool public initialized;\\n\\n    /// @dev Contains the information associated to Reality.\\n    /// @param questionsIds Reality questions ids.\\n    /// @param templateId Reality templateId.\\n    /// @param encodedQuestions Encoded questions parameters, needed to create and reopen a question.\\n    struct RealityParams {\\n        bytes32[] questionsIds;\\n        uint256 templateId;\\n        string[] encodedQuestions;\\n    }\\n\\n    /// @dev Contains the information associated to Conditional Tokens.\\n    /// @param conditionId Conditional Tokens conditionId.\\n    /// @param parentCollectionId Conditional Tokens parentCollectionId.\\n    /// @param parentOutcome Conditional outcome to use (optional).\\n    /// @param parentMarket Conditional market to use (optional).\\n    /// @param questionId Conditional Tokens questionId.\\n    /// @param wrapped1155 Outcome tokens Wrapped1155 address.\\n    /// @param data Wrapped1155 token data.\\n    struct ConditionalTokensParams {\\n        bytes32 conditionId;\\n        bytes32 parentCollectionId;\\n        uint256 parentOutcome;\\n        address parentMarket;\\n        bytes32 questionId;\\n        IERC20[] wrapped1155;\\n        bytes[] data;\\n    }\\n\\n    /// @dev The name of the market.\\n    string public marketName;\\n    /// @dev The market outcomes, doesn't include the INVALID_RESULT outcome.\\n    string[] public outcomes;\\n    /// @dev Lower bound, only used for scalar markets.\\n    uint256 public lowerBound;\\n    /// @dev Upper bound, only used for scalar markets.\\n    uint256 public upperBound;\\n    /// @dev Conditional Tokens parameters.\\n    ConditionalTokensParams public conditionalTokensParams;\\n    /// @dev Reality parameters.\\n    RealityParams public realityParams;\\n    /// @dev Oracle contract.\\n    RealityProxy public realityProxy;\\n\\n    /// @dev Initializer.\\n    /// @param _marketName The name of the market.\\n    /// @param _outcomes The market outcomes, doesn't include the INVALID_RESULT outcome.\\n    /// @param _lowerBound Lower bound, only used for scalar markets.\\n    /// @param _upperBound Upper bound, only used for scalar markets.\\n    /// @param _conditionalTokensParams Conditional Tokens params.\\n    /// @param _realityParams Reality params.\\n    /// @param _realityProxy Oracle contract.\\n    function initialize(\\n        string memory _marketName,\\n        string[] memory _outcomes,\\n        uint256 _lowerBound,\\n        uint256 _upperBound,\\n        ConditionalTokensParams memory _conditionalTokensParams,\\n        RealityParams memory _realityParams,\\n        RealityProxy _realityProxy\\n    ) external {\\n        require(!initialized, \\\"Already initialized.\\\");\\n\\n        marketName = _marketName;\\n        outcomes = _outcomes;\\n        lowerBound = _lowerBound;\\n        upperBound = _upperBound;\\n        conditionalTokensParams = _conditionalTokensParams;\\n        realityParams = _realityParams;\\n        realityProxy = _realityProxy;\\n\\n        initialized = true;\\n    }\\n\\n    /// @dev The templateId associated to the Reality question.\\n    /// @return The template id.\\n    function templateId() external view returns (uint256) {\\n        return realityParams.templateId;\\n    }\\n\\n    /// @dev Returns the Reality questions ids. Multi Scalar markets have one question for each outcome, while any other market has only one question.\\n    /// @return The Reality questions ids.\\n    function questionsIds() external view returns (bytes32[] memory) {\\n        return realityParams.questionsIds;\\n    }\\n\\n    /// @dev Encoded questions parameters, needed to create and reopen a question.\\n    /// @param index The question index.\\n    /// @return The encoded question.\\n    function encodedQuestions(uint256 index) external view returns (string memory) {\\n        return realityParams.encodedQuestions[index];\\n    }\\n\\n    /// @dev Conditional Tokens questionId.\\n    /// @return the question ID.\\n    function questionId() external view returns (bytes32) {\\n        return conditionalTokensParams.questionId;\\n    }\\n\\n    /// @dev Conditional Tokens conditionId.\\n    /// @return The condition ID.\\n    function conditionId() external view returns (bytes32) {\\n        return conditionalTokensParams.conditionId;\\n    }\\n\\n    /// @dev Conditional Tokens parentCollectionId.\\n    /// @return The parent collection ID.\\n    function parentCollectionId() external view returns (bytes32) {\\n        return conditionalTokensParams.parentCollectionId;\\n    }\\n\\n    /// @dev The parent market (optional). This market redeems to an outcome token of the parent market.\\n    /// @return The parent market address.\\n    function parentMarket() external view returns (address) {\\n        return conditionalTokensParams.parentMarket;\\n    }\\n\\n    /// @dev The parent outcome (optional). The parent market's outcome token this market redeems for.\\n    /// @return The parent outcome index.\\n    function parentOutcome() external view returns (uint256) {\\n        return conditionalTokensParams.parentOutcome;\\n    }\\n\\n    /// @dev Returns the wrapped1155 and the data corresponding to an outcome token.\\n    /// @param index The outcome index.\\n    /// @return wrapped1155 The wrapped token.\\n    /// @return data The token data.\\n    function wrappedOutcome(uint256 index) external view returns (IERC20 wrapped1155, bytes memory data) {\\n        return (conditionalTokensParams.wrapped1155[index], conditionalTokensParams.data[index]);\\n    }\\n\\n    /// @dev Returns the wrapped1155 and the data corresponding to the parent market.\\n    /// @return wrapped1155 The wrapped token.\\n    /// @return data The token data.\\n    function parentWrappedOutcome() external view returns (IERC20 wrapped1155, bytes memory data) {\\n        if (conditionalTokensParams.parentMarket != address(0)) {\\n            (wrapped1155, data) =\\n                Market(conditionalTokensParams.parentMarket).wrappedOutcome(conditionalTokensParams.parentOutcome);\\n        }\\n    }\\n\\n    /// @dev Returns the number of outcomes.\\n    /// Doesn't include the INVALID_RESULT outcome.\\n    /// @return numOutcomes The number of outcomes.\\n    function numOutcomes() external view returns (uint256) {\\n        return outcomes.length;\\n    }\\n\\n    /// @dev Helper function to resolve the market.\\n    function resolve() external {\\n        realityProxy.resolve(this);\\n    }\\n}\\n\",\"keccak256\":\"0xa1a7e99f16812a345d7cb9a063516632f5257704969914948016629605232a3d\",\"license\":\"MIT\"},\"src/MarketView.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {IERC20} from \\\"./Interfaces.sol\\\";\\nimport {Market} from \\\"./Market.sol\\\";\\n\\ninterface IConditionalTokens {\\n    function getCollectionId(\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint256 indexSet\\n    ) external view returns (bytes32);\\n\\n    function getPositionId(address collateralToken, bytes32 collectionId) external pure returns (uint256);\\n\\n    function getOutcomeSlotCount(bytes32 conditionId) external view returns (uint256);\\n\\n    function payoutDenominator(bytes32 conditionId) external view returns (uint256);\\n\\n    function payoutNumerators(bytes32 conditionId, uint256 index) external view returns (uint256);\\n}\\n\\ninterface IMarketFactory {\\n    function allMarkets() external view returns (address[] memory);\\n\\n    function conditionalTokens() external view returns (IConditionalTokens);\\n\\n    function realitio() external view returns (IRealityETH_v3_0);\\n\\n    function collateralToken() external view returns (address);\\n}\\n\\ninterface IFutarchyProposal {\\n    function collateralToken1() external view returns (address);\\n    function collateralToken2() external view returns (address);\\n    function encodedQuestion() external view returns (string memory);\\n}\\n\\ninterface IRealityETH_v3_0 {\\n    struct Question {\\n        bytes32 content_hash;\\n        address arbitrator;\\n        uint32 opening_ts;\\n        uint32 timeout;\\n        uint32 finalize_ts;\\n        bool is_pending_arbitration;\\n        uint256 bounty;\\n        bytes32 best_answer;\\n        bytes32 history_hash;\\n        uint256 bond;\\n        uint256 min_bond;\\n    }\\n\\n    function questions(bytes32 question_id) external view returns (Question memory);\\n\\n    function isFinalized(bytes32 question_id) external view returns (bool);\\n\\n    function isSettledTooSoon(bytes32 question_id) external view returns (bool);\\n\\n    function reopened_questions(bytes32 question_id) external view returns (bytes32);\\n}\\n\\n/// @dev Contract used as a frontend helper. It doesn't have any state-changing function.\\ncontract MarketView {\\n    struct ParentMarketInfo {\\n        address id;\\n        string marketName;\\n        string[] outcomes;\\n        address[] wrappedTokens;\\n        bytes32 conditionId;\\n        bool payoutReported;\\n        uint256[] payoutNumerators;\\n    }\\n\\n    struct MarketInfo {\\n        address id;\\n        string marketName;\\n        string[] outcomes;\\n        ParentMarketInfo parentMarket;\\n        uint256 parentOutcome;\\n        address collateralToken;\\n        address[] wrappedTokens;\\n        uint256 outcomesSupply;\\n        uint256 lowerBound;\\n        uint256 upperBound;\\n        bytes32 parentCollectionId;\\n        address collateralToken1;\\n        address collateralToken2;\\n        bytes32 conditionId;\\n        bytes32 questionId;\\n        uint256 templateId;\\n        IRealityETH_v3_0.Question[] questions;\\n        bytes32[] questionsIds;\\n        string[] encodedQuestions;\\n        bool payoutReported;\\n        uint256[] payoutNumerators;\\n    }\\n\\n    function getMarket(IMarketFactory marketFactory, Market market) public view returns (MarketInfo memory) {\\n        bytes32 conditionId = market.conditionId();\\n\\n        IConditionalTokens conditionalTokens = marketFactory.conditionalTokens();\\n\\n        (address collateralToken1, address collateralToken2) = getCollateralTokens(market);\\n\\n        (string[] memory outcomes, address[] memory wrappedTokens) =\\n            getOutcomesAndTokens(conditionalTokens, market, conditionId, collateralToken1 != address(0));\\n\\n        (IRealityETH_v3_0.Question[] memory questions, string[] memory encodedQuestions, bytes32[] memory questionsIds)\\n        = getQuestions(market, marketFactory);\\n\\n        return MarketInfo({\\n            id: address(market),\\n            marketName: market.marketName(),\\n            outcomes: outcomes,\\n            parentMarket: getParentMarketInfo(market, marketFactory.conditionalTokens()),\\n            parentOutcome: market.parentOutcome(),\\n            collateralToken: getCollateralToken(market, marketFactory),\\n            wrappedTokens: wrappedTokens,\\n            outcomesSupply: IERC20(wrappedTokens[0]).totalSupply(),\\n            lowerBound: getLowerBound(market),\\n            upperBound: getUpperBound(market),\\n            parentCollectionId: market.parentCollectionId(),\\n            collateralToken1: collateralToken1,\\n            collateralToken2: collateralToken2,\\n            conditionId: conditionId,\\n            questionId: market.questionId(),\\n            templateId: getTemplateId(market),\\n            questions: questions,\\n            questionsIds: questionsIds,\\n            encodedQuestions: encodedQuestions,\\n            payoutReported: conditionalTokens.payoutDenominator(conditionId) > 0,\\n            payoutNumerators: getPayoutNumerators(conditionalTokens, market.conditionId())\\n        });\\n    }\\n\\n    function getLowerBound(Market market) internal view returns (uint256) {\\n        try market.lowerBound() returns (uint256 lowerBound) {\\n            return lowerBound;\\n        } catch {\\n            // futarchy market\\n            return 0;\\n        }\\n    }\\n\\n    function getUpperBound(Market market) internal view returns (uint256) {\\n        try market.upperBound() returns (uint256 upperBound) {\\n            return upperBound;\\n        } catch {\\n            // futarchy market\\n            return 0;\\n        }\\n    }\\n\\n    function getTemplateId(Market market) internal view returns (uint256) {\\n        try market.templateId() returns (uint256 templateId) {\\n            return templateId;\\n        } catch {\\n            // futarchy market\\n            return 2;\\n        }\\n    }\\n\\n    function getCollateralTokens(Market market) internal view returns (address, address) {\\n        try IFutarchyProposal(address(market)).collateralToken1() returns (address collateralToken1) {\\n            // futarchy market\\n            return (collateralToken1, IFutarchyProposal(address(market)).collateralToken2());\\n        } catch {\\n            return (address(0), address(0));\\n        }\\n    }\\n\\n    function getCollateralToken(Market market, IMarketFactory marketFactory) internal view returns (address) {\\n        address parentMarket = market.parentMarket();\\n\\n        if (parentMarket == address(0)) {\\n            try marketFactory.collateralToken() returns (address collateralToken) {\\n                // generic market\\n                return collateralToken;\\n            } catch {\\n                // futarchy market\\n                return address(0);\\n            }\\n        }\\n\\n        try Market(parentMarket).wrappedOutcome(market.parentOutcome()) returns (IERC20 wrapped1155, bytes memory) {\\n            // generic market\\n            return address(wrapped1155);\\n        } catch {\\n            // futarchy market\\n            return address(0);\\n        }\\n    }\\n\\n    function getParentMarketInfo(\\n        Market market,\\n        IConditionalTokens conditionalTokens\\n    ) internal view returns (ParentMarketInfo memory) {\\n        if (market.parentMarket() == address(0)) {\\n            return ParentMarketInfo({\\n                id: address(0),\\n                marketName: \\\"\\\",\\n                outcomes: new string[](0),\\n                wrappedTokens: new address[](0),\\n                conditionId: 0,\\n                payoutReported: false,\\n                payoutNumerators: new uint256[](0)\\n            });\\n        }\\n\\n        Market parentMarket = Market(market.parentMarket());\\n\\n        (address collateralToken1,) = getCollateralTokens(parentMarket);\\n\\n        (string[] memory outcomes, address[] memory wrappedTokens) =\\n            getOutcomesAndTokens(conditionalTokens, parentMarket, market.conditionId(), collateralToken1 != address(0));\\n\\n        return ParentMarketInfo({\\n            id: market.parentMarket(),\\n            marketName: parentMarket.marketName(),\\n            outcomes: outcomes,\\n            wrappedTokens: wrappedTokens,\\n            conditionId: parentMarket.conditionId(),\\n            payoutReported: conditionalTokens.payoutDenominator(parentMarket.conditionId()) > 0,\\n            payoutNumerators: getPayoutNumerators(conditionalTokens, parentMarket.conditionId())\\n        });\\n    }\\n\\n    function getPayoutNumerators(\\n        IConditionalTokens conditionalTokens,\\n        bytes32 conditionId\\n    ) internal view returns (uint256[] memory payoutNumerators) {\\n        uint256 outcomeSlotCount = conditionalTokens.getOutcomeSlotCount(conditionId);\\n\\n        payoutNumerators = new uint256[](outcomeSlotCount);\\n\\n        for (uint256 i = 0; i < outcomeSlotCount; i++) {\\n            payoutNumerators[i] = conditionalTokens.payoutNumerators(conditionId, i);\\n        }\\n\\n        return payoutNumerators;\\n    }\\n\\n    function getOutcomesAndTokens(\\n        IConditionalTokens conditionalTokens,\\n        Market market,\\n        bytes32 conditionId,\\n        bool isFutarchyMarket\\n    ) internal view returns (string[] memory outcomes, address[] memory wrappedTokens) {\\n        uint256 outcomeSlotCount = conditionalTokens.getOutcomeSlotCount(conditionId);\\n\\n        outcomes = new string[](isFutarchyMarket ? 4 : outcomeSlotCount);\\n\\n        wrappedTokens = new address[](outcomes.length);\\n\\n        for (uint256 i = 0; i < outcomes.length; i++) {\\n            outcomes[i] = (!isFutarchyMarket && i == (outcomes.length - 1)) ? \\\"Invalid result\\\" : market.outcomes(i);\\n\\n            (IERC20 wrapped1155,) = market.wrappedOutcome(i);\\n            wrappedTokens[i] = address(wrapped1155);\\n        }\\n\\n        return (outcomes, wrappedTokens);\\n    }\\n\\n    function getQuestions(\\n        Market market,\\n        IMarketFactory marketFactory\\n    )\\n        internal\\n        view\\n        returns (\\n            IRealityETH_v3_0.Question[] memory questions,\\n            string[] memory encodedQuestions,\\n            bytes32[] memory questionsIds\\n        )\\n    {\\n        bytes32[] memory initialQuestionsIds = getQuestionsIds(market);\\n        questions = new IRealityETH_v3_0.Question[](initialQuestionsIds.length);\\n        encodedQuestions = new string[](questions.length);\\n        questionsIds = new bytes32[](questions.length);\\n        {\\n            IRealityETH_v3_0 realitio = marketFactory.realitio();\\n            for (uint256 i = 0; i < questions.length; i++) {\\n                questionsIds[i] = getQuestionId(initialQuestionsIds[i], realitio);\\n                questions[i] = realitio.questions(questionsIds[i]);\\n                encodedQuestions[i] = getEncodedQuestion(market, i);\\n            }\\n        }\\n\\n        return (questions, encodedQuestions, questionsIds);\\n    }\\n\\n    function getQuestionsIds(Market market) internal view returns (bytes32[] memory) {\\n        try market.questionsIds() returns (bytes32[] memory questionsIds) {\\n            return questionsIds;\\n        } catch {\\n            // futarchy market\\n            bytes32[] memory questiondsIds = new bytes32[](1);\\n            questiondsIds[0] = market.questionId();\\n            return questiondsIds;\\n        }\\n    }\\n\\n    function getEncodedQuestion(Market market, uint256 index) internal view returns (string memory) {\\n        try market.encodedQuestions(index) returns (string memory encodedQuestion) {\\n            return encodedQuestion;\\n        } catch {\\n            // futarchy market\\n            return IFutarchyProposal(address(market)).encodedQuestion();\\n        }\\n    }\\n\\n    function getMarkets(uint256 count, IMarketFactory marketFactory) external view returns (MarketInfo[] memory) {\\n        address[] memory allMarkets = marketFactory.allMarkets();\\n\\n        MarketInfo[] memory marketsInfo = new MarketInfo[](count);\\n\\n        if (allMarkets.length == 0) {\\n            return marketsInfo;\\n        }\\n\\n        uint256 lastIndex = allMarkets.length - 1;\\n        uint256 startIndex = allMarkets.length > count ? allMarkets.length - count : 0;\\n        uint256 currentIndex = 0;\\n\\n        for (uint256 j = lastIndex; j >= startIndex; j--) {\\n            marketsInfo[currentIndex++] = getMarket(marketFactory, Market(allMarkets[j]));\\n\\n            if (j == 0) {\\n                break;\\n            }\\n        }\\n\\n        return marketsInfo;\\n    }\\n\\n    function getQuestionId(bytes32 questionId, IRealityETH_v3_0 realitio) public view returns (bytes32) {\\n        if (realitio.isFinalized(questionId) && realitio.isSettledTooSoon(questionId)) {\\n            bytes32 replacementId = realitio.reopened_questions(questionId);\\n            if (replacementId != bytes32(0)) {\\n                questionId = replacementId;\\n            }\\n        }\\n        return questionId;\\n    }\\n}\\n\",\"keccak256\":\"0xe6891307e683a6580e75b999374a0af6fac4bb89aec68a90db0112b82aa0c041\",\"license\":\"MIT\"},\"src/RealityProxy.sol\":{\"content\":\"/**\\n *  @authors: [@xyzseer]\\n *  @reviewers: [@nvm1410, @madhurMongia, @unknownunknown1, @mani99brar]\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {IConditionalTokens, IRealityETH_v3_0} from \\\"./Interfaces.sol\\\";\\nimport \\\"./Market.sol\\\";\\n\\ncontract RealityProxy {\\n    /// @dev Conditional Tokens contract.\\n    IConditionalTokens public immutable conditionalTokens;\\n    /// @dev Reality.eth contract.\\n    IRealityETH_v3_0 public immutable realitio;\\n\\n    /// @dev INVALID_RESULT reserved value.\\n    bytes32 internal constant INVALID_RESULT = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    /// @dev Template for scalar and multi scalar markets.\\n    uint256 internal constant REALITY_UINT_TEMPLATE = 1;\\n    /// @dev Template for categorical markets.\\n    uint256 internal constant REALITY_SINGLE_SELECT_TEMPLATE = 2;\\n    /// @dev Template for multi categorical markets.\\n    uint256 internal constant REALITY_MULTI_SELECT_TEMPLATE = 3;\\n\\n    /// @dev Constructor.\\n    /// @param _conditionalTokens Conditional Tokens contract address.\\n    /// @param _realitio Reality.eth contract address.\\n    constructor(IConditionalTokens _conditionalTokens, IRealityETH_v3_0 _realitio) {\\n        conditionalTokens = _conditionalTokens;\\n        realitio = _realitio;\\n    }\\n\\n    /// @dev Resolves the specified market.\\n    /// @param market Market to resolve. UNTRUSTED.\\n    function resolve(Market market) external {\\n        bytes32[] memory questionsIds = market.questionsIds();\\n        uint256 numOutcomes = market.numOutcomes();\\n        uint256 templateId = market.templateId();\\n        uint256 low = market.lowerBound();\\n        uint256 high = market.upperBound();\\n\\n        // questionId must be a hash of all the values used to resolve a market, this way if an attacker tries to resolve a fake market by changing some value its questionId will not match the id of a valid market.\\n        bytes32 questionId = keccak256(abi.encode(questionsIds, numOutcomes, templateId, low, high));\\n\\n        if (templateId == REALITY_SINGLE_SELECT_TEMPLATE) {\\n            resolveCategoricalMarket(questionId, questionsIds, numOutcomes);\\n            return;\\n        }\\n\\n        if (templateId == REALITY_MULTI_SELECT_TEMPLATE) {\\n            resolveMultiCategoricalMarket(questionId, questionsIds, numOutcomes);\\n            return;\\n        }\\n\\n        if (questionsIds.length > 1) {\\n            resolveMultiScalarMarket(questionId, questionsIds, numOutcomes);\\n            return;\\n        }\\n\\n        resolveScalarMarket(questionId, questionsIds, low, high);\\n    }\\n\\n    /// @dev Resolves to invalid if the answer is invalid or the result is greater than the amount of outcomes.\\n    /// @param questionId Conditional Tokens questionId.\\n    /// @param questionsIds Reality questions ids.\\n    /// @param numOutcomes The number of outcomes, excluding the INVALID_RESULT outcome.\\n    function resolveCategoricalMarket(\\n        bytes32 questionId,\\n        bytes32[] memory questionsIds,\\n        uint256 numOutcomes\\n    ) internal {\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionsIds[0]));\\n        uint256[] memory payouts = new uint256[](numOutcomes + 1);\\n\\n        if (answer == uint256(INVALID_RESULT) || answer >= numOutcomes) {\\n            // the last outcome is INVALID_RESULT.\\n            payouts[numOutcomes] = 1;\\n        } else {\\n            payouts[answer] = 1;\\n        }\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n\\n    /// @dev Resolves to invalid if the answer is invalid or all the results are zero.\\n    /// @param questionId Conditional Tokens questionId.\\n    /// @param questionsIds Reality questions ids.\\n    /// @param numOutcomes The number of outcomes, excluding the INVALID_RESULT outcome.\\n    function resolveMultiCategoricalMarket(\\n        bytes32 questionId,\\n        bytes32[] memory questionsIds,\\n        uint256 numOutcomes\\n    ) internal {\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionsIds[0]));\\n        uint256[] memory payouts = new uint256[](numOutcomes + 1);\\n\\n        if (answer == uint256(INVALID_RESULT)) {\\n            // the last outcome is INVALID_RESULT.\\n            payouts[numOutcomes] = 1;\\n        } else {\\n            bool allZeroes = true;\\n\\n            for (uint256 i = 0; i < numOutcomes; i++) {\\n                payouts[i] = (answer >> i) & 1;\\n                allZeroes = allZeroes && payouts[i] == 0;\\n            }\\n\\n            if (allZeroes) {\\n                // invalid result.\\n                payouts[numOutcomes] = 1;\\n            }\\n        }\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n\\n    /// @dev Resolves to invalid if the answer is invalid.\\n    /// @param questionId Conditional Tokens questionId.\\n    /// @param questionsIds Reality questions ids.\\n    /// @param low Lower bound.\\n    /// @param high Upper bound.\\n    function resolveScalarMarket(\\n        bytes32 questionId,\\n        bytes32[] memory questionsIds,\\n        uint256 low,\\n        uint256 high\\n    ) internal {\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionsIds[0]));\\n        uint256[] memory payouts = new uint256[](3);\\n\\n        if (answer == uint256(INVALID_RESULT)) {\\n            // the last outcome is INVALID_RESULT.\\n            payouts[2] = 1;\\n        } else if (answer <= low) {\\n            payouts[0] = 1;\\n        } else if (answer >= high) {\\n            payouts[1] = 1;\\n        } else {\\n            payouts[0] = high - answer;\\n            payouts[1] = answer - low;\\n        }\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n\\n    /// @dev If any individual result is invalid then the corresponding payout element is set to 0.\\n    /// @dev If all the elements of the payout vector are 0 or all are invalid, the market resolves to invalid.\\n    /// @param questionId Conditional Tokens questionId.\\n    /// @param questionsIds Reality questions ids.\\n    /// @param numOutcomes The number of outcomes, excluding the INVALID_RESULT outcome.\\n    function resolveMultiScalarMarket(\\n        bytes32 questionId,\\n        bytes32[] memory questionsIds,\\n        uint256 numOutcomes\\n    ) internal {\\n        uint256[] memory payouts = new uint256[](numOutcomes + 1);\\n        bool allZeroesOrInvalid = true;\\n\\n        /*\\n         * We set maxPayout to a sufficiently large number for most possible outcomes that also avoids overflows in the following places:\\n         * https://github.com/gnosis/conditional-tokens-contracts/blob/master/contracts/ConditionalTokens.sol#L89\\n         * https://github.com/gnosis/conditional-tokens-contracts/blob/master/contracts/ConditionalTokens.sol#L242\\n         */\\n        uint256 maxPayout = 2 ** (256 / 2) - 1;\\n\\n        for (uint256 i = 0; i < numOutcomes; i++) {\\n            payouts[i] = uint256(realitio.resultForOnceSettled(questionsIds[i]));\\n\\n            if (payouts[i] == uint256(INVALID_RESULT)) {\\n                payouts[i] = 0;\\n            } else if (payouts[i] > maxPayout) {\\n                payouts[i] = maxPayout;\\n            }\\n\\n            allZeroesOrInvalid = allZeroesOrInvalid && payouts[i] == 0;\\n        }\\n\\n        if (allZeroesOrInvalid) {\\n            // invalid result.\\n            payouts[numOutcomes] = 1;\\n        }\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n}\\n\",\"keccak256\":\"0x896712b726fc76f3f29f79b62c5a2976bd9df55cf5d5d42b4e69fce5c078b220\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506124c5806100206000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c8063118cdf61146100465780633d7637371461006f578063714af34b14610090575b600080fd5b610059610054366004611b55565b6100b0565b6040516100669190611f8d565b60405180910390f35b61008261007d366004611b55565b610233565b604051908152602001610066565b6100a361009e366004611fef565b610395565b604051610066919061201d565b60606000826001600160a01b031663375a7cba6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156100f2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261011a91908101906120d4565b90506000846001600160401b0381111561013657610136612037565b60405190808252806020026020018201604052801561016f57816020015b61015c611a2d565b8152602001906001900390816101545790505b509050815160000361018457915061022d9050565b6000600183516101949190612188565b90506000868451116101a75760006101b4565b8684516101b49190612188565b90506000825b828110610224576101e4888783815181106101d7576101d761219b565b6020026020010151610395565b85836101ef816121b1565b9450815181106102015761020161219b565b60209081029190910101528015610224578061021c816121ca565b9150506101ba565b50929450505050505b92915050565b604051633fc6a14f60e11b8152600481018390526000906001600160a01b03831690637f8d429e90602401602060405180830381865afa15801561027b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029f91906121f1565b801561030f5750604051630361db3d60e11b8152600481018490526001600160a01b038316906306c3b67a90602401602060405180830381865afa1580156102eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030f91906121f1565b1561038e5760405163c081d8a360e01b8152600481018490526000906001600160a01b0384169063c081d8a390602401602060405180830381865afa15801561035c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610380919061220c565b9050801561038c578093505b505b5090919050565b61039d611a2d565b6000826001600160a01b0316632ddc7de76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610401919061220c565b90506000846001600160a01b0316635bd9e2996040518163ffffffff1660e01b8152600401602060405180830381865afa158015610443573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104679190612225565b9050600080610475866108d3565b90925090506000806104948589886001600160a01b03881615156109ac565b9150915060008060006104a78b8d610c5f565b925092509250604051806102a001604052808c6001600160a01b031681526020018c6001600160a01b031663e6bfd26a6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610506573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261052e9190810190612290565b81526020018681526020016105a48d8f6001600160a01b0316635bd9e2996040518163ffffffff1660e01b8152600401602060405180830381865afa15801561057b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059f9190612225565b610f45565b81526020018c6001600160a01b0316630d0e932b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060b919061220c565b815260200161061a8d8f6113e6565b6001600160a01b03168152602001858152602001856000815181106106415761064161219b565b60200260200101516001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610686573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106aa919061220c565b81526020016106b88d6115b1565b81526020016106c68d61161e565b81526020018c6001600160a01b03166344bea37e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610709573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072d919061220c565b8152602001886001600160a01b03168152602001876001600160a01b031681526020018a81526020018c6001600160a01b031663b06a5c526040518163ffffffff1660e01b8152600401602060405180830381865afa158015610794573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b8919061220c565b81526020016107c68d611677565b815260200184815260200182815260200183815260200160008a6001600160a01b031663dd34de678d6040518263ffffffff1660e01b815260040161080d91815260200190565b602060405180830381865afa15801561082a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084e919061220c565b11151581526020016108c18a8e6001600160a01b0316632ddc7de76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610898573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bc919061220c565b6116df565b90529c9b505050505050505050505050565b600080826001600160a01b0316634d7b09006040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610930575060408051601f3d908101601f1916820190925261092d91810190612225565b60015b61093f57506000928392509050565b80846001600160a01b031663c4a091d26040518163ffffffff1660e01b8152600401602060405180830381865afa15801561097e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a29190612225565b9250925050915091565b6060806000866001600160a01b031663d42dc0c2866040518263ffffffff1660e01b81526004016109df91815260200190565b602060405180830381865afa1580156109fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a20919061220c565b905083610a2d5780610a30565b60045b6001600160401b03811115610a4757610a47612037565b604051908082528060200260200182016040528015610a7a57816020015b6060815260200190600190039081610a655790505b50925082516001600160401b03811115610a9657610a96612037565b604051908082528060200260200182016040528015610abf578160200160208202803683370190505b50915060005b8351811015610c545784158015610ae8575060018451610ae59190612188565b81145b610b5e5760405163eed2a14760e01b8152600481018290526001600160a01b0388169063eed2a14790602401600060405180830381865afa158015610b31573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b599190810190612290565b610b86565b6040518060400160405280600e81526020016d125b9d985b1a59081c995cdd5b1d60921b8152505b848281518110610b9857610b9861219b565b6020908102919091010152604051630315311560e31b8152600481018290526000906001600160a01b038916906318a988a890602401600060405180830381865afa158015610beb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c1391908101906122e0565b50905080848381518110610c2957610c2961219b565b6001600160a01b03909216602092830291909101909101525080610c4c816121b1565b915050610ac5565b505094509492505050565b60608060606000610c6f86611846565b905080516001600160401b03811115610c8a57610c8a612037565b604051908082528060200260200182016040528015610d1157816020015b604080516101608101825260008082526020808301829052928201819052606082018190526080820181905260a0820181905260c0820181905260e08201819052610100820181905261012082018190526101408201528252600019909201910181610ca85790505b50935083516001600160401b03811115610d2d57610d2d612037565b604051908082528060200260200182016040528015610d6057816020015b6060815260200190600190039081610d4b5790505b50925083516001600160401b03811115610d7c57610d7c612037565b604051908082528060200260200182016040528015610da5578160200160208202803683370190505b5091506000856001600160a01b031663bc8802a26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610de8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0c9190612225565b905060005b8551811015610f3b57610e3d838281518110610e2f57610e2f61219b565b602002602001015183610233565b848281518110610e4f57610e4f61219b565b602002602001018181525050816001600160a01b03166395addb90858381518110610e7c57610e7c61219b565b60200260200101516040518263ffffffff1660e01b8152600401610ea291815260200190565b61016060405180830381865afa158015610ec0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee49190612358565b868281518110610ef657610ef661219b565b6020026020010181905250610f0b8882611953565b858281518110610f1d57610f1d61219b565b60200260200101819052508080610f33906121b1565b915050610e11565b5050509250925092565b610f4d611b02565b60006001600160a01b0316836001600160a01b031663d03ecc646040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fba9190612225565b6001600160a01b031603611071576040805160e08101825260008082528251602080820185528282528084019190915283518281529081018452919283019190611014565b6060815260200190600190039081610fff5790505b5081526020016000604051908082528060200260200182016040528015611045578160200160208202803683370190505b50815260006020808301829052604080840183905280519283529082019052606090910152905061022d565b6000836001600160a01b031663d03ecc646040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d59190612225565b905060006110e2826108d3565b5090506000806111608685896001600160a01b0316632ddc7de76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561112b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114f919061220c565b6001600160a01b03871615156109ac565b915091506040518060e00160405280886001600160a01b031663d03ecc646040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d19190612225565b6001600160a01b03168152602001856001600160a01b031663e6bfd26a6040518163ffffffff1660e01b8152600401600060405180830381865afa15801561121d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112459190810190612290565b8152602001838152602001828152602001856001600160a01b0316632ddc7de76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611294573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b8919061220c565b81526020016000886001600160a01b031663dd34de67886001600160a01b0316632ddc7de76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561130c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611330919061220c565b6040518263ffffffff1660e01b815260040161134e91815260200190565b602060405180830381865afa15801561136b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138f919061220c565b11151581526020016113d988876001600160a01b0316632ddc7de76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610898573d6000803e3d6000fd5b9052979650505050505050565b600080836001600160a01b031663d03ecc646040518163ffffffff1660e01b8152600401602060405180830381865afa158015611427573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061144b9190612225565b90506001600160a01b0381166114cc57826001600160a01b031663b2016bd46040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156114b5575060408051601f3d908101601f191682019092526114b291810190612225565b60015b6114c357600091505061022d565b915061022d9050565b806001600160a01b03166318a988a8856001600160a01b0316630d0e932b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611519573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153d919061220c565b6040518263ffffffff1660e01b815260040161155b91815260200190565b600060405180830381865afa92505050801561159957506040513d6000823e601f3d908101601f1916820160405261159691908101906122e0565b60015b6115a757600091505061022d565b50915061022d9050565b6000816001600160a01b031663a384d6ff6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561160d575060408051601f3d908101601f1916820190925261160a9181019061220c565b60015b61022d57506000919050565b919050565b6000816001600160a01b031663b09ad8a06040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561160d575060408051601f3d908101601f1916820190925261160a9181019061220c565b6000816001600160a01b0316637aa77f296040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156116d3575060408051601f3d908101601f191682019092526116d09181019061220c565b60015b61022d57506002919050565b604051636a16e06160e11b8152600481018290526060906000906001600160a01b0385169063d42dc0c290602401602060405180830381865afa15801561172a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061174e919061220c565b9050806001600160401b0381111561176857611768612037565b604051908082528060200260200182016040528015611791578160200160208202803683370190505b50915060005b8181101561183e57604051630141320560e21b815260048101859052602481018290526001600160a01b03861690630504c81490604401602060405180830381865afa1580156117eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061180f919061220c565b8382815181106118215761182161219b565b602090810291909101015280611836816121b1565b915050611797565b505092915050565b6060816001600160a01b031663455d885e6040518163ffffffff1660e01b8152600401600060405180830381865afa9250505080156118a757506040513d6000823e601f3d908101601f191682016040526118a4919081019061240a565b60015b61022d5760408051600180825281830190925260009160208083019080368337019050509050826001600160a01b031663b06a5c526040518163ffffffff1660e01b8152600401602060405180830381865afa15801561190b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061192f919061220c565b816000815181106119425761194261219b565b602090810291909101015292915050565b60405163149281dd60e11b8152600481018290526060906001600160a01b0384169063292503ba90602401600060405180830381865afa9250505080156119bc57506040513d6000823e601f3d908101601f191682016040526119b99190810190612290565b60015b611a2657826001600160a01b031663a5e4b0186040518163ffffffff1660e01b8152600401600060405180830381865afa1580156119fe573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611a269190810190612290565b905061022d565b604051806102a0016040528060006001600160a01b031681526020016060815260200160608152602001611a5f611b02565b81526020016000815260200160006001600160a01b03168152602001606081526020016000815260200160008152602001600081526020016000801916815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600080191681526020016000801916815260200160008152602001606081526020016060815260200160608152602001600015158152602001606081525090565b6040805160e08101825260008082526060602083018190529282018390528282018390526080820181905260a082015260c081019190915290565b6001600160a01b0381168114611b5257600080fd5b50565b60008060408385031215611b6857600080fd5b823591506020830135611b7a81611b3d565b809150509250929050565b60005b83811015611ba0578181015183820152602001611b88565b50506000910152565b60008151808452611bc1816020860160208601611b85565b601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b85811015611c1d578284038952611c0b848351611ba9565b98850198935090840190600101611bf3565b5091979650505050505050565b600081518084526020808501945080840160005b83811015611c635781516001600160a01b031687529582019590820190600101611c3e565b509495945050505050565b600081518084526020808501945080840160005b83811015611c6357815187529582019590820190600101611c82565b60018060a01b0381511682526000602082015160e06020850152611cc560e0850182611ba9565b905060408301518482036040860152611cde8282611bd5565b91505060608301518482036060860152611cf88282611c2a565b9150506080830151608085015260a0830151151560a085015260c083015184820360c0860152611d288282611c6e565b95945050505050565b600081518084526020808501945080840160005b83811015611c6357815180518852838101516001600160a01b03168489015260408082015163ffffffff908116918a01919091526060808301518216908a01526080808301519091169089015260a08082015115159089015260c0808201519089015260e080820151908901526101008082015190890152610120808201519089015261014090810151908801526101609096019590820190600101611d45565b80516001600160a01b0316825260006102a06020830151816020860152611e0f82860182611ba9565b91505060408301518482036040860152611e298282611bd5565b91505060608301518482036060860152611e438282611c9e565b9150506080830151608085015260a0830151611e6a60a08601826001600160a01b03169052565b5060c083015184820360c0860152611e828282611c2a565b60e08581015190870152610100808601519087015261012080860151908701526101408086015190870152610160808601516001600160a01b0381168289015291935091505050610180838101516001600160a01b0381168683015250506101a083810151908501526101c080840151908501526101e080840151908501526102008084015185830382870152611f198382611d31565b925050506102208084015185830382870152611f358382611c6e565b925050506102408084015185830382870152611f518382611bd5565b9250505061026080840151611f698287018215159052565b50506102808084015185830382870152611f838382611c6e565b9695505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015611fe257603f19888603018452611fd0858351611de6565b94509285019290850190600101611fb4565b5092979650505050505050565b6000806040838503121561200257600080fd5b823561200d81611b3d565b91506020830135611b7a81611b3d565b6020815260006120306020830184611de6565b9392505050565b634e487b7160e01b600052604160045260246000fd5b60405161016081016001600160401b038111828210171561207057612070612037565b60405290565b604051601f8201601f191681016001600160401b038111828210171561209e5761209e612037565b604052919050565b60006001600160401b038211156120bf576120bf612037565b5060051b60200190565b805161161981611b3d565b600060208083850312156120e757600080fd5b82516001600160401b038111156120fd57600080fd5b8301601f8101851361210e57600080fd5b805161212161211c826120a6565b612076565b81815260059190911b8201830190838101908783111561214057600080fd5b928401925b8284101561216757835161215881611b3d565b82529284019290840190612145565b979650505050505050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561022d5761022d612172565b634e487b7160e01b600052603260045260246000fd5b6000600182016121c3576121c3612172565b5060010190565b6000816121d9576121d9612172565b506000190190565b8051801515811461161957600080fd5b60006020828403121561220357600080fd5b612030826121e1565b60006020828403121561221e57600080fd5b5051919050565b60006020828403121561223757600080fd5b815161203081611b3d565b60006001600160401b0383111561225b5761225b612037565b61226e601f8401601f1916602001612076565b905082815283838301111561228257600080fd5b612030836020830184611b85565b6000602082840312156122a257600080fd5b81516001600160401b038111156122b857600080fd5b8201601f810184136122c957600080fd5b6122d884825160208401612242565b949350505050565b600080604083850312156122f357600080fd5b82516122fe81611b3d565b60208401519092506001600160401b0381111561231a57600080fd5b8301601f8101851361232b57600080fd5b61233a85825160208401612242565b9150509250929050565b805163ffffffff8116811461161957600080fd5b6000610160828403121561236b57600080fd5b61237361204d565b82518152612383602084016120c9565b602082015261239460408401612344565b60408201526123a560608401612344565b60608201526123b660808401612344565b60808201526123c760a084016121e1565b60a082015260c0838101519082015260e0808401519082015261010080840151908201526101208084015190820152610140928301519281019290925250919050565b6000602080838503121561241d57600080fd5b82516001600160401b0381111561243357600080fd5b8301601f8101851361244457600080fd5b805161245261211c826120a6565b81815260059190911b8201830190838101908783111561247157600080fd5b928401925b828410156121675783518252928401929084019061247656fea2646970667358221220fa049105b22cd25dd106e6f2ebebe4ac66e2103f1df40166ef4f9a622da1f14b64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c8063118cdf61146100465780633d7637371461006f578063714af34b14610090575b600080fd5b610059610054366004611b55565b6100b0565b6040516100669190611f8d565b60405180910390f35b61008261007d366004611b55565b610233565b604051908152602001610066565b6100a361009e366004611fef565b610395565b604051610066919061201d565b60606000826001600160a01b031663375a7cba6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156100f2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261011a91908101906120d4565b90506000846001600160401b0381111561013657610136612037565b60405190808252806020026020018201604052801561016f57816020015b61015c611a2d565b8152602001906001900390816101545790505b509050815160000361018457915061022d9050565b6000600183516101949190612188565b90506000868451116101a75760006101b4565b8684516101b49190612188565b90506000825b828110610224576101e4888783815181106101d7576101d761219b565b6020026020010151610395565b85836101ef816121b1565b9450815181106102015761020161219b565b60209081029190910101528015610224578061021c816121ca565b9150506101ba565b50929450505050505b92915050565b604051633fc6a14f60e11b8152600481018390526000906001600160a01b03831690637f8d429e90602401602060405180830381865afa15801561027b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061029f91906121f1565b801561030f5750604051630361db3d60e11b8152600481018490526001600160a01b038316906306c3b67a90602401602060405180830381865afa1580156102eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030f91906121f1565b1561038e5760405163c081d8a360e01b8152600481018490526000906001600160a01b0384169063c081d8a390602401602060405180830381865afa15801561035c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610380919061220c565b9050801561038c578093505b505b5090919050565b61039d611a2d565b6000826001600160a01b0316632ddc7de76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103dd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610401919061220c565b90506000846001600160a01b0316635bd9e2996040518163ffffffff1660e01b8152600401602060405180830381865afa158015610443573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104679190612225565b9050600080610475866108d3565b90925090506000806104948589886001600160a01b03881615156109ac565b9150915060008060006104a78b8d610c5f565b925092509250604051806102a001604052808c6001600160a01b031681526020018c6001600160a01b031663e6bfd26a6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610506573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261052e9190810190612290565b81526020018681526020016105a48d8f6001600160a01b0316635bd9e2996040518163ffffffff1660e01b8152600401602060405180830381865afa15801561057b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061059f9190612225565b610f45565b81526020018c6001600160a01b0316630d0e932b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060b919061220c565b815260200161061a8d8f6113e6565b6001600160a01b03168152602001858152602001856000815181106106415761064161219b565b60200260200101516001600160a01b03166318160ddd6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610686573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106aa919061220c565b81526020016106b88d6115b1565b81526020016106c68d61161e565b81526020018c6001600160a01b03166344bea37e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610709573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061072d919061220c565b8152602001886001600160a01b03168152602001876001600160a01b031681526020018a81526020018c6001600160a01b031663b06a5c526040518163ffffffff1660e01b8152600401602060405180830381865afa158015610794573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107b8919061220c565b81526020016107c68d611677565b815260200184815260200182815260200183815260200160008a6001600160a01b031663dd34de678d6040518263ffffffff1660e01b815260040161080d91815260200190565b602060405180830381865afa15801561082a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084e919061220c565b11151581526020016108c18a8e6001600160a01b0316632ddc7de76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610898573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bc919061220c565b6116df565b90529c9b505050505050505050505050565b600080826001600160a01b0316634d7b09006040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610930575060408051601f3d908101601f1916820190925261092d91810190612225565b60015b61093f57506000928392509050565b80846001600160a01b031663c4a091d26040518163ffffffff1660e01b8152600401602060405180830381865afa15801561097e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109a29190612225565b9250925050915091565b6060806000866001600160a01b031663d42dc0c2866040518263ffffffff1660e01b81526004016109df91815260200190565b602060405180830381865afa1580156109fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a20919061220c565b905083610a2d5780610a30565b60045b6001600160401b03811115610a4757610a47612037565b604051908082528060200260200182016040528015610a7a57816020015b6060815260200190600190039081610a655790505b50925082516001600160401b03811115610a9657610a96612037565b604051908082528060200260200182016040528015610abf578160200160208202803683370190505b50915060005b8351811015610c545784158015610ae8575060018451610ae59190612188565b81145b610b5e5760405163eed2a14760e01b8152600481018290526001600160a01b0388169063eed2a14790602401600060405180830381865afa158015610b31573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b599190810190612290565b610b86565b6040518060400160405280600e81526020016d125b9d985b1a59081c995cdd5b1d60921b8152505b848281518110610b9857610b9861219b565b6020908102919091010152604051630315311560e31b8152600481018290526000906001600160a01b038916906318a988a890602401600060405180830381865afa158015610beb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610c1391908101906122e0565b50905080848381518110610c2957610c2961219b565b6001600160a01b03909216602092830291909101909101525080610c4c816121b1565b915050610ac5565b505094509492505050565b60608060606000610c6f86611846565b905080516001600160401b03811115610c8a57610c8a612037565b604051908082528060200260200182016040528015610d1157816020015b604080516101608101825260008082526020808301829052928201819052606082018190526080820181905260a0820181905260c0820181905260e08201819052610100820181905261012082018190526101408201528252600019909201910181610ca85790505b50935083516001600160401b03811115610d2d57610d2d612037565b604051908082528060200260200182016040528015610d6057816020015b6060815260200190600190039081610d4b5790505b50925083516001600160401b03811115610d7c57610d7c612037565b604051908082528060200260200182016040528015610da5578160200160208202803683370190505b5091506000856001600160a01b031663bc8802a26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610de8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e0c9190612225565b905060005b8551811015610f3b57610e3d838281518110610e2f57610e2f61219b565b602002602001015183610233565b848281518110610e4f57610e4f61219b565b602002602001018181525050816001600160a01b03166395addb90858381518110610e7c57610e7c61219b565b60200260200101516040518263ffffffff1660e01b8152600401610ea291815260200190565b61016060405180830381865afa158015610ec0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ee49190612358565b868281518110610ef657610ef661219b565b6020026020010181905250610f0b8882611953565b858281518110610f1d57610f1d61219b565b60200260200101819052508080610f33906121b1565b915050610e11565b5050509250925092565b610f4d611b02565b60006001600160a01b0316836001600160a01b031663d03ecc646040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fba9190612225565b6001600160a01b031603611071576040805160e08101825260008082528251602080820185528282528084019190915283518281529081018452919283019190611014565b6060815260200190600190039081610fff5790505b5081526020016000604051908082528060200260200182016040528015611045578160200160208202803683370190505b50815260006020808301829052604080840183905280519283529082019052606090910152905061022d565b6000836001600160a01b031663d03ecc646040518163ffffffff1660e01b8152600401602060405180830381865afa1580156110b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110d59190612225565b905060006110e2826108d3565b5090506000806111608685896001600160a01b0316632ddc7de76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561112b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061114f919061220c565b6001600160a01b03871615156109ac565b915091506040518060e00160405280886001600160a01b031663d03ecc646040518163ffffffff1660e01b8152600401602060405180830381865afa1580156111ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111d19190612225565b6001600160a01b03168152602001856001600160a01b031663e6bfd26a6040518163ffffffff1660e01b8152600401600060405180830381865afa15801561121d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112459190810190612290565b8152602001838152602001828152602001856001600160a01b0316632ddc7de76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611294573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b8919061220c565b81526020016000886001600160a01b031663dd34de67886001600160a01b0316632ddc7de76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561130c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611330919061220c565b6040518263ffffffff1660e01b815260040161134e91815260200190565b602060405180830381865afa15801561136b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061138f919061220c565b11151581526020016113d988876001600160a01b0316632ddc7de76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610898573d6000803e3d6000fd5b9052979650505050505050565b600080836001600160a01b031663d03ecc646040518163ffffffff1660e01b8152600401602060405180830381865afa158015611427573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061144b9190612225565b90506001600160a01b0381166114cc57826001600160a01b031663b2016bd46040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156114b5575060408051601f3d908101601f191682019092526114b291810190612225565b60015b6114c357600091505061022d565b915061022d9050565b806001600160a01b03166318a988a8856001600160a01b0316630d0e932b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611519573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153d919061220c565b6040518263ffffffff1660e01b815260040161155b91815260200190565b600060405180830381865afa92505050801561159957506040513d6000823e601f3d908101601f1916820160405261159691908101906122e0565b60015b6115a757600091505061022d565b50915061022d9050565b6000816001600160a01b031663a384d6ff6040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561160d575060408051601f3d908101601f1916820190925261160a9181019061220c565b60015b61022d57506000919050565b919050565b6000816001600160a01b031663b09ad8a06040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561160d575060408051601f3d908101601f1916820190925261160a9181019061220c565b6000816001600160a01b0316637aa77f296040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156116d3575060408051601f3d908101601f191682019092526116d09181019061220c565b60015b61022d57506002919050565b604051636a16e06160e11b8152600481018290526060906000906001600160a01b0385169063d42dc0c290602401602060405180830381865afa15801561172a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061174e919061220c565b9050806001600160401b0381111561176857611768612037565b604051908082528060200260200182016040528015611791578160200160208202803683370190505b50915060005b8181101561183e57604051630141320560e21b815260048101859052602481018290526001600160a01b03861690630504c81490604401602060405180830381865afa1580156117eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061180f919061220c565b8382815181106118215761182161219b565b602090810291909101015280611836816121b1565b915050611797565b505092915050565b6060816001600160a01b031663455d885e6040518163ffffffff1660e01b8152600401600060405180830381865afa9250505080156118a757506040513d6000823e601f3d908101601f191682016040526118a4919081019061240a565b60015b61022d5760408051600180825281830190925260009160208083019080368337019050509050826001600160a01b031663b06a5c526040518163ffffffff1660e01b8152600401602060405180830381865afa15801561190b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061192f919061220c565b816000815181106119425761194261219b565b602090810291909101015292915050565b60405163149281dd60e11b8152600481018290526060906001600160a01b0384169063292503ba90602401600060405180830381865afa9250505080156119bc57506040513d6000823e601f3d908101601f191682016040526119b99190810190612290565b60015b611a2657826001600160a01b031663a5e4b0186040518163ffffffff1660e01b8152600401600060405180830381865afa1580156119fe573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611a269190810190612290565b905061022d565b604051806102a0016040528060006001600160a01b031681526020016060815260200160608152602001611a5f611b02565b81526020016000815260200160006001600160a01b03168152602001606081526020016000815260200160008152602001600081526020016000801916815260200160006001600160a01b0316815260200160006001600160a01b03168152602001600080191681526020016000801916815260200160008152602001606081526020016060815260200160608152602001600015158152602001606081525090565b6040805160e08101825260008082526060602083018190529282018390528282018390526080820181905260a082015260c081019190915290565b6001600160a01b0381168114611b5257600080fd5b50565b60008060408385031215611b6857600080fd5b823591506020830135611b7a81611b3d565b809150509250929050565b60005b83811015611ba0578181015183820152602001611b88565b50506000910152565b60008151808452611bc1816020860160208601611b85565b601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b85811015611c1d578284038952611c0b848351611ba9565b98850198935090840190600101611bf3565b5091979650505050505050565b600081518084526020808501945080840160005b83811015611c635781516001600160a01b031687529582019590820190600101611c3e565b509495945050505050565b600081518084526020808501945080840160005b83811015611c6357815187529582019590820190600101611c82565b60018060a01b0381511682526000602082015160e06020850152611cc560e0850182611ba9565b905060408301518482036040860152611cde8282611bd5565b91505060608301518482036060860152611cf88282611c2a565b9150506080830151608085015260a0830151151560a085015260c083015184820360c0860152611d288282611c6e565b95945050505050565b600081518084526020808501945080840160005b83811015611c6357815180518852838101516001600160a01b03168489015260408082015163ffffffff908116918a01919091526060808301518216908a01526080808301519091169089015260a08082015115159089015260c0808201519089015260e080820151908901526101008082015190890152610120808201519089015261014090810151908801526101609096019590820190600101611d45565b80516001600160a01b0316825260006102a06020830151816020860152611e0f82860182611ba9565b91505060408301518482036040860152611e298282611bd5565b91505060608301518482036060860152611e438282611c9e565b9150506080830151608085015260a0830151611e6a60a08601826001600160a01b03169052565b5060c083015184820360c0860152611e828282611c2a565b60e08581015190870152610100808601519087015261012080860151908701526101408086015190870152610160808601516001600160a01b0381168289015291935091505050610180838101516001600160a01b0381168683015250506101a083810151908501526101c080840151908501526101e080840151908501526102008084015185830382870152611f198382611d31565b925050506102208084015185830382870152611f358382611c6e565b925050506102408084015185830382870152611f518382611bd5565b9250505061026080840151611f698287018215159052565b50506102808084015185830382870152611f838382611c6e565b9695505050505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015611fe257603f19888603018452611fd0858351611de6565b94509285019290850190600101611fb4565b5092979650505050505050565b6000806040838503121561200257600080fd5b823561200d81611b3d565b91506020830135611b7a81611b3d565b6020815260006120306020830184611de6565b9392505050565b634e487b7160e01b600052604160045260246000fd5b60405161016081016001600160401b038111828210171561207057612070612037565b60405290565b604051601f8201601f191681016001600160401b038111828210171561209e5761209e612037565b604052919050565b60006001600160401b038211156120bf576120bf612037565b5060051b60200190565b805161161981611b3d565b600060208083850312156120e757600080fd5b82516001600160401b038111156120fd57600080fd5b8301601f8101851361210e57600080fd5b805161212161211c826120a6565b612076565b81815260059190911b8201830190838101908783111561214057600080fd5b928401925b8284101561216757835161215881611b3d565b82529284019290840190612145565b979650505050505050565b634e487b7160e01b600052601160045260246000fd5b8181038181111561022d5761022d612172565b634e487b7160e01b600052603260045260246000fd5b6000600182016121c3576121c3612172565b5060010190565b6000816121d9576121d9612172565b506000190190565b8051801515811461161957600080fd5b60006020828403121561220357600080fd5b612030826121e1565b60006020828403121561221e57600080fd5b5051919050565b60006020828403121561223757600080fd5b815161203081611b3d565b60006001600160401b0383111561225b5761225b612037565b61226e601f8401601f1916602001612076565b905082815283838301111561228257600080fd5b612030836020830184611b85565b6000602082840312156122a257600080fd5b81516001600160401b038111156122b857600080fd5b8201601f810184136122c957600080fd5b6122d884825160208401612242565b949350505050565b600080604083850312156122f357600080fd5b82516122fe81611b3d565b60208401519092506001600160401b0381111561231a57600080fd5b8301601f8101851361232b57600080fd5b61233a85825160208401612242565b9150509250929050565b805163ffffffff8116811461161957600080fd5b6000610160828403121561236b57600080fd5b61237361204d565b82518152612383602084016120c9565b602082015261239460408401612344565b60408201526123a560608401612344565b60608201526123b660808401612344565b60808201526123c760a084016121e1565b60a082015260c0838101519082015260e0808401519082015261010080840151908201526101208084015190820152610140928301519281019290925250919050565b6000602080838503121561241d57600080fd5b82516001600160401b0381111561243357600080fd5b8301601f8101851361244457600080fd5b805161245261211c826120a6565b81815260059190911b8201830190838101908783111561247157600080fd5b928401925b828410156121675783518252928401929084019061247656fea2646970667358221220fa049105b22cd25dd106e6f2ebebe4ac66e2103f1df40166ef4f9a622da1f14b64736f6c63430008140033",
  "devdoc": {
    "details": "Contract used as a frontend helper. It doesn't have any state-changing function.",
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}