{
  "address": "0x7a797A253712c0Ac8Dfd9271e18f8CC3460607C1",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ISingleQuoter",
          "name": "_swaprQuoter",
          "type": "address"
        },
        {
          "internalType": "contract IConditionalTokens",
          "name": "_conditionalTokens",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "conditionalTokens",
      "outputs": [
        {
          "internalType": "contract IConditionalTokens",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenInMarket",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOutMarket",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            }
          ],
          "internalType": "struct TradeQuoter.QuoteParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "quoteMintSingle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "fee",
          "type": "uint16"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "tokenIn",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOut",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenInMarket",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "tokenOutMarket",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amountIn",
              "type": "uint256"
            }
          ],
          "internalType": "struct TradeQuoter.QuoteParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "quoteSwapSingle",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "fee",
          "type": "uint16"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sDAI",
      "outputs": [
        {
          "internalType": "contract IERC4626",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "swaprQuoter",
      "outputs": [
        {
          "internalType": "contract ISingleQuoter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "xDAI",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x7d541e79489cc630121cb96a613a98a1f77a083d5d9c8e6aa12ca6abd2fab412",
  "receipt": {
    "to": null,
    "from": "0xB972788fD94972D673eB3aF068df1Dfe11A2ec37",
    "contractAddress": "0x7a797A253712c0Ac8Dfd9271e18f8CC3460607C1",
    "transactionIndex": 9,
    "gasUsed": "793210",
    "logsBloom": "0x
    "blockHash": "0x007d28583681fb6b431077f170ec82089b5620c018f19ce3dbac6fc47aa0c384",
    "transactionHash": "0x7d541e79489cc630121cb96a613a98a1f77a083d5d9c8e6aa12ca6abd2fab412",
    "logs": [],
    "blockNumber": 37780907,
    "cumulativeGasUsed": "3036953",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xcBaD9FDf0D2814659Eb26f600EFDeAF005Eda0F7",
    "0xCeAfDD6bc0bEF976fdCd1112955828E00543c0Ce"
  ],
  "numDeployments": 1,
  "solcInputHash": "6f803d3c9135ecb8c95a2ac1a7f66ffa",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ISingleQuoter\",\"name\":\"_swaprQuoter\",\"type\":\"address\"},{\"internalType\":\"contract IConditionalTokens\",\"name\":\"_conditionalTokens\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"conditionalTokens\",\"outputs\":[{\"internalType\":\"contract IConditionalTokens\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenInMarket\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOutMarket\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"internalType\":\"struct TradeQuoter.QuoteParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"quoteMintSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"fee\",\"type\":\"uint16\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenInMarket\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenOutMarket\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"}],\"internalType\":\"struct TradeQuoter.QuoteParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"quoteSwapSingle\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"fee\",\"type\":\"uint16\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sDAI\",\"outputs\":[{\"internalType\":\"contract IERC4626\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"swaprQuoter\",\"outputs\":[{\"internalType\":\"contract ISingleQuoter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xDAI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract for generating trade quotes for the Seer trade manager.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Constructor.\",\"params\":{\"_conditionalTokens\":\"ConditionalTokens contract.\",\"_swaprQuoter\":\"Quoter contract.\"}},\"quoteMintSingle((address,address,address,address,uint256))\":{\"details\":\"Generates a quote for minting full set of market outcome tokens, keep desired outcome tokens while trying to sell the rest to re-buy more desired tokens.\",\"params\":{\"params\":\"Quote parameters.\"},\"returns\":{\"amountOut\":\"Total amount of output tokens after minting + selling/re-buying.\",\"fee\":\"Total fee for selling + re-buying.\"}},\"quoteSwapSingle((address,address,address,address,uint256))\":{\"details\":\"Generates a quote for swapping tokens.\",\"params\":{\"params\":\"Quote parameters.\"},\"returns\":{\"amountOut\":\"Amount of output tokens.\",\"fee\":\"Swap fee.\"}}},\"stateVariables\":{\"conditionalTokens\":{\"details\":\"ConditionalTokens contract.\"},\"sDAI\":{\"details\":\"SavingsXDai contract.\"},\"swaprQuoter\":{\"details\":\"Quoter contract.\"},\"xDAI\":{\"details\":\"Dummy address representing xDAI.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/trade/TradeQuoter.sol\":\"TradeQuoter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"src/trade/Interfaces.sol\":{\"content\":\"\\r\\n// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.20;\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ninterface IUniswapV2Router {\\r\\n    function addLiquidity(\\r\\n        address tokenA,\\r\\n        address tokenB,\\r\\n        uint256 amountADesired,\\r\\n        uint256 amountBDesired,\\r\\n        uint256 amountAMin,\\r\\n        uint256 amountBMin,\\r\\n        address to,\\r\\n        uint256 deadline\\r\\n    ) external returns (uint256 amountA, uint256 amountB, uint256 liquidity);\\r\\n}\\r\\n\\r\\ninterface IRouter {\\r\\n    function splitPosition(\\r\\n        address collateral, \\r\\n        address market, \\r\\n        uint256 amount\\r\\n    ) external;\\r\\n}\\r\\n\\r\\ninterface IMarket {\\r\\n    /// @dev Market initialization parameters\\r\\n    struct RealityParams {\\r\\n        bytes32[] questionsIds;\\r\\n        uint256 templateId;\\r\\n        string[] encodedQuestions;\\r\\n    }\\r\\n\\r\\n    /// @dev Conditional Tokens parameters\\r\\n    struct ConditionalTokensParams {\\r\\n        bytes32 conditionId;\\r\\n        bytes32 parentCollectionId;\\r\\n        uint256 parentOutcome;\\r\\n        address parentMarket;\\r\\n        bytes32 questionId;\\r\\n        IERC20[] wrapped1155;\\r\\n        bytes[] data;\\r\\n    }\\r\\n\\r\\n    /// @dev Initialize the market\\r\\n    function initialize(\\r\\n        string memory _marketName,\\r\\n        string[] memory _outcomes,\\r\\n        uint256 _lowerBound,\\r\\n        uint256 _upperBound,\\r\\n        ConditionalTokensParams memory _conditionalTokensParams,\\r\\n        RealityParams memory _realityParams,\\r\\n        address _realityProxy\\r\\n    ) external;\\r\\n\\r\\n    /// @dev Getter for template ID\\r\\n    function templateId() external view returns (uint256);\\r\\n\\r\\n    /// @dev Getter for questions IDs\\r\\n    function questionsIds() external view returns (bytes32[] memory);\\r\\n\\r\\n    /// @dev Getter for encoded questions\\r\\n    function encodedQuestions(uint256 index) external view returns (string memory);\\r\\n\\r\\n    /// @dev Getter for question ID\\r\\n    function questionId() external view returns (bytes32);\\r\\n\\r\\n    /// @dev Getter for condition ID\\r\\n    function conditionId() external view returns (bytes32);\\r\\n\\r\\n    /// @dev Getter for parent collection ID\\r\\n    function parentCollectionId() external view returns (bytes32);\\r\\n\\r\\n    /// @dev Getter for parent market\\r\\n    function parentMarket() external view returns (address);\\r\\n\\r\\n    /// @dev Getter for parent outcome\\r\\n    function parentOutcome() external view returns (uint256);\\r\\n\\r\\n    /// @dev Getter for wrapped outcome\\r\\n    function wrappedOutcome(uint256 index) external view returns (IERC20 wrapped1155, bytes memory data);\\r\\n\\r\\n    /// @dev Getter for parent wrapped outcome\\r\\n    function parentWrappedOutcome() external view returns (IERC20 wrapped1155, bytes memory data);\\r\\n\\r\\n    /// @dev Getter for number of outcomes\\r\\n    function numOutcomes() external view returns (uint256);\\r\\n\\r\\n    /// @dev Resolve the market\\r\\n    function resolve() external;\\r\\n\\r\\n    /// @dev Public getters for market properties\\r\\n    function marketName() external view returns (string memory);\\r\\n    function outcomes(uint256 index) external view returns (string memory);\\r\\n    function lowerBound() external view returns (uint256);\\r\\n    function upperBound() external view returns (uint256);\\r\\n    function initialized() external view returns (bool);\\r\\n}\\r\\n\\r\\ninterface IConditionalTokens {\\r\\n    function payoutNumerators(bytes32 conditionId, uint256 index) external view returns (uint256);\\r\\n\\r\\n    function payoutDenominator(bytes32 conditionId) external view returns (uint256);\\r\\n\\r\\n    function prepareCondition(address oracle, bytes32 questionId, uint256 outcomeSlotCount) external;\\r\\n\\r\\n    function reportPayouts(bytes32 questionId, uint256[] calldata payouts) external;\\r\\n\\r\\n    function splitPosition(\\r\\n        /*IERC20*/\\r\\n        address collateralToken,\\r\\n        bytes32 parentCollectionId,\\r\\n        bytes32 conditionId,\\r\\n        uint256[] calldata partition,\\r\\n        uint256 amount\\r\\n    ) external;\\r\\n\\r\\n    function mergePositions(\\r\\n        /*IERC20*/\\r\\n        address collateralToken,\\r\\n        bytes32 parentCollectionId,\\r\\n        bytes32 conditionId,\\r\\n        uint256[] calldata partition,\\r\\n        uint256 amount\\r\\n    ) external;\\r\\n\\r\\n    function redeemPositions(\\r\\n        /*IERC20*/\\r\\n        address collateralToken,\\r\\n        bytes32 parentCollectionId,\\r\\n        bytes32 conditionId,\\r\\n        uint256[] calldata indexSets\\r\\n    ) external;\\r\\n\\r\\n    function getConditionId(\\r\\n        address oracle,\\r\\n        bytes32 questionId,\\r\\n        uint256 outcomeSlotCount\\r\\n    ) external pure returns (bytes32);\\r\\n\\r\\n    function getCollectionId(\\r\\n        bytes32 parentCollectionId,\\r\\n        bytes32 conditionId,\\r\\n        uint256 indexSet\\r\\n    ) external view returns (bytes32);\\r\\n\\r\\n    function getPositionId(address collateralToken, bytes32 collectionId) external pure returns (uint256);\\r\\n\\r\\n    function getOutcomeSlotCount(bytes32 conditionId) external view returns (uint256);\\r\\n\\r\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\r\\n\\r\\n    function balanceOf(address owner, uint256 id) external view returns (uint256);\\r\\n}\\r\\n\\r\\ninterface ISingleSwapRouter {\\r\\n    struct ExactInputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        address recipient;\\r\\n        uint256 deadline;\\r\\n        uint256 amountIn;\\r\\n        uint256 amountOutMinimum;\\r\\n        uint160 limitSqrtPrice;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps `amountIn` of one token for as much as possible of another token\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\r\\n    /// @return amountOut The amount of the received token\\r\\n    function exactInputSingle(\\r\\n        ExactInputSingleParams calldata params\\r\\n    ) external payable returns (uint256 amountOut);\\r\\n\\r\\n    struct ExactOutputSingleParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        uint24 fee;\\r\\n        address recipient;\\r\\n        uint256 deadline;\\r\\n        uint256 amountOut;\\r\\n        uint256 amountInMaximum;\\r\\n        uint160 limitSqrtPrice;\\r\\n    }\\r\\n\\r\\n    /// @notice Swaps as little as possible of one token for `amountOut` of another token\\r\\n    /// @param params The parameters necessary for the swap, encoded as `ExactOutputSingleParams` in calldata\\r\\n    /// @return amountIn The amount of the input token\\r\\n    function exactOutputSingle(\\r\\n        ExactOutputSingleParams calldata params\\r\\n    ) external payable returns (uint256 amountIn);\\r\\n}\\r\\n\\r\\n/// @title Quoter Interface\\r\\n/// @notice Supports quoting the calculated amounts from exact input or exact output swaps\\r\\n/// @dev These functions are not marked view because they rely on calling non-view functions and reverting\\r\\n/// to compute the result. They are also not gas efficient and should not be called on-chain.\\r\\n/// Credit to Uniswap Labs under GPL-2.0-or-later license:\\r\\n/// https://github.com/Uniswap/v3-periphery\\r\\ninterface ISingleQuoter {\\r\\n    /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\\r\\n    /// @param tokenIn The token being swapped in\\r\\n    /// @param tokenOut The token being swapped out\\r\\n    /// @param amountIn The desired input amount\\r\\n    /// @param limitSqrtPrice The price limit of the pool that cannot be exceeded by the swap\\r\\n    /// @return amountOut The amount of `tokenOut` that would be received\\r\\n    function quoteExactInputSingle(\\r\\n        address tokenIn,\\r\\n        address tokenOut,\\r\\n        uint256 amountIn,\\r\\n        uint160 limitSqrtPrice\\r\\n    ) external returns (uint256 amountOut, uint16 fee);\\r\\n\\r\\n    /// @notice Returns the amount in required to receive the given exact output amount but for a swap of a single pool\\r\\n    /// @param tokenIn The token being swapped in\\r\\n    /// @param tokenOut The token being swapped out\\r\\n    /// @param amountOut The desired output amount\\r\\n    /// @param limitSqrtPrice The price limit of the pool that cannot be exceeded by the swap\\r\\n    /// @return amountIn The amount required as the input for the swap in order to receive `amountOut`\\r\\n    function quoteExactOutputSingle(\\r\\n        address tokenIn,\\r\\n        address tokenOut,\\r\\n        uint256 amountOut,\\r\\n        uint160 limitSqrtPrice\\r\\n    ) external returns (uint256 amountIn, uint16 fee);\\r\\n}\\r\\n\\r\\ninterface SavingsXDaiAdapter {\\r\\n    function deposit(\\r\\n        uint256 assets,\\r\\n        address receiver\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function depositXDAI(address receiver) external payable returns (uint256);\\r\\n\\r\\n    function redeem(\\r\\n        uint256 shares,\\r\\n        address receiver\\r\\n    ) external returns (uint256);\\r\\n\\r\\n    function redeemXDAI(\\r\\n        uint256 shares,\\r\\n        address receiver\\r\\n    ) external payable returns (uint256);\\r\\n}\\r\\n\\r\\ninterface IERC4626 is IERC20 {\\r\\n    function previewDeposit(uint256 assets) external view returns (uint256);\\r\\n\\r\\n    function previewRedeem(uint256 shares) external view returns (uint256);\\r\\n}\\r\\n\",\"keccak256\":\"0x2ad2416ce0d1287cee5ae2bdacbf7eba1a78cc10883bc953acacdd8c88918a84\",\"license\":\"MIT\"},\"src/trade/TradeQuoter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity 0.8.20;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"./Interfaces.sol\\\";\\r\\n\\r\\n/// @dev Contract for generating trade quotes for the Seer trade manager.\\r\\ncontract TradeQuoter {\\r\\n    /// @dev Dummy address representing xDAI.\\r\\n    address public constant xDAI =\\r\\n        address(0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE);\\r\\n    /// @dev SavingsXDai contract.\\r\\n    IERC4626 public constant sDAI =\\r\\n        IERC4626(0xaf204776c7245bF4147c2612BF6e5972Ee483701);\\r\\n\\r\\n    /// @dev Quoter contract.\\r\\n    ISingleQuoter public immutable swaprQuoter;\\r\\n    /// @dev ConditionalTokens contract.\\r\\n    IConditionalTokens public immutable conditionalTokens;\\r\\n\\r\\n    /// @dev Struct for quote.\\r\\n    /// @param tokenIn Input token address.\\r\\n    /// @param tokenOut Output token address.\\r\\n    /// @param tokenInMarket Market of the input token.\\r\\n    /// @param tokenOutMarket Market of the output token.\\r\\n    /// @param amountIn Amount of input token.\\r\\n    struct QuoteParams {\\r\\n        address tokenIn;\\r\\n        address tokenOut;\\r\\n        address tokenInMarket;\\r\\n        address tokenOutMarket;\\r\\n        uint256 amountIn;\\r\\n    }\\r\\n\\r\\n    /// @dev Constructor.\\r\\n    /// @param _swaprQuoter Quoter contract.\\r\\n    /// @param _conditionalTokens ConditionalTokens contract.\\r\\n    constructor(\\r\\n        ISingleQuoter _swaprQuoter,\\r\\n        IConditionalTokens _conditionalTokens\\r\\n    ) {\\r\\n        swaprQuoter = _swaprQuoter;\\r\\n        conditionalTokens = _conditionalTokens;\\r\\n    }\\r\\n\\r\\n    /// @dev Generates a quote for swapping tokens.\\r\\n    /// @param params Quote parameters.\\r\\n    /// @return amountOut Amount of output tokens.\\r\\n    /// @return fee Swap fee.\\r\\n    function quoteSwapSingle(\\r\\n        QuoteParams memory params\\r\\n    ) public returns (uint256 amountOut, uint16 fee) {\\r\\n        if (params.tokenIn == xDAI) {\\r\\n            return\\r\\n                swaprQuoter.quoteExactInputSingle(\\r\\n                    address(sDAI),\\r\\n                    params.tokenOut,\\r\\n                    sDAI.previewDeposit(params.amountIn),\\r\\n                    0\\r\\n                );\\r\\n        }\\r\\n        if (params.tokenOut == xDAI) {\\r\\n            (uint256 quotedAmountOut, uint16 quotedFee) = swaprQuoter\\r\\n                .quoteExactInputSingle(\\r\\n                    params.tokenIn,\\r\\n                    address(sDAI),\\r\\n                    params.amountIn,\\r\\n                    0\\r\\n                );\\r\\n            return (sDAI.previewRedeem(quotedAmountOut), quotedFee);\\r\\n        }\\r\\n        return\\r\\n            swaprQuoter.quoteExactInputSingle(\\r\\n                params.tokenIn,\\r\\n                params.tokenOut,\\r\\n                params.amountIn,\\r\\n                0\\r\\n            );\\r\\n    }\\r\\n\\r\\n    /// @dev Generates a quote for minting full set of market outcome tokens, keep desired outcome tokens while trying to sell the rest to re-buy more desired tokens.\\r\\n    /// @param params Quote parameters.\\r\\n    /// @return amountOut Total amount of output tokens after minting + selling/re-buying.\\r\\n    /// @return fee Total fee for selling + re-buying.\\r\\n    function quoteMintSingle(\\r\\n        QuoteParams memory params\\r\\n    ) public returns (uint256 amountOut, uint16 fee) {\\r\\n        require(\\r\\n            params.tokenOutMarket != address(0),\\r\\n            \\\"Token out market must not be null.\\\"\\r\\n        );\\r\\n        address tokenOutParentMarket = IMarket(params.tokenOutMarket)\\r\\n            .parentMarket();\\r\\n        require(\\r\\n            tokenOutParentMarket == address(params.tokenInMarket),\\r\\n            \\\"Cannot use mint for this pair.\\\"\\r\\n        );\\r\\n        params.amountIn = params.tokenIn == xDAI\\r\\n            ? sDAI.previewDeposit(params.amountIn)\\r\\n            : params.amountIn;\\r\\n        bytes32 conditionId = IMarket(params.tokenOutMarket).conditionId();\\r\\n        uint256 outcomeSlotCount = conditionalTokens.getOutcomeSlotCount(\\r\\n            conditionId\\r\\n        );\\r\\n        uint256 tokenInSurplus = 0;\\r\\n        // in real call it should be able to split all the amountIn to outcome tokens\\r\\n        uint256 totalTokenOut = params.amountIn;\\r\\n        (IERC20 wrapped1155, ) = IMarket(params.tokenOutMarket).wrappedOutcome(\\r\\n            0\\r\\n        );\\r\\n\\r\\n        // we try to sell other outcomes to tokenIn (or sDai if tokenIn is xDAI) to buy tokenOut again\\r\\n        for (uint256 j = 0; j < outcomeSlotCount; j++) {\\r\\n            (wrapped1155, ) = IMarket(params.tokenOutMarket).wrappedOutcome(j);\\r\\n\\r\\n            if (address(wrapped1155) != params.tokenOut) {\\r\\n                try\\r\\n                    swaprQuoter.quoteExactInputSingle(\\r\\n                        address(wrapped1155),\\r\\n                        params.tokenIn == xDAI ? address(sDAI) : params.tokenIn,\\r\\n                        params.amountIn,\\r\\n                        0\\r\\n                    )\\r\\n                returns (uint256 quotedAmountOut, uint16 quotedFee) {\\r\\n                    tokenInSurplus += quotedAmountOut;\\r\\n                    fee+=quotedFee;\\r\\n                } catch {}\\r\\n            }\\r\\n        }\\r\\n        if (tokenInSurplus > 0) {\\r\\n            try\\r\\n                swaprQuoter.quoteExactInputSingle(\\r\\n                    params.tokenIn == xDAI ? address(sDAI) : params.tokenIn,\\r\\n                    params.tokenOut,\\r\\n                    tokenInSurplus,\\r\\n                    0\\r\\n                )\\r\\n            returns (uint256 quotedAmountOut, uint16 quotedFee) {\\r\\n                totalTokenOut += quotedAmountOut;\\r\\n                fee+=quotedFee;\\r\\n            } catch {}\\r\\n        }\\r\\n        return (totalTokenOut, fee);\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xa06c3391b247cb1af43ec3f01ccd79220c8398e36b78638dfc996521457a2d55\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b50604051610e42380380610e4283398101604081905261002f9161005e565b6001600160a01b039182166080521660a052610098565b6001600160a01b038116811461005b57600080fd5b50565b6000806040838503121561007157600080fd5b825161007c81610046565b602084015190925061008d81610046565b809150509250929050565b60805160a051610d5c6100e66000396000818160cf01526106df0152600081816101090152818161019b015281816102f20152818161042801528181610876015261097d0152610d5c6000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806311b300171461006757806311ef62ac146100975780635bd9e299146100ca578063916d6dd5146100f157806393cc504214610104578063de8b61491461012b575b600080fd5b61007a610075366004610acb565b610146565b6040805192835261ffff9091166020830152015b60405180910390f35b6100b273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b6040516001600160a01b03909116815260200161008e565b6100b27f000000000000000000000000000000000000000000000000000000000000000081565b61007a6100ff366004610acb565b610463565b6100b27f000000000000000000000000000000000000000000000000000000000000000081565b6100b273af204776c7245bf4147c2612bf6e5972ee48370181565b60008073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b031683600001516001600160a01b03160361029e576020830151608084015160405163ef8b30f760e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692632d9ebd1d9273af204776c7245bf4147c2612bf6e5972ee48370192839163ef8b30f7916101f1919060040190815260200190565b602060405180830381865afa15801561020e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102329190610b5c565b60006040518563ffffffff1660e01b81526004016102539493929190610b75565b60408051808303816000875af1158015610271573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102959190610ba0565b91509150915091565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b031683602001516001600160a01b0316036104055782516080840151604051632d9ebd1d60e01b815260009283926001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692632d9ebd1d9261034092909173af204776c7245bf4147c2612bf6e5972ee48370191908790600401610b75565b60408051808303816000875af115801561035e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103829190610ba0565b60405163266d6a8360e11b815260048101839052919350915073af204776c7245bf4147c2612bf6e5972ee48370190634cdad50690602401602060405180830381865afa1580156103d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103fb9190610b5c565b9590945092505050565b825160208401516080850151604051632d9ebd1d60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001693632d9ebd1d93610253939192909190600090600401610b75565b606081015160009081906001600160a01b03166104d25760405162461bcd60e51b815260206004820152602260248201527f546f6b656e206f7574206d61726b6574206d757374206e6f74206265206e756c604482015261361760f11b60648201526084015b60405180910390fd5b600083606001516001600160a01b031663d03ecc646040518163ffffffff1660e01b8152600401602060405180830381865afa158015610516573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053a9190610bd7565b905083604001516001600160a01b0316816001600160a01b0316146105a15760405162461bcd60e51b815260206004820152601e60248201527f43616e6e6f7420757365206d696e7420666f72207468697320706169722e000060448201526064016104c9565b83516001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee146105d057836080015161064a565b608084015160405163ef8b30f760e01b8152600481019190915273af204776c7245bf4147c2612bf6e5972ee4837019063ef8b30f790602401602060405180830381865afa158015610626573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064a9190610b5c565b846080018181525050600084606001516001600160a01b0316632ddc7de76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610697573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bb9190610b5c565b604051636a16e06160e11b8152600481018290529091506000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d42dc0c290602401602060405180830381865afa158015610726573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074a9190610b5c565b60808701516060880151604051630315311560e31b815260006004820181905293945083916001600160a01b0316906318a988a890602401600060405180830381865afa15801561079f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107c79190810190610bfb565b50905060005b8481101561096a5760608a0151604051630315311560e31b8152600481018390526001600160a01b03909116906318a988a890602401600060405180830381865afa158015610820573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108489190810190610bfb565b508092505089602001516001600160a01b0316826001600160a01b0316146109585789516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811691632d9ebd1d9185911673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee146108c2578c516108d8565b73af204776c7245bf4147c2612bf6e5972ee4837015b8d6080015160006040518563ffffffff1660e01b81526004016108fe9493929190610b75565b60408051808303816000875af1925050508015610938575060408051601f3d908101601f1916820190925261093591810190610ba0565b60015b15610958576109478287610cd2565b9550610953818b610ceb565b995050505b8061096281610d0d565b9150506107cd565b508215610a5e5788516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811691632d9ebd1d911673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee146109c7578a516109dd565b73af204776c7245bf4147c2612bf6e5972ee4837015b8b602001518660006040518563ffffffff1660e01b8152600401610a049493929190610b75565b60408051808303816000875af1925050508015610a3e575060408051601f3d908101601f19168201909252610a3b91810190610ba0565b60015b15610a5e57610a4d8285610cd2565b9350610a59818a610ceb565b985050505b819750505050505050915091565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610aab57610aab610a6c565b604052919050565b6001600160a01b0381168114610ac857600080fd5b50565b600060a08284031215610add57600080fd5b60405160a0810181811067ffffffffffffffff82111715610b0057610b00610a6c565b6040528235610b0e81610ab3565b81526020830135610b1e81610ab3565b60208201526040830135610b3181610ab3565b60408201526060830135610b4481610ab3565b60608201526080928301359281019290925250919050565b600060208284031215610b6e57600080fd5b5051919050565b6001600160a01b03948516815292841660208401526040830191909152909116606082015260800190565b60008060408385031215610bb357600080fd5b82519150602083015161ffff81168114610bcc57600080fd5b809150509250929050565b600060208284031215610be957600080fd5b8151610bf481610ab3565b9392505050565b60008060408385031215610c0e57600080fd5b8251610c1981610ab3565b8092505060208084015167ffffffffffffffff80821115610c3957600080fd5b818601915086601f830112610c4d57600080fd5b815181811115610c5f57610c5f610a6c565b610c71601f8201601f19168501610a82565b91508082528784828501011115610c8757600080fd5b60005b81811015610ca5578381018501518382018601528401610c8a565b506000848284010152508093505050509250929050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610ce557610ce5610cbc565b92915050565b61ffff818116838216019080821115610d0657610d06610cbc565b5092915050565b600060018201610d1f57610d1f610cbc565b506001019056fea26469706673582212202e9ace3d0f85b8522acded6b493be59557c16047344dca7c9d113d445563d03664736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c806311b300171461006757806311ef62ac146100975780635bd9e299146100ca578063916d6dd5146100f157806393cc504214610104578063de8b61491461012b575b600080fd5b61007a610075366004610acb565b610146565b6040805192835261ffff9091166020830152015b60405180910390f35b6100b273eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b6040516001600160a01b03909116815260200161008e565b6100b27f000000000000000000000000000000000000000000000000000000000000000081565b61007a6100ff366004610acb565b610463565b6100b27f000000000000000000000000000000000000000000000000000000000000000081565b6100b273af204776c7245bf4147c2612bf6e5972ee48370181565b60008073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b031683600001516001600160a01b03160361029e576020830151608084015160405163ef8b30f760e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692632d9ebd1d9273af204776c7245bf4147c2612bf6e5972ee48370192839163ef8b30f7916101f1919060040190815260200190565b602060405180830381865afa15801561020e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102329190610b5c565b60006040518563ffffffff1660e01b81526004016102539493929190610b75565b60408051808303816000875af1158015610271573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102959190610ba0565b91509150915091565b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee6001600160a01b031683602001516001600160a01b0316036104055782516080840151604051632d9ebd1d60e01b815260009283926001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692632d9ebd1d9261034092909173af204776c7245bf4147c2612bf6e5972ee48370191908790600401610b75565b60408051808303816000875af115801561035e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103829190610ba0565b60405163266d6a8360e11b815260048101839052919350915073af204776c7245bf4147c2612bf6e5972ee48370190634cdad50690602401602060405180830381865afa1580156103d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103fb9190610b5c565b9590945092505050565b825160208401516080850151604051632d9ebd1d60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001693632d9ebd1d93610253939192909190600090600401610b75565b606081015160009081906001600160a01b03166104d25760405162461bcd60e51b815260206004820152602260248201527f546f6b656e206f7574206d61726b6574206d757374206e6f74206265206e756c604482015261361760f11b60648201526084015b60405180910390fd5b600083606001516001600160a01b031663d03ecc646040518163ffffffff1660e01b8152600401602060405180830381865afa158015610516573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061053a9190610bd7565b905083604001516001600160a01b0316816001600160a01b0316146105a15760405162461bcd60e51b815260206004820152601e60248201527f43616e6e6f7420757365206d696e7420666f72207468697320706169722e000060448201526064016104c9565b83516001600160a01b031673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee146105d057836080015161064a565b608084015160405163ef8b30f760e01b8152600481019190915273af204776c7245bf4147c2612bf6e5972ee4837019063ef8b30f790602401602060405180830381865afa158015610626573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064a9190610b5c565b846080018181525050600084606001516001600160a01b0316632ddc7de76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610697573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106bb9190610b5c565b604051636a16e06160e11b8152600481018290529091506000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d42dc0c290602401602060405180830381865afa158015610726573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074a9190610b5c565b60808701516060880151604051630315311560e31b815260006004820181905293945083916001600160a01b0316906318a988a890602401600060405180830381865afa15801561079f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107c79190810190610bfb565b50905060005b8481101561096a5760608a0151604051630315311560e31b8152600481018390526001600160a01b03909116906318a988a890602401600060405180830381865afa158015610820573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108489190810190610bfb565b508092505089602001516001600160a01b0316826001600160a01b0316146109585789516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811691632d9ebd1d9185911673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee146108c2578c516108d8565b73af204776c7245bf4147c2612bf6e5972ee4837015b8d6080015160006040518563ffffffff1660e01b81526004016108fe9493929190610b75565b60408051808303816000875af1925050508015610938575060408051601f3d908101601f1916820190925261093591810190610ba0565b60015b15610958576109478287610cd2565b9550610953818b610ceb565b995050505b8061096281610d0d565b9150506107cd565b508215610a5e5788516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811691632d9ebd1d911673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee146109c7578a516109dd565b73af204776c7245bf4147c2612bf6e5972ee4837015b8b602001518660006040518563ffffffff1660e01b8152600401610a049493929190610b75565b60408051808303816000875af1925050508015610a3e575060408051601f3d908101601f19168201909252610a3b91810190610ba0565b60015b15610a5e57610a4d8285610cd2565b9350610a59818a610ceb565b985050505b819750505050505050915091565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715610aab57610aab610a6c565b604052919050565b6001600160a01b0381168114610ac857600080fd5b50565b600060a08284031215610add57600080fd5b60405160a0810181811067ffffffffffffffff82111715610b0057610b00610a6c565b6040528235610b0e81610ab3565b81526020830135610b1e81610ab3565b60208201526040830135610b3181610ab3565b60408201526060830135610b4481610ab3565b60608201526080928301359281019290925250919050565b600060208284031215610b6e57600080fd5b5051919050565b6001600160a01b03948516815292841660208401526040830191909152909116606082015260800190565b60008060408385031215610bb357600080fd5b82519150602083015161ffff81168114610bcc57600080fd5b809150509250929050565b600060208284031215610be957600080fd5b8151610bf481610ab3565b9392505050565b60008060408385031215610c0e57600080fd5b8251610c1981610ab3565b8092505060208084015167ffffffffffffffff80821115610c3957600080fd5b818601915086601f830112610c4d57600080fd5b815181811115610c5f57610c5f610a6c565b610c71601f8201601f19168501610a82565b91508082528784828501011115610c8757600080fd5b60005b81811015610ca5578381018501518382018601528401610c8a565b506000848284010152508093505050509250929050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610ce557610ce5610cbc565b92915050565b61ffff818116838216019080821115610d0657610d06610cbc565b5092915050565b600060018201610d1f57610d1f610cbc565b506001019056fea26469706673582212202e9ace3d0f85b8522acded6b493be59557c16047344dca7c9d113d445563d03664736f6c63430008140033",
  "devdoc": {
    "details": "Contract for generating trade quotes for the Seer trade manager.",
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Constructor.",
        "params": {
          "_conditionalTokens": "ConditionalTokens contract.",
          "_swaprQuoter": "Quoter contract."
        }
      },
      "quoteMintSingle((address,address,address,address,uint256))": {
        "details": "Generates a quote for minting full set of market outcome tokens, keep desired outcome tokens while trying to sell the rest to re-buy more desired tokens.",
        "params": {
          "params": "Quote parameters."
        },
        "returns": {
          "amountOut": "Total amount of output tokens after minting + selling/re-buying.",
          "fee": "Total fee for selling + re-buying."
        }
      },
      "quoteSwapSingle((address,address,address,address,uint256))": {
        "details": "Generates a quote for swapping tokens.",
        "params": {
          "params": "Quote parameters."
        },
        "returns": {
          "amountOut": "Amount of output tokens.",
          "fee": "Swap fee."
        }
      }
    },
    "stateVariables": {
      "conditionalTokens": {
        "details": "ConditionalTokens contract."
      },
      "sDAI": {
        "details": "SavingsXDai contract."
      },
      "swaprQuoter": {
        "details": "Quoter contract."
      },
      "xDAI": {
        "details": "Dummy address representing xDAI."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}