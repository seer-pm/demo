{
  "address": "0x74C4Df5021738ac18dc56FE5917bf9146Dc19C7C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IConditionalTokens",
          "name": "_conditionalTokens",
          "type": "address"
        },
        {
          "internalType": "contract IWrapped1155Factory",
          "name": "_wrapped1155Factory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "conditionalTokens",
      "outputs": [
        {
          "internalType": "contract IConditionalTokens",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "parentCollectionId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "conditionId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "indexSet",
          "type": "uint256"
        }
      ],
      "name": "getTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "conditionId",
          "type": "bytes32"
        }
      ],
      "name": "getWinningOutcomes",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract FutarchyProposal",
          "name": "proposal",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "useFirstCollateral",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mergePositions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract FutarchyProposal",
          "name": "proposal",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mergeProposal",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract FutarchyProposal",
          "name": "proposal",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "useFirstCollateral",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "redeemPositions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract FutarchyProposal",
          "name": "proposal",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount2",
          "type": "uint256"
        }
      ],
      "name": "redeemProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract FutarchyProposal",
          "name": "proposal",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "useFirstCollateral",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "splitPosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract FutarchyProposal",
          "name": "proposal",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "splitProposal",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrapped1155Factory",
      "outputs": [
        {
          "internalType": "contract IWrapped1155Factory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x20bd7e88eb11930fd7db013e137b59cac9c13bae729d038cc87d21f566dd3d6a",
  "receipt": {
    "to": null,
    "from": "0x4EDCA105188a0783Ab3A6f09c50567D1E3F8591D",
    "contractAddress": "0x74C4Df5021738ac18dc56FE5917bf9146Dc19C7C",
    "transactionIndex": 3,
    "gasUsed": "2431788",
    "logsBloom": "0x
    "blockHash": "0xf9f6e996df045d4448c517feafba178102a84da034f4991a8d2653d2b097bd31",
    "transactionHash": "0x20bd7e88eb11930fd7db013e137b59cac9c13bae729d038cc87d21f566dd3d6a",
    "logs": [],
    "blockNumber": 37353747,
    "cumulativeGasUsed": "2821215",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xCeAfDD6bc0bEF976fdCd1112955828E00543c0Ce",
    "0xD194319D1804C1051DD21Ba1Dc931cA72410B79f"
  ],
  "numDeployments": 3,
  "solcInputHash": "949806a266b9d95beb21dff18ded3c38",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IConditionalTokens\",\"name\":\"_conditionalTokens\",\"type\":\"address\"},{\"internalType\":\"contract IWrapped1155Factory\",\"name\":\"_wrapped1155Factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"conditionalTokens\",\"outputs\":[{\"internalType\":\"contract IConditionalTokens\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"parentCollectionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"indexSet\",\"type\":\"uint256\"}],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"}],\"name\":\"getWinningOutcomes\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract FutarchyProposal\",\"name\":\"proposal\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"useFirstCollateral\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mergePositions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract FutarchyProposal\",\"name\":\"proposal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mergeProposal\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract FutarchyProposal\",\"name\":\"proposal\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"useFirstCollateral\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeemPositions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract FutarchyProposal\",\"name\":\"proposal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount2\",\"type\":\"uint256\"}],\"name\":\"redeemProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract FutarchyProposal\",\"name\":\"proposal\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"useFirstCollateral\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"splitPosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract FutarchyProposal\",\"name\":\"proposal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"splitProposal\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrapped1155Factory\",\"outputs\":[{\"internalType\":\"contract IWrapped1155Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Router implementation that allows to use two collateral tokens.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Constructor.\",\"params\":{\"_conditionalTokens\":\"Conditional Tokens contract.\",\"_wrapped1155Factory\":\"Wrapped1155Factory contract.\"}},\"getTokenId(address,bytes32,bytes32,uint256)\":{\"params\":{\"collateralToken\":\"The address of the ERC20 used as collateral.\",\"conditionId\":\"The id of the condition used to redeem.\",\"indexSet\":\"Index set of the outcome collection to combine with the parent outcome collection.\",\"parentCollectionId\":\"The Conditional Tokens parent collection id.\"},\"returns\":{\"_0\":\"The token id.\"}},\"getWinningOutcomes(bytes32)\":{\"params\":{\"conditionId\":\"The id of the condition.\"},\"returns\":{\"_0\":\"An array of outcomes where a true value indicates that the outcome is redeemable.\"}},\"mergePositions(address,bool,uint256)\":{\"details\":\"The ERC20 associated to each outcome must be previously created on the wrapped1155Factory.Collateral tokens are withdrawn only if we are not merging a deep position (parentCollectionId is bytes32(0)).\",\"params\":{\"amount\":\"The amount of outcome tokens to merge.\",\"proposal\":\"The Proposal to merge.\",\"useFirstCollateral\":\"Wether to merge the first or second collateral.\"}},\"mergeProposal(address,uint256)\":{\"details\":\"The ERC20 associated to each outcome must be previously created on the wrapped1155Factory.\",\"params\":{\"amount\":\"The amount to merge.\",\"proposal\":\"The futarchy proposal to merge.\"}},\"redeemPositions(address,bool,uint256)\":{\"details\":\"The ERC20 associated to each outcome must be previously created on the wrapped1155Factory.Collateral tokens are withdrawn only if we are not redeeming a deep position (parentCollectionId is bytes32(0)).\",\"params\":{\"amount\":\"Amount to redeem.\",\"proposal\":\"The Proposal to redeem.\",\"useFirstCollateral\":\"Wether to redeem the first or second collateral.\"}},\"redeemProposal(address,uint256,uint256)\":{\"details\":\"The ERC20 associated to each outcome must be previously created on the wrapped1155Factory.Collateral tokens are withdrawn only if we are not redeeming a deep position (parentCollectionId is bytes32(0)).\",\"params\":{\"amount1\":\"Amount to redeem for the first collateral.\",\"amount2\":\"Amount to redeem for the second collateral.\",\"proposal\":\"The Proposal to redeem.\"}},\"splitPosition(address,bool,uint256)\":{\"details\":\"The ERC20 associated to each outcome must be previously created on the wrapped1155Factory.Collateral tokens are deposited only if we are not splitting a deep position (parentCollectionId is bytes32(0)).\",\"params\":{\"amount\":\"The amount of collateral to split.\",\"proposal\":\"The Proposal to split.\",\"useFirstCollateral\":\"Wether to split the first or second collateral.\"}},\"splitProposal(address,uint256)\":{\"details\":\"The ERC20 associated to each outcome must be previously created on the wrapped1155Factory.\",\"params\":{\"amount\":\"The amount to split.\",\"proposal\":\"The futarchy proposal to split.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"stateVariables\":{\"conditionalTokens\":{\"details\":\"Conditional Tokens contract.\"},\"wrapped1155Factory\":{\"details\":\"Wrapped1155Factory contract.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getTokenId(address,bytes32,bytes32,uint256)\":{\"notice\":\"Constructs a tokenId from a collateral token and an outcome collection.\"},\"getWinningOutcomes(bytes32)\":{\"notice\":\"Helper function used to know the redeemable outcomes associated to a conditionId.\"},\"mergePositions(address,bool,uint256)\":{\"notice\":\"Merges positions and sends the collateral tokens to the user.\"},\"mergeProposal(address,uint256)\":{\"notice\":\"Merges a position using two collateral tokens and sends the ERC20 outcome tokens back to the user.\"},\"redeemPositions(address,bool,uint256)\":{\"notice\":\"Redeems positions and sends the collateral tokens to the user.\"},\"redeemProposal(address,uint256,uint256)\":{\"notice\":\"Redeems positions and sends the collateral tokens to the user.\"},\"splitPosition(address,bool,uint256)\":{\"notice\":\"Transfers the collateral to the Router, splits the position and sends the ERC20 outcome tokens back to the user.\"},\"splitProposal(address,uint256)\":{\"notice\":\"Splits a position using two collateral tokens and sends the ERC20 outcome tokens back to the user.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/FutarchyRouter.sol\":\"FutarchyRouter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface that must be implemented by smart contracts in order to receive\\n * ERC-1155 token transfers.\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb69597a63b202e28401128bed6a6d259e8730191274471af7303eafb247881a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165, ERC165} from \\\"../../../utils/introspection/ERC165.sol\\\";\\nimport {IERC1155Receiver} from \\\"../IERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev Simple implementation of `IERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n */\\nabstract contract ERC1155Holder is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0xc26cd2e2bcf59b87c986fc653545b35010db9c585a3f3312fe61d7b1b3805735\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"src/FutarchyProposal.sol\":{\"content\":\"/**\\n *  @authors: [@xyzseer]\\n *  @reviewers: []\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"./FutarchyRealityProxy.sol\\\";\\nimport {IERC20} from \\\"./Interfaces.sol\\\";\\n\\ncontract FutarchyProposal {\\n    /// @dev Flag to initialize the proposal only once.\\n    bool public initialized;\\n\\n    /// @dev Contains the information associated to the proposal.\\n    /// @param conditionId Conditional Tokens conditionId.\\n    /// @param collateralToken1 First collateral token.\\n    /// @param collateralToken2 Second collateral token.\\n    /// @param parentCollectionId Conditional Tokens parentCollectionId.\\n    /// @param parentOutcome Conditional outcome to use (optional).\\n    /// @param parentMarket Conditional proposal to use (optional).\\n    /// @param questionId Conditional Tokens questionId.\\n    /// @param encodedQuestion Encoded question, needed to create and reopen a question.\\n    /// @param wrapped1155 Outcome tokens Wrapped1155 address.\\n    /// @param data Wrapped1155 token data.\\n    struct FutarchyProposalParams {\\n        bytes32 conditionId;\\n        IERC20 collateralToken1;\\n        IERC20 collateralToken2;\\n        bytes32 parentCollectionId;\\n        uint256 parentOutcome;\\n        address parentMarket;\\n        bytes32 questionId;\\n        string encodedQuestion;\\n        IERC20[] wrapped1155;\\n        bytes[] data;\\n    }\\n\\n    /// @dev The name of the proposal.\\n    string public marketName;\\n    /// @dev The proposal outcomes.\\n    string[] public outcomes;\\n    /// @dev Proposal parameters.\\n    FutarchyProposalParams public futarchyProposalParams;\\n    /// @dev Oracle contract.\\n    FutarchyRealityProxy public realityProxy;\\n\\n    /// @dev Initializer.\\n    /// @param _marketName The name of the proposal.\\n    /// @param _outcomes The proposal outcomes.\\n    /// @param _futarchyProposalParams Futarchy Proposal params.\\n    /// @param _realityProxy Oracle contract.\\n    function initialize(\\n        string memory _marketName,\\n        string[] memory _outcomes,\\n        FutarchyProposalParams memory _futarchyProposalParams,\\n        FutarchyRealityProxy _realityProxy\\n    ) external {\\n        require(!initialized, \\\"Already initialized.\\\");\\n\\n        marketName = _marketName;\\n        outcomes = _outcomes;\\n        futarchyProposalParams = _futarchyProposalParams;\\n        realityProxy = _realityProxy;\\n\\n        initialized = true;\\n    }\\n\\n    /// @dev Encoded question parameters, needed to create and reopen a question.\\n    /// @return The encoded question.\\n    function encodedQuestion() external view returns (string memory) {\\n        return futarchyProposalParams.encodedQuestion;\\n    }\\n\\n    /// @dev Conditional Tokens questionId.\\n    /// @return the question ID.\\n    function questionId() external view returns (bytes32) {\\n        return futarchyProposalParams.questionId;\\n    }\\n\\n    /// @dev Conditional Tokens conditionId.\\n    /// @return The condition ID.\\n    function conditionId() external view returns (bytes32) {\\n        return futarchyProposalParams.conditionId;\\n    }\\n\\n    /// @dev First collateral token.\\n    /// @return The collateral token.\\n    function collateralToken1() external view returns (IERC20) {\\n        return futarchyProposalParams.collateralToken1;\\n    }\\n\\n    /// @dev Second collateral token.\\n    /// @return The collateral token.\\n    function collateralToken2() external view returns (IERC20) {\\n        return futarchyProposalParams.collateralToken2;\\n    }\\n\\n    /// @dev Conditional Tokens parentCollectionId.\\n    /// @return The parent collection ID.\\n    function parentCollectionId() external view returns (bytes32) {\\n        return futarchyProposalParams.parentCollectionId;\\n    }\\n\\n    /// @dev The parent proposal (optional). This proposal redeems to an outcome token of the parent proposal.\\n    /// @return The parent proposal address.\\n    function parentMarket() external view returns (address) {\\n        return futarchyProposalParams.parentMarket;\\n    }\\n\\n    /// @dev The parent outcome (optional). The parent proposal's outcome token this proposal redeems for.\\n    /// @return The parent outcome index.\\n    function parentOutcome() external view returns (uint256) {\\n        return futarchyProposalParams.parentOutcome;\\n    }\\n\\n    /// @dev Returns the wrapped1155 and the data corresponding to an outcome token.\\n    /// @param index The outcome index.\\n    /// @return wrapped1155 The wrapped token.\\n    /// @return data The token data.\\n    function wrappedOutcome(uint256 index) external view returns (IERC20 wrapped1155, bytes memory data) {\\n        return (futarchyProposalParams.wrapped1155[index], futarchyProposalParams.data[index]);\\n    }\\n\\n    /// @dev Returns the wrapped1155 and the data corresponding to the parent proposal.\\n    /// @return wrapped1155 The wrapped token.\\n    /// @return data The token data.\\n    function parentWrappedOutcome() external view returns (IERC20 wrapped1155, bytes memory data) {\\n        if (futarchyProposalParams.parentMarket != address(0)) {\\n            (wrapped1155, data) = FutarchyProposal(futarchyProposalParams.parentMarket).wrappedOutcome(\\n                futarchyProposalParams.parentOutcome\\n            );\\n        }\\n    }\\n\\n    /// @dev Returns the number of outcomes.\\n    /// @return numOutcomes The number of outcomes.\\n    function numOutcomes() external view returns (uint256) {\\n        return outcomes.length;\\n    }\\n\\n    /// @dev Helper function to resolve the proposal.\\n    function resolve() external {\\n        realityProxy.resolve(this);\\n    }\\n}\\n\",\"keccak256\":\"0xcffb7f87501549b26986b45ad8922cf9cd2b14779c4b9fd3e34a78d88328d9ec\",\"license\":\"MIT\"},\"src/FutarchyRealityProxy.sol\":{\"content\":\"/**\\n *  @authors: [@xyzseer]\\n *  @reviewers: []\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"./FutarchyProposal.sol\\\";\\nimport {IConditionalTokens, IRealityETH_v3_0} from \\\"./Interfaces.sol\\\";\\n\\ncontract FutarchyRealityProxy {\\n    /// @dev Conditional Tokens contract.\\n    IConditionalTokens public immutable conditionalTokens;\\n    /// @dev Reality.eth contract.\\n    IRealityETH_v3_0 public immutable realitio;\\n\\n    /// @dev INVALID_RESULT reserved value.\\n    bytes32 internal constant INVALID_RESULT = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    /// @dev Constructor.\\n    /// @param _conditionalTokens Conditional Tokens contract address.\\n    /// @param _realitio Reality.eth contract address.\\n    constructor(IConditionalTokens _conditionalTokens, IRealityETH_v3_0 _realitio) {\\n        conditionalTokens = _conditionalTokens;\\n        realitio = _realitio;\\n    }\\n\\n    /// @dev Resolves the specified proposal.\\n    /// @param proposal Proposal to resolve. UNTRUSTED.\\n    function resolve(FutarchyProposal proposal) external {\\n        bytes32 questionId = proposal.questionId();\\n\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionId));\\n        uint256[] memory payouts = new uint256[](2);\\n\\n        // FutarchyFactory prepares the condition with two outcomes (YES / NO)\\n        if (answer == 0) {\\n            // accept proposal\\n            payouts[0] = 1;\\n        } else {\\n            // reject proposal\\n            payouts[1] = 1;\\n        }\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n}\\n\",\"keccak256\":\"0x64196f220b2b298f67da5947bf7f6350f05ccd3292c4f1999fb6b137a1b41a09\",\"license\":\"MIT\"},\"src/FutarchyRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"./FutarchyProposal.sol\\\";\\nimport {IConditionalTokens, IERC20, IWrapped1155Factory} from \\\"./Interfaces.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\n\\n/// @dev Router implementation that allows to use two collateral tokens.\\ncontract FutarchyRouter is ERC1155Holder {\\n    /// @dev Conditional Tokens contract.\\n    IConditionalTokens public immutable conditionalTokens;\\n    /// @dev Wrapped1155Factory contract.\\n    IWrapped1155Factory public immutable wrapped1155Factory;\\n\\n    /// @dev Constructor.\\n    /// @param _conditionalTokens Conditional Tokens contract.\\n    /// @param _wrapped1155Factory Wrapped1155Factory contract.\\n    constructor(IConditionalTokens _conditionalTokens, IWrapped1155Factory _wrapped1155Factory) {\\n        conditionalTokens = _conditionalTokens;\\n        wrapped1155Factory = _wrapped1155Factory;\\n    }\\n\\n    /// @notice Splits a position using two collateral tokens and sends the ERC20 outcome tokens back to the user.\\n    /// @dev The ERC20 associated to each outcome must be previously created on the wrapped1155Factory.\\n    /// @param proposal The futarchy proposal to split.\\n    /// @param amount The amount to split.\\n    function splitProposal(FutarchyProposal proposal, uint256 amount) external payable {\\n        splitPosition(proposal, true, amount);\\n        splitPosition(proposal, false, amount);\\n    }\\n\\n    /// @notice Transfers the collateral to the Router, splits the position and sends the ERC20 outcome tokens back to the user.\\n    /// @dev The ERC20 associated to each outcome must be previously created on the wrapped1155Factory.\\n    /// @dev Collateral tokens are deposited only if we are not splitting a deep position (parentCollectionId is bytes32(0)).\\n    /// @param proposal The Proposal to split.\\n    /// @param useFirstCollateral Wether to split the first or second collateral.\\n    /// @param amount The amount of collateral to split.\\n    function splitPosition(FutarchyProposal proposal, bool useFirstCollateral, uint256 amount) public {\\n        IERC20 collateralToken = useFirstCollateral ? proposal.collateralToken1() : proposal.collateralToken2();\\n        if (proposal.parentCollectionId() == bytes32(0)) {\\n            // transfer the collateral tokens to the Router.\\n            collateralToken.transferFrom(msg.sender, address(this), amount);\\n        }\\n        _splitPosition(proposal, useFirstCollateral, amount);\\n    }\\n\\n    /// @notice Splits a position and sends the ERC20 outcome tokens to the user.\\n    /// @dev The ERC20 associated to each outcome must be previously created on the wrapped1155Factory.\\n    /// @param proposal The Proposal to split.\\n    /// @param useFirstCollateral Wether to split the first or second collateral.\\n    /// @param amount The amount of collateral to split.\\n    function _splitPosition(FutarchyProposal proposal, bool useFirstCollateral, uint256 amount) internal {\\n        IERC20 collateralToken = useFirstCollateral ? proposal.collateralToken1() : proposal.collateralToken2();\\n        bytes32 parentCollectionId = proposal.parentCollectionId();\\n        bytes32 conditionId = proposal.conditionId();\\n\\n        uint256[] memory partition = new uint256[](2);\\n        partition[0] = 1;\\n        partition[1] = 2;\\n\\n        if (parentCollectionId != bytes32(0)) {\\n            // it's splitting from a parent position, so we need to unwrap these tokens first because they will be burnt to mint the child outcome tokens.\\n            (IERC20 wrapped1155, bytes memory data) = proposal.parentWrappedOutcome();\\n\\n            uint256 tokenId = conditionalTokens.getPositionId(address(collateralToken), parentCollectionId);\\n\\n            wrapped1155.transferFrom(msg.sender, address(this), amount);\\n            wrapped1155Factory.unwrap(address(conditionalTokens), tokenId, amount, address(this), data);\\n        } else {\\n            collateralToken.approve(address(conditionalTokens), amount);\\n        }\\n\\n        conditionalTokens.splitPosition(address(collateralToken), parentCollectionId, conditionId, partition, amount);\\n\\n        // wrap & transfer the minted outcome tokens.\\n        for (uint256 j = 0; j < 2; j++) {\\n            uint256 tokenId = getTokenId(collateralToken, parentCollectionId, conditionId, 1 << j);\\n\\n            (IERC20 wrapped1155, bytes memory data) = proposal.wrappedOutcome(useFirstCollateral ? j : j + 2);\\n\\n            // wrap to erc20.\\n            conditionalTokens.safeTransferFrom(address(this), address(wrapped1155Factory), tokenId, amount, data);\\n\\n            // transfer the ERC20 back to the user.\\n            require(wrapped1155.transfer(msg.sender, amount), \\\"Wrapped token transfer failed\\\");\\n        }\\n    }\\n\\n    /// @notice Merges a position using two collateral tokens and sends the ERC20 outcome tokens back to the user.\\n    /// @dev The ERC20 associated to each outcome must be previously created on the wrapped1155Factory.\\n    /// @param proposal The futarchy proposal to merge.\\n    /// @param amount The amount to merge.\\n    function mergeProposal(FutarchyProposal proposal, uint256 amount) external payable {\\n        mergePositions(proposal, true, amount);\\n        mergePositions(proposal, false, amount);\\n    }\\n\\n    /// @notice Merges positions and sends the collateral tokens to the user.\\n    /// @dev The ERC20 associated to each outcome must be previously created on the wrapped1155Factory.\\n    /// @dev Collateral tokens are withdrawn only if we are not merging a deep position (parentCollectionId is bytes32(0)).\\n    /// @param proposal The Proposal to merge.\\n    /// @param useFirstCollateral Wether to merge the first or second collateral.\\n    /// @param amount The amount of outcome tokens to merge.\\n    function mergePositions(FutarchyProposal proposal, bool useFirstCollateral, uint256 amount) public {\\n        IERC20 collateralToken = useFirstCollateral ? proposal.collateralToken1() : proposal.collateralToken2();\\n        _mergePositions(proposal, useFirstCollateral, amount);\\n\\n        if (proposal.parentCollectionId() == bytes32(0)) {\\n            // send collateral tokens back to the user.\\n            require(collateralToken.transfer(msg.sender, amount), \\\"Collateral transfer failed\\\");\\n        }\\n    }\\n\\n    /// @notice Merges positions and receives the collateral tokens.\\n    /// @dev Callers to this function must send the collateral to the user.\\n    /// @param proposal The Proposal to merge.\\n    /// @param useFirstCollateral Wether to merge the first or second collateral.\\n    /// @param amount The amount of outcome tokens to merge.\\n    function _mergePositions(FutarchyProposal proposal, bool useFirstCollateral, uint256 amount) internal {\\n        IERC20 collateralToken = useFirstCollateral ? proposal.collateralToken1() : proposal.collateralToken2();\\n        bytes32 parentCollectionId = proposal.parentCollectionId();\\n        bytes32 conditionId = proposal.conditionId();\\n\\n        uint256[] memory partition = new uint256[](2);\\n        partition[0] = 1;\\n        partition[1] = 2;\\n\\n        // we need to unwrap the outcome tokens because they will be burnt during the merge.\\n        for (uint256 j = 0; j < 2; j++) {\\n            uint256 tokenId = getTokenId(collateralToken, parentCollectionId, conditionId, 1 << j);\\n\\n            (IERC20 wrapped1155, bytes memory data) = proposal.wrappedOutcome(useFirstCollateral ? j : j + 2);\\n\\n            wrapped1155.transferFrom(msg.sender, address(this), amount);\\n            wrapped1155Factory.unwrap(address(conditionalTokens), tokenId, amount, address(this), data);\\n        }\\n\\n        conditionalTokens.mergePositions(address(collateralToken), parentCollectionId, conditionId, partition, amount);\\n\\n        if (parentCollectionId != bytes32(0)) {\\n            // it's merging from a parent position, so we need to wrap these tokens and send them back to the user.\\n            uint256 tokenId = conditionalTokens.getPositionId(address(collateralToken), parentCollectionId);\\n\\n            (IERC20 wrapped1155, bytes memory data) = proposal.parentWrappedOutcome();\\n\\n            // wrap to erc20.\\n            conditionalTokens.safeTransferFrom(address(this), address(wrapped1155Factory), tokenId, amount, data);\\n\\n            // transfer the ERC20 back to the user.\\n            require(wrapped1155.transfer(msg.sender, amount), \\\"Wrapped token transfer failed\\\");\\n        }\\n    }\\n\\n    /// @notice Redeems positions and sends the collateral tokens to the user.\\n    /// @dev The ERC20 associated to each outcome must be previously created on the wrapped1155Factory.\\n    /// @dev Collateral tokens are withdrawn only if we are not redeeming a deep position (parentCollectionId is bytes32(0)).\\n    /// @param proposal The Proposal to redeem.\\n    /// @param amount1 Amount to redeem for the first collateral.\\n    /// @param amount2 Amount to redeem for the second collateral.\\n    function redeemProposal(FutarchyProposal proposal, uint256 amount1, uint256 amount2) external {\\n        redeemPositions(proposal, true, amount1);\\n        redeemPositions(proposal, false, amount2);\\n    }\\n\\n    /// @notice Redeems positions and sends the collateral tokens to the user.\\n    /// @dev The ERC20 associated to each outcome must be previously created on the wrapped1155Factory.\\n    /// @dev Collateral tokens are withdrawn only if we are not redeeming a deep position (parentCollectionId is bytes32(0)).\\n    /// @param proposal The Proposal to redeem.\\n    /// @param useFirstCollateral Wether to redeem the first or second collateral.\\n    /// @param amount Amount to redeem.\\n    function redeemPositions(FutarchyProposal proposal, bool useFirstCollateral, uint256 amount) public {\\n        IERC20 collateralToken = useFirstCollateral ? proposal.collateralToken1() : proposal.collateralToken2();\\n        bytes32 parentCollectionId = proposal.parentCollectionId();\\n        uint256 initialBalance;\\n\\n        if (parentCollectionId == bytes32(0)) {\\n            initialBalance = collateralToken.balanceOf(address(this));\\n        }\\n\\n        _redeemPositions(proposal, useFirstCollateral, amount);\\n\\n        if (parentCollectionId == bytes32(0)) {\\n            uint256 finalBalance = collateralToken.balanceOf(address(this));\\n\\n            if (finalBalance > initialBalance) {\\n                // send collateral tokens back to the user.\\n                require(\\n                    collateralToken.transfer(msg.sender, finalBalance - initialBalance), \\\"Collateral transfer failed\\\"\\n                );\\n            }\\n        }\\n    }\\n\\n    /// @notice Redeems positions and receives the collateral tokens.\\n    /// @dev Callers to this function must send the collateral to the user.\\n    /// @param proposal The Proposal to redeem.\\n    /// @param useFirstCollateral Whether to redeem the first or second collateral.\\n    /// @param amount Amount to redeem.\\n    function _redeemPositions(FutarchyProposal proposal, bool useFirstCollateral, uint256 amount) internal {\\n        IERC20 collateralToken = useFirstCollateral ? proposal.collateralToken1() : proposal.collateralToken2();\\n        bytes32 parentCollectionId = proposal.parentCollectionId();\\n        bytes32 conditionId = proposal.conditionId();\\n        uint256 tokenId = 0;\\n\\n        uint256[] memory indexSets = new uint256[](1);\\n        bool isApproved = conditionalTokens.payoutNumerators(conditionId, 0) == 1;\\n        uint256 j = isApproved ? 0 : 1;\\n        indexSets[0] = 1 << j;\\n        tokenId = getTokenId(collateralToken, parentCollectionId, conditionId, indexSets[0]);\\n\\n        // first we need to unwrap the outcome tokens that will be redeemed.\\n        (IERC20 wrapped1155, bytes memory data) = proposal.wrappedOutcome(useFirstCollateral ? j : j + 2);\\n\\n        wrapped1155.transferFrom(msg.sender, address(this), amount);\\n\\n        wrapped1155Factory.unwrap(address(conditionalTokens), tokenId, amount, address(this), data);\\n\\n        uint256 initialBalance = 0;\\n\\n        if (parentCollectionId != bytes32(0)) {\\n            // if we are redeeming from a child market, the user may already have parent tokens so we need to track the balance change.\\n            tokenId = conditionalTokens.getPositionId(address(collateralToken), parentCollectionId);\\n            initialBalance = conditionalTokens.balanceOf(address(this), tokenId);\\n        }\\n\\n        conditionalTokens.redeemPositions(address(collateralToken), parentCollectionId, conditionId, indexSets);\\n\\n        if (parentCollectionId != bytes32(0)) {\\n            // if we are redeeming from a child market, redeemPositions() returned outcome tokens of the parent market. We need to wrap and send them to the user.\\n            uint256 finalBalance = conditionalTokens.balanceOf(address(this), tokenId);\\n\\n            if (finalBalance > initialBalance) {\\n                // wrap to erc20.\\n                (IERC20 parentWrapped1155, bytes memory parentData) = proposal.parentWrappedOutcome();\\n\\n                conditionalTokens.safeTransferFrom(\\n                    address(this), address(wrapped1155Factory), tokenId, finalBalance - initialBalance, parentData\\n                );\\n\\n                // transfer the ERC20 back to the user.\\n                require(\\n                    parentWrapped1155.transfer(msg.sender, finalBalance - initialBalance),\\n                    \\\"Parent wrapped token transfer failed\\\"\\n                );\\n            }\\n        }\\n    }\\n\\n    /// @notice Constructs a tokenId from a collateral token and an outcome collection.\\n    /// @param collateralToken The address of the ERC20 used as collateral.\\n    /// @param parentCollectionId The Conditional Tokens parent collection id.\\n    /// @param conditionId The id of the condition used to redeem.\\n    /// @param indexSet Index set of the outcome collection to combine with the parent outcome collection.\\n    /// @return The token id.\\n    function getTokenId(\\n        IERC20 collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint256 indexSet\\n    ) public view returns (uint256) {\\n        bytes32 collectionId = conditionalTokens.getCollectionId(parentCollectionId, conditionId, indexSet);\\n        return conditionalTokens.getPositionId(address(collateralToken), collectionId);\\n    }\\n\\n    /// @notice Helper function used to know the redeemable outcomes associated to a conditionId.\\n    /// @param conditionId The id of the condition.\\n    /// @return An array of outcomes where a true value indicates that the outcome is redeemable.\\n    function getWinningOutcomes(bytes32 conditionId) external view returns (bool[] memory) {\\n        bool[] memory result = new bool[](conditionalTokens.getOutcomeSlotCount(conditionId));\\n\\n        for (uint256 i = 0; i < result.length; i++) {\\n            result[i] = conditionalTokens.payoutNumerators(conditionId, i) == 0 ? false : true;\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x2c4eed84ed13043fb33ca98405c7ee31f9250b559bf812f4b9368f50447c5b56\",\"license\":\"MIT\"},\"src/Interfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IERC20 {\\n    function symbol() external view returns (string memory);\\n\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address owner) external returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n}\\n\\n// https://github.com/RealityETH/reality-eth-monorepo/blob/main/packages/contracts/flat/RealityETH-3.0.sol\\ninterface IRealityETH_v3_0 {\\n    function askQuestionWithMinBond(\\n        uint256 template_id,\\n        string memory question,\\n        address arbitrator,\\n        uint32 timeout,\\n        uint32 opening_ts,\\n        uint256 nonce,\\n        uint256 min_bond\\n    ) external payable returns (bytes32);\\n\\n    function resultForOnceSettled(bytes32 question_id) external view returns (bytes32);\\n\\n    function getContentHash(bytes32 question_id) external view returns (bytes32);\\n\\n    function getTimeout(bytes32 question_id) external view returns (uint32);\\n\\n    function submitAnswer(bytes32 question_id, bytes32 answer, uint256 max_previous) external payable;\\n}\\n\\ninterface IConditionalTokens {\\n    function payoutNumerators(bytes32 conditionId, uint256 index) external view returns (uint256);\\n\\n    function payoutDenominator(bytes32 conditionId) external view returns (uint256);\\n\\n    function prepareCondition(address oracle, bytes32 questionId, uint256 outcomeSlotCount) external;\\n\\n    function reportPayouts(bytes32 questionId, uint256[] calldata payouts) external;\\n\\n    function splitPosition(\\n        /*IERC20*/\\n        address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint256[] calldata partition,\\n        uint256 amount\\n    ) external;\\n\\n    function mergePositions(\\n        /*IERC20*/\\n        address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint256[] calldata partition,\\n        uint256 amount\\n    ) external;\\n\\n    function redeemPositions(\\n        /*IERC20*/\\n        address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint256[] calldata indexSets\\n    ) external;\\n\\n    function getConditionId(\\n        address oracle,\\n        bytes32 questionId,\\n        uint256 outcomeSlotCount\\n    ) external pure returns (bytes32);\\n\\n    function getCollectionId(\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint256 indexSet\\n    ) external view returns (bytes32);\\n\\n    function getPositionId(address collateralToken, bytes32 collectionId) external pure returns (uint256);\\n\\n    function getOutcomeSlotCount(bytes32 conditionId) external view returns (uint256);\\n\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    function balanceOf(address owner, uint256 id) external view returns (uint256);\\n}\\n\\ninterface IWrapped1155Factory {\\n    function requireWrapped1155(\\n        /*IERC1155*/\\n        address multiToken,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external /*Wrapped1155*/ returns (IERC20);\\n\\n    function unwrap(\\n        /*IERC1155*/\\n        address multiToken,\\n        uint256 tokenId,\\n        uint256 amount,\\n        address recipient,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8892a345d504bf2d565948b1ec7a5302cf45024e6a0ea3ac810d5eb0b2827d77\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162002c9938038062002c99833981016040819052620000349162000065565b6001600160a01b039182166080521660a052620000a4565b6001600160a01b03811681146200006257600080fd5b50565b600080604083850312156200007957600080fd5b825162000086816200004c565b602084015190925062000099816200004c565b809150509250929050565b60805160a051612b19620001806000396000818161012b015281816110600152818161130601528181611752015281816119ce01528181611ea001526122200152600081816101ef0152818161033001528181610407015281816104f50152818161057a01528181610f450152818161108d0152818161111b015281816111a1015281816112d70152818161177f0152818161180f015281816118a00152818161199f01528181611cb201528181611ecd01528181611f5001528181611fe101528181612071015281816120ff01526121f80152612b196000f3fe6080604052600436106100b25760003560e01c806353a066221161006f57806353a06622146101ca5780635bd9e299146101dd578063aab8ff6214610211578063bc197c8114610231578063d760746014610276578063ef56a8f314610296578063f23a6e61146102a957600080fd5b806301ffc9a7146100b757806302bd74c3146100ec578063150c5b97146101195780631a09424a1461015a57806321816254146101885780633f325a2b146101aa575b600080fd5b3480156100c357600080fd5b506100d76100d2366004612385565b6102d5565b60405190151581526020015b60405180910390f35b3480156100f857600080fd5b5061010c6101073660046123b6565b61030c565b6040516100e391906123cf565b34801561012557600080fd5b5061014d7f000000000000000000000000000000000000000000000000000000000000000081565b6040516100e39190612415565b34801561016657600080fd5b5061017a610175366004612441565b6104c4565b6040519081526020016100e3565b34801561019457600080fd5b506101a86101a336600461248a565b6105fc565b005b3480156101b657600080fd5b506101a86101c53660046124cb565b6107bf565b6101a86101d8366004612500565b6107dc565b3480156101e957600080fd5b5061014d7f000000000000000000000000000000000000000000000000000000000000000081565b34801561021d57600080fd5b506101a861022c36600461248a565b6107f8565b34801561023d57600080fd5b5061025d61024c36600461266e565b63bc197c8160e01b95945050505050565b6040516001600160e01b031990911681526020016100e3565b34801561028257600080fd5b506101a861029136600461248a565b6109d6565b6101a86102a4366004612500565b610cb3565b3480156102b557600080fd5b5061025d6102c436600461271b565b63f23a6e6160e01b95945050505050565b60006001600160e01b03198216630271189760e51b148061030657506301ffc9a760e01b6001600160e01b03198316145b92915050565b604051636a16e06160e11b8152600481018290526060906000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d42dc0c290602401602060405180830381865afa158015610377573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039b9190612783565b6001600160401b038111156103b2576103b261252c565b6040519080825280602002602001820160405280156103db578160200160208202803683370190505b50905060005b81518110156104bd57604051630141320560e21b815260048101859052602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690630504c81490604401602060405180830381865afa158015610456573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047a9190612783565b15610486576001610489565b60005b82828151811061049b5761049b61279c565b91151560209283029190910190910152806104b5816127c8565b9150506103e1565b5092915050565b60405163856296f760e01b815260048101849052602481018390526044810182905260009081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063856296f790606401602060405180830381865afa15801561053c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105609190612783565b60405163039dd75360e41b81529091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906339dd7530906105b190899085906004016127e1565b602060405180830381865afa1580156105ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f29190612783565b9695505050505050565b60008261066a57836001600160a01b031663c4a091d26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610641573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066591906127fa565b6106cc565b836001600160a01b0316634d7b09006040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106cc91906127fa565b90506000801b846001600160a01b03166344bea37e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610710573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107349190612783565b036107ae576040516323b872dd60e01b81526001600160a01b038216906323b872dd9061076990339030908790600401612817565b6020604051808303816000875af1158015610788573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ac919061283b565b505b6107b9848484610ccb565b50505050565b6107cb836001846109d6565b6107d7836000836109d6565b505050565b6107e8826001836105fc565b6107f4826000836105fc565b5050565b60008261086657836001600160a01b031663c4a091d26040518163ffffffff1660e01b8152600401602060405180830381865afa15801561083d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061086191906127fa565b6108c8565b836001600160a01b0316634d7b09006040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108a4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c891906127fa565b90506108d5848484611413565b6000801b846001600160a01b03166344bea37e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610917573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061093b9190612783565b036107b95760405163a9059cbb60e01b81526001600160a01b0382169063a9059cbb9061096e90339086906004016127e1565b6020604051808303816000875af115801561098d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109b1919061283b565b6107b95760405162461bcd60e51b81526004016109cd90612858565b60405180910390fd5b600082610a4457836001600160a01b031663c4a091d26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a1b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3f91906127fa565b610aa6565b836001600160a01b0316634d7b09006040518163ffffffff1660e01b8152600401602060405180830381865afa158015610a82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa691906127fa565b90506000846001600160a01b03166344bea37e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ae8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b0c9190612783565b9050600081610b87576040516370a0823160e01b81526001600160a01b038416906370a0823190610b41903090600401612415565b6020604051808303816000875af1158015610b60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b849190612783565b90505b610b92868686611ac7565b81610cab576040516370a0823160e01b81526000906001600160a01b038516906370a0823190610bc6903090600401612415565b6020604051808303816000875af1158015610be5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c099190612783565b905081811115610ca9576001600160a01b03841663a9059cbb33610c2d858561288f565b6040518363ffffffff1660e01b8152600401610c4a9291906127e1565b6020604051808303816000875af1158015610c69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8d919061283b565b610ca95760405162461bcd60e51b81526004016109cd90612858565b505b505050505050565b610cbf826001836107f8565b6107f4826000836107f8565b600082610d3957836001600160a01b031663c4a091d26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d10573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d3491906127fa565b610d9b565b836001600160a01b0316634d7b09006040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d9b91906127fa565b90506000846001600160a01b03166344bea37e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ddd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e019190612783565b90506000856001600160a01b0316632ddc7de76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e679190612783565b6040805160028082526060820183529293506000929091602083019080368337019050509050600181600081518110610ea257610ea261279c565b602002602001018181525050600281600181518110610ec357610ec361279c565b602090810291909101015282156110f757600080886001600160a01b0316636fc4eddd6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610f15573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610f3d91908101906128c6565b9150915060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166339dd753088886040518363ffffffff1660e01b8152600401610f919291906127e1565b602060405180830381865afa158015610fae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd29190612783565b6040516323b872dd60e01b81529091506001600160a01b038416906323b872dd9061100590339030908d90600401612817565b6020604051808303816000875af1158015611024573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611048919061283b565b506040516314abb2c960e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906352aecb24906110bd907f00000000000000000000000000000000000000000000000000000000000000009085908d903090899060040161297e565b600060405180830381600087803b1580156110d757600080fd5b505af11580156110eb573d6000803e3d6000fd5b5050505050505061118a565b60405163095ea7b360e01b81526001600160a01b0385169063095ea7b390611145907f00000000000000000000000000000000000000000000000000000000000000009089906004016127e1565b6020604051808303816000875af1158015611164573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611188919061283b565b505b6040516372ce427560e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906372ce4275906111de9087908790879087908c906004016129f3565b600060405180830381600087803b1580156111f857600080fd5b505af115801561120c573d6000803e3d6000fd5b5050505060005b600281101561140957600061122d8686866001861b6104c4565b90506000808a6001600160a01b03166318a988a88b61125657611251866002612a32565b611258565b855b6040518263ffffffff1660e01b815260040161127691815260200190565b600060405180830381865afa158015611293573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526112bb91908101906128c6565b604051637921219560e11b815291935091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063f242432a906113349030907f00000000000000000000000000000000000000000000000000000000000000009088908f908890600401612a45565b600060405180830381600087803b15801561134e57600080fd5b505af1158015611362573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b038516925063a9059cbb91506113949033908d906004016127e1565b6020604051808303816000875af11580156113b3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113d7919061283b565b6113f35760405162461bcd60e51b81526004016109cd90612a7f565b5050508080611401906127c8565b915050611213565b5050505050505050565b60008261148157836001600160a01b031663c4a091d26040518163ffffffff1660e01b8152600401602060405180830381865afa158015611458573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061147c91906127fa565b6114e3565b836001600160a01b0316634d7b09006040518163ffffffff1660e01b8152600401602060405180830381865afa1580156114bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e391906127fa565b90506000846001600160a01b03166344bea37e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611525573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115499190612783565b90506000856001600160a01b0316632ddc7de76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561158b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115af9190612783565b60408051600280825260608201835292935060009290916020830190803683370190505090506001816000815181106115ea576115ea61279c565b60200260200101818152505060028160018151811061160b5761160b61279c565b60200260200101818152505060005b60028110156117f75760006116348686866001861b6104c4565b90506000808a6001600160a01b03166318a988a88b61165d57611658866002612a32565b61165f565b855b6040518263ffffffff1660e01b815260040161167d91815260200190565b600060405180830381865afa15801561169a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116c291908101906128c6565b6040516323b872dd60e01b815291935091506001600160a01b038316906323b872dd906116f790339030908e90600401612817565b6020604051808303816000875af1158015611716573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061173a919061283b565b506040516314abb2c960e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906352aecb24906117af907f00000000000000000000000000000000000000000000000000000000000000009087908e903090889060040161297e565b600060405180830381600087803b1580156117c957600080fd5b505af11580156117dd573d6000803e3d6000fd5b5050505050505080806117ef906127c8565b91505061161a565b50604051639e7212ad60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639e7212ad9061184c9087908790879087908c906004016129f3565b600060405180830381600087803b15801561186657600080fd5b505af115801561187a573d6000803e3d6000fd5b505084159150610ca990505760405163039dd75360e41b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906339dd7530906118d790889088906004016127e1565b602060405180830381865afa1580156118f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119189190612783565b9050600080896001600160a01b0316636fc4eddd6040518163ffffffff1660e01b8152600401600060405180830381865afa15801561195b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261198391908101906128c6565b604051637921219560e11b815291935091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063f242432a906119fc9030907f00000000000000000000000000000000000000000000000000000000000000009088908e908890600401612a45565b600060405180830381600087803b158015611a1657600080fd5b505af1158015611a2a573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b038516925063a9059cbb9150611a5c9033908c906004016127e1565b6020604051808303816000875af1158015611a7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a9f919061283b565b611abb5760405162461bcd60e51b81526004016109cd90612a7f565b50505050505050505050565b600082611b3557836001600160a01b031663c4a091d26040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b0c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b3091906127fa565b611b97565b836001600160a01b0316634d7b09006040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b73573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b9791906127fa565b90506000846001600160a01b03166344bea37e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611bd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bfd9190612783565b90506000856001600160a01b0316632ddc7de76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611c3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c639190612783565b60408051600180825281830190925291925060009182916020808301908036833701905050604051630141320560e21b8152600481018590526000602482018190529192506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690630504c81490604401602060405180830381865afa158015611cf9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d1d9190612783565b6001149050600081611d30576001611d33565b60005b60ff169050806001901b83600081518110611d5057611d5061279c565b602002602001018181525050611d8287878786600081518110611d7557611d7561279c565b60200260200101516104c4565b93506000808b6001600160a01b03166318a988a88c611dab57611da6856002612a32565b611dad565b845b6040518263ffffffff1660e01b8152600401611dcb91815260200190565b600060405180830381865afa158015611de8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611e1091908101906128c6565b6040516323b872dd60e01b815291935091506001600160a01b038316906323b872dd90611e4590339030908f90600401612817565b6020604051808303816000875af1158015611e64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e88919061283b565b506040516314abb2c960e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906352aecb2490611efd907f0000000000000000000000000000000000000000000000000000000000000000908a908f903090889060040161297e565b600060405180830381600087803b158015611f1757600080fd5b505af1158015611f2b573d6000803e3d6000fd5b5060009250508915905061205b5760405163039dd75360e41b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906339dd753090611f87908d908d906004016127e1565b602060405180830381865afa158015611fa4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fc89190612783565b604051627eeac760e11b81529097506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169062fdd58e906120179030908b906004016127e1565b602060405180830381865afa158015612034573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120589190612783565b90505b604051626dc0df60e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906301b7037c906120ac908d908d908d908c90600401612ab6565b600060405180830381600087803b1580156120c657600080fd5b505af11580156120da573d6000803e3d6000fd5b50508a159150612376905057604051627eeac760e11b81526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169062fdd58e906121359030908c906004016127e1565b602060405180830381865afa158015612152573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121769190612783565b905081811115612374576000808f6001600160a01b0316636fc4eddd6040518163ffffffff1660e01b8152600401600060405180830381865afa1580156121c1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526121e991908101906128c6565b90925090506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663f242432a307f00000000000000000000000000000000000000000000000000000000000000008d61224a898961288f565b866040518663ffffffff1660e01b815260040161226b959493929190612a45565b600060405180830381600087803b15801561228557600080fd5b505af1158015612299573d6000803e3d6000fd5b50505050816001600160a01b031663a9059cbb3386866122b9919061288f565b6040518363ffffffff1660e01b81526004016122d69291906127e1565b6020604051808303816000875af11580156122f5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612319919061283b565b6123715760405162461bcd60e51b8152602060048201526024808201527f506172656e74207772617070656420746f6b656e207472616e736665722066616044820152631a5b195960e21b60648201526084016109cd565b50505b505b50505050505050505050505050565b60006020828403121561239757600080fd5b81356001600160e01b0319811681146123af57600080fd5b9392505050565b6000602082840312156123c857600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b818110156124095783511515835292840192918401916001016123eb565b50909695505050505050565b6001600160a01b0391909116815260200190565b6001600160a01b038116811461243e57600080fd5b50565b6000806000806080858703121561245757600080fd5b843561246281612429565b966020860135965060408601359560600135945092505050565b801515811461243e57600080fd5b60008060006060848603121561249f57600080fd5b83356124aa81612429565b925060208401356124ba8161247c565b929592945050506040919091013590565b6000806000606084860312156124e057600080fd5b83356124eb81612429565b95602085013595506040909401359392505050565b6000806040838503121561251357600080fd5b823561251e81612429565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561256a5761256a61252c565b604052919050565b600082601f83011261258357600080fd5b813560206001600160401b0382111561259e5761259e61252c565b8160051b6125ad828201612542565b92835284810182019282810190878511156125c757600080fd5b83870192505b848310156125e6578235825291830191908301906125cd565b979650505050505050565b60006001600160401b0382111561260a5761260a61252c565b50601f01601f191660200190565b600082601f83011261262957600080fd5b813561263c612637826125f1565b612542565b81815284602083860101111561265157600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a0868803121561268657600080fd5b853561269181612429565b945060208601356126a181612429565b935060408601356001600160401b03808211156126bd57600080fd5b6126c989838a01612572565b945060608801359150808211156126df57600080fd5b6126eb89838a01612572565b9350608088013591508082111561270157600080fd5b5061270e88828901612618565b9150509295509295909350565b600080600080600060a0868803121561273357600080fd5b853561273e81612429565b9450602086013561274e81612429565b9350604086013592506060860135915060808601356001600160401b0381111561277757600080fd5b61270e88828901612618565b60006020828403121561279557600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600182016127da576127da6127b2565b5060010190565b6001600160a01b03929092168252602082015260400190565b60006020828403121561280c57600080fd5b81516123af81612429565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60006020828403121561284d57600080fd5b81516123af8161247c565b6020808252601a908201527f436f6c6c61746572616c207472616e73666572206661696c6564000000000000604082015260600190565b81810381811115610306576103066127b2565b60005b838110156128bd5781810151838201526020016128a5565b50506000910152565b600080604083850312156128d957600080fd5b82516128e481612429565b60208401519092506001600160401b0381111561290057600080fd5b8301601f8101851361291157600080fd5b805161291f612637826125f1565b81815286602083850101111561293457600080fd5b6129458260208301602086016128a2565b8093505050509250929050565b6000815180845261296a8160208601602086016128a2565b601f01601f19169290920160200192915050565b6001600160a01b03868116825260208201869052604082018590528316606082015260a0608082018190526000906125e690830184612952565b600081518084526020808501945080840160005b838110156129e8578151875295820195908201906001016129cc565b509495945050505050565b60018060a01b038616815284602082015283604082015260a060608201526000612a2060a08301856129b8565b90508260808301529695505050505050565b80820180821115610306576103066127b2565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906125e690830184612952565b6020808252601d908201527f5772617070656420746f6b656e207472616e73666572206661696c6564000000604082015260600190565b60018060a01b03851681528360208201528260408201526080606082015260006105f260808301846129b856fea264697066735822122024d7798d3574d98dcc8b33cc69b44fe348a9b87caaa6e7a5df62b716108932d064736f6c63430008140033",
  "deployedBytecode": "",
  "devdoc": {
    "details": "Router implementation that allows to use two collateral tokens.",
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Constructor.",
        "params": {
          "_conditionalTokens": "Conditional Tokens contract.",
          "_wrapped1155Factory": "Wrapped1155Factory contract."
        }
      },
      "getTokenId(address,bytes32,bytes32,uint256)": {
        "params": {
          "collateralToken": "The address of the ERC20 used as collateral.",
          "conditionId": "The id of the condition used to redeem.",
          "indexSet": "Index set of the outcome collection to combine with the parent outcome collection.",
          "parentCollectionId": "The Conditional Tokens parent collection id."
        },
        "returns": {
          "_0": "The token id."
        }
      },
      "getWinningOutcomes(bytes32)": {
        "params": {
          "conditionId": "The id of the condition."
        },
        "returns": {
          "_0": "An array of outcomes where a true value indicates that the outcome is redeemable."
        }
      },
      "mergePositions(address,bool,uint256)": {
        "details": "The ERC20 associated to each outcome must be previously created on the wrapped1155Factory.Collateral tokens are withdrawn only if we are not merging a deep position (parentCollectionId is bytes32(0)).",
        "params": {
          "amount": "The amount of outcome tokens to merge.",
          "proposal": "The Proposal to merge.",
          "useFirstCollateral": "Wether to merge the first or second collateral."
        }
      },
      "mergeProposal(address,uint256)": {
        "details": "The ERC20 associated to each outcome must be previously created on the wrapped1155Factory.",
        "params": {
          "amount": "The amount to merge.",
          "proposal": "The futarchy proposal to merge."
        }
      },
      "redeemPositions(address,bool,uint256)": {
        "details": "The ERC20 associated to each outcome must be previously created on the wrapped1155Factory.Collateral tokens are withdrawn only if we are not redeeming a deep position (parentCollectionId is bytes32(0)).",
        "params": {
          "amount": "Amount to redeem.",
          "proposal": "The Proposal to redeem.",
          "useFirstCollateral": "Wether to redeem the first or second collateral."
        }
      },
      "redeemProposal(address,uint256,uint256)": {
        "details": "The ERC20 associated to each outcome must be previously created on the wrapped1155Factory.Collateral tokens are withdrawn only if we are not redeeming a deep position (parentCollectionId is bytes32(0)).",
        "params": {
          "amount1": "Amount to redeem for the first collateral.",
          "amount2": "Amount to redeem for the second collateral.",
          "proposal": "The Proposal to redeem."
        }
      },
      "splitPosition(address,bool,uint256)": {
        "details": "The ERC20 associated to each outcome must be previously created on the wrapped1155Factory.Collateral tokens are deposited only if we are not splitting a deep position (parentCollectionId is bytes32(0)).",
        "params": {
          "amount": "The amount of collateral to split.",
          "proposal": "The Proposal to split.",
          "useFirstCollateral": "Wether to split the first or second collateral."
        }
      },
      "splitProposal(address,uint256)": {
        "details": "The ERC20 associated to each outcome must be previously created on the wrapped1155Factory.",
        "params": {
          "amount": "The amount to split.",
          "proposal": "The futarchy proposal to split."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "stateVariables": {
      "conditionalTokens": {
        "details": "Conditional Tokens contract."
      },
      "wrapped1155Factory": {
        "details": "Wrapped1155Factory contract."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getTokenId(address,bytes32,bytes32,uint256)": {
        "notice": "Constructs a tokenId from a collateral token and an outcome collection."
      },
      "getWinningOutcomes(bytes32)": {
        "notice": "Helper function used to know the redeemable outcomes associated to a conditionId."
      },
      "mergePositions(address,bool,uint256)": {
        "notice": "Merges positions and sends the collateral tokens to the user."
      },
      "mergeProposal(address,uint256)": {
        "notice": "Merges a position using two collateral tokens and sends the ERC20 outcome tokens back to the user."
      },
      "redeemPositions(address,bool,uint256)": {
        "notice": "Redeems positions and sends the collateral tokens to the user."
      },
      "redeemProposal(address,uint256,uint256)": {
        "notice": "Redeems positions and sends the collateral tokens to the user."
      },
      "splitPosition(address,bool,uint256)": {
        "notice": "Transfers the collateral to the Router, splits the position and sends the ERC20 outcome tokens back to the user."
      },
      "splitProposal(address,uint256)": {
        "notice": "Splits a position using two collateral tokens and sends the ERC20 outcome tokens back to the user."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}