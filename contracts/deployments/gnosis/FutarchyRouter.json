{
  "address": "0x2a59619B33895108c4Fd08922E8E5B135b16c241",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IConditionalTokens",
          "name": "_conditionalTokens",
          "type": "address"
        },
        {
          "internalType": "contract IWrapped1155Factory",
          "name": "_wrapped1155Factory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "conditionalTokens",
      "outputs": [
        {
          "internalType": "contract IConditionalTokens",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "parentCollectionId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "conditionId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "indexSet",
          "type": "uint256"
        }
      ],
      "name": "getTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract FutarchyProposal",
          "name": "proposal",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "useFirstCollateral",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mergePositions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract FutarchyProposal",
          "name": "proposal",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mergeProposal",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract FutarchyProposal",
          "name": "proposal",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "useFirstCollateral",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "redeemPositions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract FutarchyProposal",
          "name": "proposal",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount2",
          "type": "uint256"
        }
      ],
      "name": "redeemProposal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract FutarchyProposal",
          "name": "proposal",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "useFirstCollateral",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "splitPosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract FutarchyProposal",
          "name": "proposal",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "splitProposal",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrapped1155Factory",
      "outputs": [
        {
          "internalType": "contract IWrapped1155Factory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x4d115c0fbe62d81355103ce33ce1e4163df47decc580001730c36c6f6b225b10",
  "receipt": {
    "to": null,
    "from": "0x4EDCA105188a0783Ab3A6f09c50567D1E3F8591D",
    "contractAddress": "0x2a59619B33895108c4Fd08922E8E5B135b16c241",
    "transactionIndex": 1,
    "gasUsed": "2305902",
    "logsBloom": "0x
    "blockHash": "0xbce4a4f404f97da1a2cbcfc9e53ce380e92dd8837ac5388508bf95e6702871cb",
    "transactionHash": "0x4d115c0fbe62d81355103ce33ce1e4163df47decc580001730c36c6f6b225b10",
    "logs": [],
    "blockNumber": 37314395,
    "cumulativeGasUsed": "2326902",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xCeAfDD6bc0bEF976fdCd1112955828E00543c0Ce",
    "0xD194319D1804C1051DD21Ba1Dc931cA72410B79f"
  ],
  "numDeployments": 1,
  "solcInputHash": "f28ffb335cdcbc776bd561ed26faae0a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IConditionalTokens\",\"name\":\"_conditionalTokens\",\"type\":\"address\"},{\"internalType\":\"contract IWrapped1155Factory\",\"name\":\"_wrapped1155Factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"conditionalTokens\",\"outputs\":[{\"internalType\":\"contract IConditionalTokens\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"parentCollectionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"indexSet\",\"type\":\"uint256\"}],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract FutarchyProposal\",\"name\":\"proposal\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"useFirstCollateral\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mergePositions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract FutarchyProposal\",\"name\":\"proposal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mergeProposal\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract FutarchyProposal\",\"name\":\"proposal\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"useFirstCollateral\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"redeemPositions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract FutarchyProposal\",\"name\":\"proposal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount2\",\"type\":\"uint256\"}],\"name\":\"redeemProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract FutarchyProposal\",\"name\":\"proposal\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"useFirstCollateral\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"splitPosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract FutarchyProposal\",\"name\":\"proposal\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"splitProposal\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrapped1155Factory\",\"outputs\":[{\"internalType\":\"contract IWrapped1155Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Router implementation that allows to use two collateral tokens.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Constructor.\",\"params\":{\"_conditionalTokens\":\"Conditional Tokens contract.\",\"_wrapped1155Factory\":\"Wrapped1155Factory contract.\"}},\"getTokenId(address,bytes32,bytes32,uint256)\":{\"params\":{\"collateralToken\":\"The address of the ERC20 used as collateral.\",\"conditionId\":\"The id of the condition used to redeem.\",\"indexSet\":\"Index set of the outcome collection to combine with the parent outcome collection.\",\"parentCollectionId\":\"The Conditional Tokens parent collection id.\"},\"returns\":{\"_0\":\"The token id.\"}},\"mergePositions(address,bool,uint256)\":{\"details\":\"The ERC20 associated to each outcome must be previously created on the wrapped1155Factory.Collateral tokens are withdrawn only if we are not merging a deep position (parentCollectionId is bytes32(0)).\",\"params\":{\"amount\":\"The amount of outcome tokens to merge.\",\"proposal\":\"The Proposal to merge.\",\"useFirstCollateral\":\"Wether to merge the first or second collateral.\"}},\"mergeProposal(address,uint256)\":{\"details\":\"The ERC20 associated to each outcome must be previously created on the wrapped1155Factory.\",\"params\":{\"amount\":\"The amount to merge.\",\"proposal\":\"The futarchy proposal to merge.\"}},\"redeemPositions(address,bool,uint256)\":{\"details\":\"The ERC20 associated to each outcome must be previously created on the wrapped1155Factory.Collateral tokens are withdrawn only if we are not redeeming a deep position (parentCollectionId is bytes32(0)).\",\"params\":{\"amount\":\"Amount to redeem.\",\"proposal\":\"The Proposal to redeem.\",\"useFirstCollateral\":\"Wether to redeem the first or second collateral.\"}},\"redeemProposal(address,uint256,uint256)\":{\"details\":\"The ERC20 associated to each outcome must be previously created on the wrapped1155Factory.Collateral tokens are withdrawn only if we are not redeeming a deep position (parentCollectionId is bytes32(0)).\",\"params\":{\"amount1\":\"Amount to redeem for the first collateral.\",\"amount2\":\"Amount to redeem for the second collateral.\",\"proposal\":\"The Proposal to redeem.\"}},\"splitPosition(address,bool,uint256)\":{\"details\":\"The ERC20 associated to each outcome must be previously created on the wrapped1155Factory.Collateral tokens are deposited only if we are not splitting a deep position (parentCollectionId is bytes32(0)).\",\"params\":{\"amount\":\"The amount of collateral to split.\",\"proposal\":\"The Proposal to split.\",\"useFirstCollateral\":\"Wether to split the first or second collateral.\"}},\"splitProposal(address,uint256)\":{\"details\":\"The ERC20 associated to each outcome must be previously created on the wrapped1155Factory.\",\"params\":{\"amount\":\"The amount to split.\",\"proposal\":\"The futarchy proposal to split.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"stateVariables\":{\"conditionalTokens\":{\"details\":\"Conditional Tokens contract.\"},\"wrapped1155Factory\":{\"details\":\"Wrapped1155Factory contract.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getTokenId(address,bytes32,bytes32,uint256)\":{\"notice\":\"Constructs a tokenId from a collateral token and an outcome collection.\"},\"mergePositions(address,bool,uint256)\":{\"notice\":\"Merges positions and sends the collateral tokens to the user.\"},\"mergeProposal(address,uint256)\":{\"notice\":\"Merges a position using two collateral tokens and sends the ERC20 outcome tokens back to the user.\"},\"redeemPositions(address,bool,uint256)\":{\"notice\":\"Redeems positions and sends the collateral tokens to the user.\"},\"redeemProposal(address,uint256,uint256)\":{\"notice\":\"Redeems positions and sends the collateral tokens to the user.\"},\"splitPosition(address,bool,uint256)\":{\"notice\":\"Transfers the collateral to the Router, splits the position and sends the ERC20 outcome tokens back to the user.\"},\"splitProposal(address,uint256)\":{\"notice\":\"Splits a position using two collateral tokens and sends the ERC20 outcome tokens back to the user.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/FutarchyRouter.sol\":\"FutarchyRouter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface that must be implemented by smart contracts in order to receive\\n * ERC-1155 token transfers.\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb69597a63b202e28401128bed6a6d259e8730191274471af7303eafb247881a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165, ERC165} from \\\"../../../utils/introspection/ERC165.sol\\\";\\nimport {IERC1155Receiver} from \\\"../IERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev Simple implementation of `IERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n */\\nabstract contract ERC1155Holder is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0xc26cd2e2bcf59b87c986fc653545b35010db9c585a3f3312fe61d7b1b3805735\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"src/FutarchyProposal.sol\":{\"content\":\"/**\\n *  @authors: [@xyzseer]\\n *  @reviewers: []\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"./FutarchyRealityProxy.sol\\\";\\nimport {IERC20} from \\\"./Interfaces.sol\\\";\\n\\ncontract FutarchyProposal {\\n    /// @dev Flag to initialize the proposal only once.\\n    bool public initialized;\\n\\n    /// @dev Contains the information associated to the proposal.\\n    /// @param conditionId Conditional Tokens conditionId.\\n    /// @param collateralToken1 First collateral token.\\n    /// @param collateralToken2 Second collateral token.\\n    /// @param parentCollectionId Conditional Tokens parentCollectionId.\\n    /// @param parentOutcome Conditional outcome to use (optional).\\n    /// @param parentProposal Conditional proposal to use (optional).\\n    /// @param questionId Conditional Tokens questionId.\\n    /// @param encodedQuestion Encoded question, needed to create and reopen a question.\\n    /// @param wrapped1155 Outcome tokens Wrapped1155 address.\\n    /// @param data Wrapped1155 token data.\\n    struct FutarchyProposalParams {\\n        bytes32 conditionId;\\n        IERC20 collateralToken1;\\n        IERC20 collateralToken2;\\n        bytes32 parentCollectionId;\\n        uint256 parentOutcome;\\n        address parentProposal;\\n        bytes32 questionId;\\n        string encodedQuestion;\\n        IERC20[] wrapped1155;\\n        bytes[] data;\\n    }\\n\\n    /// @dev The name of the proposal.\\n    string public proposalName;\\n    /// @dev The proposal outcomes.\\n    string[] public outcomes;\\n    /// @dev Proposal parameters.\\n    FutarchyProposalParams public futarchyProposalParams;\\n    /// @dev Oracle contract.\\n    FutarchyRealityProxy public realityProxy;\\n\\n    /// @dev Initializer.\\n    /// @param _proposalName The name of the proposal.\\n    /// @param _outcomes The proposal outcomes.\\n    /// @param _futarchyProposalParams Futarchy Proposal params.\\n    /// @param _realityProxy Oracle contract.\\n    function initialize(\\n        string memory _proposalName,\\n        string[] memory _outcomes,\\n        FutarchyProposalParams memory _futarchyProposalParams,\\n        FutarchyRealityProxy _realityProxy\\n    ) external {\\n        require(!initialized, \\\"Already initialized.\\\");\\n\\n        proposalName = _proposalName;\\n        outcomes = _outcomes;\\n        futarchyProposalParams = _futarchyProposalParams;\\n        realityProxy = _realityProxy;\\n\\n        initialized = true;\\n    }\\n\\n    /// @dev Encoded question parameters, needed to create and reopen a question.\\n    /// @return The encoded question.\\n    function encodedQuestion() external view returns (string memory) {\\n        return futarchyProposalParams.encodedQuestion;\\n    }\\n\\n    /// @dev Conditional Tokens questionId.\\n    /// @return the question ID.\\n    function questionId() external view returns (bytes32) {\\n        return futarchyProposalParams.questionId;\\n    }\\n\\n    /// @dev Conditional Tokens conditionId.\\n    /// @return The condition ID.\\n    function conditionId() external view returns (bytes32) {\\n        return futarchyProposalParams.conditionId;\\n    }\\n\\n    /// @dev First collateral token.\\n    /// @return The collateral token.\\n    function collateralToken1() external view returns (IERC20) {\\n        return futarchyProposalParams.collateralToken1;\\n    }\\n\\n    /// @dev Second collateral token.\\n    /// @return The collateral token.\\n    function collateralToken2() external view returns (IERC20) {\\n        return futarchyProposalParams.collateralToken2;\\n    }\\n\\n    /// @dev Conditional Tokens parentCollectionId.\\n    /// @return The parent collection ID.\\n    function parentCollectionId() external view returns (bytes32) {\\n        return futarchyProposalParams.parentCollectionId;\\n    }\\n\\n    /// @dev The parent proposal (optional). This proposal redeems to an outcome token of the parent proposal.\\n    /// @return The parent proposal address.\\n    function parentProposal() external view returns (address) {\\n        return futarchyProposalParams.parentProposal;\\n    }\\n\\n    /// @dev The parent outcome (optional). The parent proposal's outcome token this proposal redeems for.\\n    /// @return The parent outcome index.\\n    function parentOutcome() external view returns (uint256) {\\n        return futarchyProposalParams.parentOutcome;\\n    }\\n\\n    /// @dev Returns the wrapped1155 and the data corresponding to an outcome token.\\n    /// @param index The outcome index.\\n    /// @return wrapped1155 The wrapped token.\\n    /// @return data The token data.\\n    function wrappedOutcome(uint256 index) external view returns (IERC20 wrapped1155, bytes memory data) {\\n        return (futarchyProposalParams.wrapped1155[index], futarchyProposalParams.data[index]);\\n    }\\n\\n    /// @dev Returns the wrapped1155 and the data corresponding to the parent proposal.\\n    /// @return wrapped1155 The wrapped token.\\n    /// @return data The token data.\\n    function parentWrappedOutcome() external view returns (IERC20 wrapped1155, bytes memory data) {\\n        if (futarchyProposalParams.parentProposal != address(0)) {\\n            (wrapped1155, data) = FutarchyProposal(futarchyProposalParams.parentProposal).wrappedOutcome(\\n                futarchyProposalParams.parentOutcome\\n            );\\n        }\\n    }\\n\\n    /// @dev Returns the number of outcomes.\\n    /// @return numOutcomes The number of outcomes.\\n    function numOutcomes() external view returns (uint256) {\\n        return outcomes.length;\\n    }\\n\\n    /// @dev Helper function to resolve the proposal.\\n    function resolve() external {\\n        realityProxy.resolve(this);\\n    }\\n}\\n\",\"keccak256\":\"0xb2e6c1df0876a47fbf1ab10b47bce1266c634f4048e5b4dc9d1f2fb3ebb1135b\",\"license\":\"MIT\"},\"src/FutarchyRealityProxy.sol\":{\"content\":\"/**\\n *  @authors: [@xyzseer]\\n *  @reviewers: []\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"./FutarchyProposal.sol\\\";\\nimport {IConditionalTokens, IRealityETH_v3_0} from \\\"./Interfaces.sol\\\";\\n\\ncontract FutarchyRealityProxy {\\n    /// @dev Conditional Tokens contract.\\n    IConditionalTokens public immutable conditionalTokens;\\n    /// @dev Reality.eth contract.\\n    IRealityETH_v3_0 public immutable realitio;\\n\\n    /// @dev INVALID_RESULT reserved value.\\n    bytes32 internal constant INVALID_RESULT = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    /// @dev Constructor.\\n    /// @param _conditionalTokens Conditional Tokens contract address.\\n    /// @param _realitio Reality.eth contract address.\\n    constructor(IConditionalTokens _conditionalTokens, IRealityETH_v3_0 _realitio) {\\n        conditionalTokens = _conditionalTokens;\\n        realitio = _realitio;\\n    }\\n\\n    /// @dev Resolves the specified proposal.\\n    /// @param proposal Proposal to resolve. UNTRUSTED.\\n    function resolve(FutarchyProposal proposal) external {\\n        bytes32 questionId = proposal.questionId();\\n\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionId));\\n        uint256[] memory payouts = new uint256[](2);\\n\\n        // FutarchyFactory prepares the condition with two outcomes (YES / NO)\\n        if (answer == 0) {\\n            // accept proposal\\n            payouts[0] = 1;\\n        } else {\\n            // reject proposal\\n            payouts[1] = 1;\\n        }\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n}\\n\",\"keccak256\":\"0x64196f220b2b298f67da5947bf7f6350f05ccd3292c4f1999fb6b137a1b41a09\",\"license\":\"MIT\"},\"src/FutarchyRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"./FutarchyProposal.sol\\\";\\nimport {IConditionalTokens, IERC20, IWrapped1155Factory} from \\\"./Interfaces.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\n\\n/// @dev Router implementation that allows to use two collateral tokens.\\ncontract FutarchyRouter is ERC1155Holder {\\n    /// @dev Conditional Tokens contract.\\n    IConditionalTokens public immutable conditionalTokens;\\n    /// @dev Wrapped1155Factory contract.\\n    IWrapped1155Factory public immutable wrapped1155Factory;\\n\\n    /// @dev Constructor.\\n    /// @param _conditionalTokens Conditional Tokens contract.\\n    /// @param _wrapped1155Factory Wrapped1155Factory contract.\\n    constructor(IConditionalTokens _conditionalTokens, IWrapped1155Factory _wrapped1155Factory) {\\n        conditionalTokens = _conditionalTokens;\\n        wrapped1155Factory = _wrapped1155Factory;\\n    }\\n\\n    /// @notice Splits a position using two collateral tokens and sends the ERC20 outcome tokens back to the user.\\n    /// @dev The ERC20 associated to each outcome must be previously created on the wrapped1155Factory.\\n    /// @param proposal The futarchy proposal to split.\\n    /// @param amount The amount to split.\\n    function splitProposal(FutarchyProposal proposal, uint256 amount) external payable {\\n        splitPosition(proposal, true, amount);\\n        splitPosition(proposal, false, amount);\\n    }\\n\\n    /// @notice Transfers the collateral to the Router, splits the position and sends the ERC20 outcome tokens back to the user.\\n    /// @dev The ERC20 associated to each outcome must be previously created on the wrapped1155Factory.\\n    /// @dev Collateral tokens are deposited only if we are not splitting a deep position (parentCollectionId is bytes32(0)).\\n    /// @param proposal The Proposal to split.\\n    /// @param useFirstCollateral Wether to split the first or second collateral.\\n    /// @param amount The amount of collateral to split.\\n    function splitPosition(FutarchyProposal proposal, bool useFirstCollateral, uint256 amount) public {\\n        IERC20 collateralToken = useFirstCollateral ? proposal.collateralToken1() : proposal.collateralToken2();\\n        if (proposal.parentCollectionId() == bytes32(0)) {\\n            // transfer the collateral tokens to the Router.\\n            collateralToken.transferFrom(msg.sender, address(this), amount);\\n        }\\n        _splitPosition(proposal, useFirstCollateral, amount);\\n    }\\n\\n    /// @notice Splits a position and sends the ERC20 outcome tokens to the user.\\n    /// @dev The ERC20 associated to each outcome must be previously created on the wrapped1155Factory.\\n    /// @param proposal The Proposal to split.\\n    /// @param useFirstCollateral Wether to split the first or second collateral.\\n    /// @param amount The amount of collateral to split.\\n    function _splitPosition(FutarchyProposal proposal, bool useFirstCollateral, uint256 amount) internal {\\n        IERC20 collateralToken = useFirstCollateral ? proposal.collateralToken1() : proposal.collateralToken2();\\n        bytes32 parentCollectionId = proposal.parentCollectionId();\\n        bytes32 conditionId = proposal.conditionId();\\n\\n        uint256[] memory partition = new uint256[](2);\\n        partition[0] = 1;\\n        partition[1] = 2;\\n\\n        if (parentCollectionId != bytes32(0)) {\\n            // it's splitting from a parent position, so we need to unwrap these tokens first because they will be burnt to mint the child outcome tokens.\\n            (IERC20 wrapped1155, bytes memory data) = proposal.parentWrappedOutcome();\\n\\n            uint256 tokenId = conditionalTokens.getPositionId(address(collateralToken), parentCollectionId);\\n\\n            wrapped1155.transferFrom(msg.sender, address(this), amount);\\n            wrapped1155Factory.unwrap(address(conditionalTokens), tokenId, amount, address(this), data);\\n        } else {\\n            collateralToken.approve(address(conditionalTokens), amount);\\n        }\\n\\n        conditionalTokens.splitPosition(address(collateralToken), parentCollectionId, conditionId, partition, amount);\\n\\n        // wrap & transfer the minted outcome tokens.\\n        for (uint256 j = 0; j < 2; j++) {\\n            uint256 tokenId = getTokenId(collateralToken, parentCollectionId, conditionId, 1 << j);\\n\\n            (IERC20 wrapped1155, bytes memory data) = proposal.wrappedOutcome(useFirstCollateral ? j : j + 2);\\n\\n            // wrap to erc20.\\n            conditionalTokens.safeTransferFrom(address(this), address(wrapped1155Factory), tokenId, amount, data);\\n\\n            // transfer the ERC20 back to the user.\\n            require(wrapped1155.transfer(msg.sender, amount), \\\"Wrapped token transfer failed\\\");\\n        }\\n    }\\n\\n    /// @notice Merges a position using two collateral tokens and sends the ERC20 outcome tokens back to the user.\\n    /// @dev The ERC20 associated to each outcome must be previously created on the wrapped1155Factory.\\n    /// @param proposal The futarchy proposal to merge.\\n    /// @param amount The amount to merge.\\n    function mergeProposal(FutarchyProposal proposal, uint256 amount) external payable {\\n        mergePositions(proposal, true, amount);\\n        mergePositions(proposal, false, amount);\\n    }\\n\\n    /// @notice Merges positions and sends the collateral tokens to the user.\\n    /// @dev The ERC20 associated to each outcome must be previously created on the wrapped1155Factory.\\n    /// @dev Collateral tokens are withdrawn only if we are not merging a deep position (parentCollectionId is bytes32(0)).\\n    /// @param proposal The Proposal to merge.\\n    /// @param useFirstCollateral Wether to merge the first or second collateral.\\n    /// @param amount The amount of outcome tokens to merge.\\n    function mergePositions(FutarchyProposal proposal, bool useFirstCollateral, uint256 amount) public {\\n        IERC20 collateralToken = useFirstCollateral ? proposal.collateralToken1() : proposal.collateralToken2();\\n        _mergePositions(proposal, useFirstCollateral, amount);\\n\\n        if (proposal.parentCollectionId() == bytes32(0)) {\\n            // send collateral tokens back to the user.\\n            require(collateralToken.transfer(msg.sender, amount), \\\"Collateral transfer failed\\\");\\n        }\\n    }\\n\\n    /// @notice Merges positions and receives the collateral tokens.\\n    /// @dev Callers to this function must send the collateral to the user.\\n    /// @param proposal The Proposal to merge.\\n    /// @param useFirstCollateral Wether to merge the first or second collateral.\\n    /// @param amount The amount of outcome tokens to merge.\\n    function _mergePositions(FutarchyProposal proposal, bool useFirstCollateral, uint256 amount) internal {\\n        IERC20 collateralToken = useFirstCollateral ? proposal.collateralToken1() : proposal.collateralToken2();\\n        bytes32 parentCollectionId = proposal.parentCollectionId();\\n        bytes32 conditionId = proposal.conditionId();\\n\\n        uint256[] memory partition = new uint256[](2);\\n        partition[0] = 1;\\n        partition[1] = 2;\\n\\n        // we need to unwrap the outcome tokens because they will be burnt during the merge.\\n        for (uint256 j = 0; j < 2; j++) {\\n            uint256 tokenId = getTokenId(collateralToken, parentCollectionId, conditionId, 1 << j);\\n\\n            (IERC20 wrapped1155, bytes memory data) = proposal.wrappedOutcome(useFirstCollateral ? j : j + 2);\\n\\n            wrapped1155.transferFrom(msg.sender, address(this), amount);\\n            wrapped1155Factory.unwrap(address(conditionalTokens), tokenId, amount, address(this), data);\\n        }\\n\\n        conditionalTokens.mergePositions(address(collateralToken), parentCollectionId, conditionId, partition, amount);\\n\\n        if (parentCollectionId != bytes32(0)) {\\n            // it's merging from a parent position, so we need to wrap these tokens and send them back to the user.\\n            uint256 tokenId = conditionalTokens.getPositionId(address(collateralToken), parentCollectionId);\\n\\n            (IERC20 wrapped1155, bytes memory data) = proposal.parentWrappedOutcome();\\n\\n            // wrap to erc20.\\n            conditionalTokens.safeTransferFrom(address(this), address(wrapped1155Factory), tokenId, amount, data);\\n\\n            // transfer the ERC20 back to the user.\\n            require(wrapped1155.transfer(msg.sender, amount), \\\"Wrapped token transfer failed\\\");\\n        }\\n    }\\n\\n    /// @notice Redeems positions and sends the collateral tokens to the user.\\n    /// @dev The ERC20 associated to each outcome must be previously created on the wrapped1155Factory.\\n    /// @dev Collateral tokens are withdrawn only if we are not redeeming a deep position (parentCollectionId is bytes32(0)).\\n    /// @param proposal The Proposal to redeem.\\n    /// @param amount1 Amount to redeem for the first collateral.\\n    /// @param amount2 Amount to redeem for the second collateral.\\n    function redeemProposal(FutarchyProposal proposal, uint256 amount1, uint256 amount2) external {\\n        redeemPositions(proposal, true, amount1);\\n        redeemPositions(proposal, false, amount2);\\n    }\\n\\n    /// @notice Redeems positions and sends the collateral tokens to the user.\\n    /// @dev The ERC20 associated to each outcome must be previously created on the wrapped1155Factory.\\n    /// @dev Collateral tokens are withdrawn only if we are not redeeming a deep position (parentCollectionId is bytes32(0)).\\n    /// @param proposal The Proposal to redeem.\\n    /// @param useFirstCollateral Wether to redeem the first or second collateral.\\n    /// @param amount Amount to redeem.\\n    function redeemPositions(FutarchyProposal proposal, bool useFirstCollateral, uint256 amount) public {\\n        IERC20 collateralToken = useFirstCollateral ? proposal.collateralToken1() : proposal.collateralToken2();\\n        bytes32 parentCollectionId = proposal.parentCollectionId();\\n        uint256 initialBalance;\\n\\n        if (parentCollectionId == bytes32(0)) {\\n            initialBalance = collateralToken.balanceOf(address(this));\\n        }\\n\\n        _redeemPositions(proposal, useFirstCollateral, amount);\\n\\n        if (parentCollectionId == bytes32(0)) {\\n            uint256 finalBalance = collateralToken.balanceOf(address(this));\\n\\n            if (finalBalance > initialBalance) {\\n                // send collateral tokens back to the user.\\n                require(\\n                    collateralToken.transfer(msg.sender, finalBalance - initialBalance), \\\"Collateral transfer failed\\\"\\n                );\\n            }\\n        }\\n    }\\n\\n    /// @notice Redeems positions and receives the collateral tokens.\\n    /// @dev Callers to this function must send the collateral to the user.\\n    /// @param proposal The Proposal to redeem.\\n    /// @param useFirstCollateral Whether to redeem the first or second collateral.\\n    /// @param amount Amount to redeem.\\n    function _redeemPositions(FutarchyProposal proposal, bool useFirstCollateral, uint256 amount) internal {\\n        IERC20 collateralToken = useFirstCollateral ? proposal.collateralToken1() : proposal.collateralToken2();\\n        bytes32 parentCollectionId = proposal.parentCollectionId();\\n        bytes32 conditionId = proposal.conditionId();\\n        uint256 tokenId = 0;\\n\\n        uint256[] memory indexSets = new uint256[](1);\\n        bool isApproved = conditionalTokens.payoutNumerators(conditionId, 0) == 1;\\n        uint256 j = isApproved ? 0 : 1;\\n        indexSets[0] = 1 << j;\\n        tokenId = getTokenId(collateralToken, parentCollectionId, conditionId, indexSets[0]);\\n\\n        // first we need to unwrap the outcome tokens that will be redeemed.\\n        (IERC20 wrapped1155, bytes memory data) = proposal.wrappedOutcome(useFirstCollateral ? j : j + 2);\\n\\n        wrapped1155.transferFrom(msg.sender, address(this), amount);\\n\\n        wrapped1155Factory.unwrap(address(conditionalTokens), tokenId, amount, address(this), data);\\n\\n        uint256 initialBalance = 0;\\n\\n        if (parentCollectionId != bytes32(0)) {\\n            // if we are redeeming from a child market, the user may already have parent tokens so we need to track the balance change.\\n            tokenId = conditionalTokens.getPositionId(address(collateralToken), parentCollectionId);\\n            initialBalance = conditionalTokens.balanceOf(address(this), tokenId);\\n        }\\n\\n        conditionalTokens.redeemPositions(address(collateralToken), parentCollectionId, conditionId, indexSets);\\n\\n        if (parentCollectionId != bytes32(0)) {\\n            // if we are redeeming from a child market, redeemPositions() returned outcome tokens of the parent market. We need to wrap and send them to the user.\\n            uint256 finalBalance = conditionalTokens.balanceOf(address(this), tokenId);\\n\\n            if (finalBalance > initialBalance) {\\n                // wrap to erc20.\\n                (IERC20 parentWrapped1155, bytes memory parentData) = proposal.parentWrappedOutcome();\\n\\n                conditionalTokens.safeTransferFrom(\\n                    address(this), address(wrapped1155Factory), tokenId, finalBalance - initialBalance, parentData\\n                );\\n\\n                // transfer the ERC20 back to the user.\\n                require(\\n                    parentWrapped1155.transfer(msg.sender, finalBalance - initialBalance),\\n                    \\\"Parent wrapped token transfer failed\\\"\\n                );\\n            }\\n        }\\n    }\\n\\n    /// @notice Constructs a tokenId from a collateral token and an outcome collection.\\n    /// @param collateralToken The address of the ERC20 used as collateral.\\n    /// @param parentCollectionId The Conditional Tokens parent collection id.\\n    /// @param conditionId The id of the condition used to redeem.\\n    /// @param indexSet Index set of the outcome collection to combine with the parent outcome collection.\\n    /// @return The token id.\\n    function getTokenId(\\n        IERC20 collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint256 indexSet\\n    ) public view returns (uint256) {\\n        bytes32 collectionId = conditionalTokens.getCollectionId(parentCollectionId, conditionId, indexSet);\\n        return conditionalTokens.getPositionId(address(collateralToken), collectionId);\\n    }\\n}\\n\",\"keccak256\":\"0xce09e4ccf923187f9aee9b0767c82ade52d40fa36fbc9f92ba285df95052001e\",\"license\":\"MIT\"},\"src/Interfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IERC20 {\\n    function symbol() external view returns (string memory);\\n\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address owner) external returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n}\\n\\n// https://github.com/RealityETH/reality-eth-monorepo/blob/main/packages/contracts/flat/RealityETH-3.0.sol\\ninterface IRealityETH_v3_0 {\\n    function askQuestionWithMinBond(\\n        uint256 template_id,\\n        string memory question,\\n        address arbitrator,\\n        uint32 timeout,\\n        uint32 opening_ts,\\n        uint256 nonce,\\n        uint256 min_bond\\n    ) external payable returns (bytes32);\\n\\n    function resultForOnceSettled(bytes32 question_id) external view returns (bytes32);\\n\\n    function getContentHash(bytes32 question_id) external view returns (bytes32);\\n\\n    function getTimeout(bytes32 question_id) external view returns (uint32);\\n\\n    function submitAnswer(bytes32 question_id, bytes32 answer, uint256 max_previous) external payable;\\n}\\n\\ninterface IConditionalTokens {\\n    function payoutNumerators(bytes32 conditionId, uint256 index) external view returns (uint256);\\n\\n    function payoutDenominator(bytes32 conditionId) external view returns (uint256);\\n\\n    function prepareCondition(address oracle, bytes32 questionId, uint256 outcomeSlotCount) external;\\n\\n    function reportPayouts(bytes32 questionId, uint256[] calldata payouts) external;\\n\\n    function splitPosition(\\n        /*IERC20*/\\n        address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint256[] calldata partition,\\n        uint256 amount\\n    ) external;\\n\\n    function mergePositions(\\n        /*IERC20*/\\n        address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint256[] calldata partition,\\n        uint256 amount\\n    ) external;\\n\\n    function redeemPositions(\\n        /*IERC20*/\\n        address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint256[] calldata indexSets\\n    ) external;\\n\\n    function getConditionId(\\n        address oracle,\\n        bytes32 questionId,\\n        uint256 outcomeSlotCount\\n    ) external pure returns (bytes32);\\n\\n    function getCollectionId(\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint256 indexSet\\n    ) external view returns (bytes32);\\n\\n    function getPositionId(address collateralToken, bytes32 collectionId) external pure returns (uint256);\\n\\n    function getOutcomeSlotCount(bytes32 conditionId) external view returns (uint256);\\n\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    function balanceOf(address owner, uint256 id) external view returns (uint256);\\n}\\n\\ninterface IWrapped1155Factory {\\n    function requireWrapped1155(\\n        /*IERC1155*/\\n        address multiToken,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external /*Wrapped1155*/ returns (IERC20);\\n\\n    function unwrap(\\n        /*IERC1155*/\\n        address multiToken,\\n        uint256 tokenId,\\n        uint256 amount,\\n        address recipient,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8892a345d504bf2d565948b1ec7a5302cf45024e6a0ea3ac810d5eb0b2827d77\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162002a4138038062002a41833981016040819052620000349162000065565b6001600160a01b039182166080521660a052620000a4565b6001600160a01b03811681146200006257600080fd5b50565b600080604083850312156200007957600080fd5b825162000086816200004c565b602084015190925062000099816200004c565b809150509250929050565b60805160a0516128d0620001716000396000818160f301528181610e700152818161111601528181611562015281816117de01528181611cb001526120300152600081816101b7015281816103050152818161038a01528181610d5501528181610e9d01528181610f2b01528181610fb1015281816110e70152818161158f0152818161161f015281816116b0015281816117af01528181611ac201528181611cdd01528181611d6001528181611df101528181611e8101528181611f0f015261200801526128d06000f3fe6080604052600436106100a75760003560e01c80635bd9e299116100645780635bd9e299146101a5578063aab8ff62146101d9578063bc197c81146101f9578063d76074601461023e578063ef56a8f31461025e578063f23a6e611461027157600080fd5b806301ffc9a7146100ac578063150c5b97146100e15780631a09424a1461012257806321816254146101505780633f325a2b1461017257806353a0662214610192575b600080fd5b3480156100b857600080fd5b506100cc6100c7366004612195565b61029d565b60405190151581526020015b60405180910390f35b3480156100ed57600080fd5b506101157f000000000000000000000000000000000000000000000000000000000000000081565b6040516100d891906121c6565b34801561012e57600080fd5b5061014261013d3660046121f2565b6102d4565b6040519081526020016100d8565b34801561015c57600080fd5b5061017061016b36600461223b565b61040c565b005b34801561017e57600080fd5b5061017061018d36600461227c565b6105cf565b6101706101a03660046122b1565b6105ec565b3480156101b157600080fd5b506101157f000000000000000000000000000000000000000000000000000000000000000081565b3480156101e557600080fd5b506101706101f436600461223b565b610608565b34801561020557600080fd5b50610225610214366004612422565b63bc197c8160e01b95945050505050565b6040516001600160e01b031990911681526020016100d8565b34801561024a57600080fd5b5061017061025936600461223b565b6107e6565b61017061026c3660046122b1565b610ac3565b34801561027d57600080fd5b5061022561028c3660046124d0565b63f23a6e6160e01b95945050505050565b60006001600160e01b03198216630271189760e51b14806102ce57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60405163856296f760e01b815260048101849052602481018390526044810182905260009081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063856296f790606401602060405180830381865afa15801561034c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103709190612539565b60405163039dd75360e41b81529091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906339dd7530906103c19089908590600401612552565b602060405180830381865afa1580156103de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104029190612539565b9695505050505050565b60008261047a57836001600160a01b031663c4a091d26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610451573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610475919061256b565b6104dc565b836001600160a01b0316634d7b09006040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104dc919061256b565b90506000801b846001600160a01b03166344bea37e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610520573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105449190612539565b036105be576040516323b872dd60e01b81526001600160a01b038216906323b872dd9061057990339030908790600401612588565b6020604051808303816000875af1158015610598573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bc91906125ac565b505b6105c9848484610adb565b50505050565b6105db836001846107e6565b6105e7836000836107e6565b505050565b6105f88260018361040c565b6106048260008361040c565b5050565b60008261067657836001600160a01b031663c4a091d26040518163ffffffff1660e01b8152600401602060405180830381865afa15801561064d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610671919061256b565b6106d8565b836001600160a01b0316634d7b09006040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d8919061256b565b90506106e5848484611223565b6000801b846001600160a01b03166344bea37e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610727573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074b9190612539565b036105c95760405163a9059cbb60e01b81526001600160a01b0382169063a9059cbb9061077e9033908690600401612552565b6020604051808303816000875af115801561079d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c191906125ac565b6105c95760405162461bcd60e51b81526004016107dd906125c9565b60405180910390fd5b60008261085457836001600160a01b031663c4a091d26040518163ffffffff1660e01b8152600401602060405180830381865afa15801561082b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084f919061256b565b6108b6565b836001600160a01b0316634d7b09006040518163ffffffff1660e01b8152600401602060405180830381865afa158015610892573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b6919061256b565b90506000846001600160a01b03166344bea37e6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091c9190612539565b9050600081610997576040516370a0823160e01b81526001600160a01b038416906370a08231906109519030906004016121c6565b6020604051808303816000875af1158015610970573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109949190612539565b90505b6109a28686866118d7565b81610abb576040516370a0823160e01b81526000906001600160a01b038516906370a08231906109d69030906004016121c6565b6020604051808303816000875af11580156109f5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a199190612539565b905081811115610ab9576001600160a01b03841663a9059cbb33610a3d8585612616565b6040518363ffffffff1660e01b8152600401610a5a929190612552565b6020604051808303816000875af1158015610a79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9d91906125ac565b610ab95760405162461bcd60e51b81526004016107dd906125c9565b505b505050505050565b610acf82600183610608565b61060482600083610608565b600082610b4957836001600160a01b031663c4a091d26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b44919061256b565b610bab565b836001600160a01b0316634d7b09006040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bab919061256b565b90506000846001600160a01b03166344bea37e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c119190612539565b90506000856001600160a01b0316632ddc7de76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c779190612539565b6040805160028082526060820183529293506000929091602083019080368337019050509050600181600081518110610cb257610cb2612629565b602002602001018181525050600281600181518110610cd357610cd3612629565b60209081029190910101528215610f0757600080886001600160a01b0316636fc4eddd6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610d25573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d4d9190810190612663565b9150915060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166339dd753088886040518363ffffffff1660e01b8152600401610da1929190612552565b602060405180830381865afa158015610dbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de29190612539565b6040516323b872dd60e01b81529091506001600160a01b038416906323b872dd90610e1590339030908d90600401612588565b6020604051808303816000875af1158015610e34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5891906125ac565b506040516314abb2c960e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906352aecb2490610ecd907f00000000000000000000000000000000000000000000000000000000000000009085908d903090899060040161271c565b600060405180830381600087803b158015610ee757600080fd5b505af1158015610efb573d6000803e3d6000fd5b50505050505050610f9a565b60405163095ea7b360e01b81526001600160a01b0385169063095ea7b390610f55907f0000000000000000000000000000000000000000000000000000000000000000908990600401612552565b6020604051808303816000875af1158015610f74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9891906125ac565b505b6040516372ce427560e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906372ce427590610fee9087908790879087908c90600401612791565b600060405180830381600087803b15801561100857600080fd5b505af115801561101c573d6000803e3d6000fd5b5050505060005b600281101561121957600061103d8686866001861b6102d4565b90506000808a6001600160a01b03166318a988a88b611066576110618660026127d0565b611068565b855b6040518263ffffffff1660e01b815260040161108691815260200190565b600060405180830381865afa1580156110a3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110cb9190810190612663565b604051637921219560e11b815291935091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063f242432a906111449030907f00000000000000000000000000000000000000000000000000000000000000009088908f9088906004016127e3565b600060405180830381600087803b15801561115e57600080fd5b505af1158015611172573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b038516925063a9059cbb91506111a49033908d90600401612552565b6020604051808303816000875af11580156111c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e791906125ac565b6112035760405162461bcd60e51b81526004016107dd9061281d565b505050808061121190612854565b915050611023565b5050505050505050565b60008261129157836001600160a01b031663c4a091d26040518163ffffffff1660e01b8152600401602060405180830381865afa158015611268573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128c919061256b565b6112f3565b836001600160a01b0316634d7b09006040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f3919061256b565b90506000846001600160a01b03166344bea37e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611335573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113599190612539565b90506000856001600160a01b0316632ddc7de76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561139b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113bf9190612539565b60408051600280825260608201835292935060009290916020830190803683370190505090506001816000815181106113fa576113fa612629565b60200260200101818152505060028160018151811061141b5761141b612629565b60200260200101818152505060005b60028110156116075760006114448686866001861b6102d4565b90506000808a6001600160a01b03166318a988a88b61146d576114688660026127d0565b61146f565b855b6040518263ffffffff1660e01b815260040161148d91815260200190565b600060405180830381865afa1580156114aa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114d29190810190612663565b6040516323b872dd60e01b815291935091506001600160a01b038316906323b872dd9061150790339030908e90600401612588565b6020604051808303816000875af1158015611526573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154a91906125ac565b506040516314abb2c960e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906352aecb24906115bf907f00000000000000000000000000000000000000000000000000000000000000009087908e903090889060040161271c565b600060405180830381600087803b1580156115d957600080fd5b505af11580156115ed573d6000803e3d6000fd5b5050505050505080806115ff90612854565b91505061142a565b50604051639e7212ad60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639e7212ad9061165c9087908790879087908c90600401612791565b600060405180830381600087803b15801561167657600080fd5b505af115801561168a573d6000803e3d6000fd5b505084159150610ab990505760405163039dd75360e41b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906339dd7530906116e79088908890600401612552565b602060405180830381865afa158015611704573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117289190612539565b9050600080896001600160a01b0316636fc4eddd6040518163ffffffff1660e01b8152600401600060405180830381865afa15801561176b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526117939190810190612663565b604051637921219560e11b815291935091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063f242432a9061180c9030907f00000000000000000000000000000000000000000000000000000000000000009088908e9088906004016127e3565b600060405180830381600087803b15801561182657600080fd5b505af115801561183a573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b038516925063a9059cbb915061186c9033908c90600401612552565b6020604051808303816000875af115801561188b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118af91906125ac565b6118cb5760405162461bcd60e51b81526004016107dd9061281d565b50505050505050505050565b60008261194557836001600160a01b031663c4a091d26040518163ffffffff1660e01b8152600401602060405180830381865afa15801561191c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611940919061256b565b6119a7565b836001600160a01b0316634d7b09006040518163ffffffff1660e01b8152600401602060405180830381865afa158015611983573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a7919061256b565b90506000846001600160a01b03166344bea37e6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156119e9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a0d9190612539565b90506000856001600160a01b0316632ddc7de76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a739190612539565b60408051600180825281830190925291925060009182916020808301908036833701905050604051630141320560e21b8152600481018590526000602482018190529192506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690630504c81490604401602060405180830381865afa158015611b09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b2d9190612539565b6001149050600081611b40576001611b43565b60005b60ff169050806001901b83600081518110611b6057611b60612629565b602002602001018181525050611b9287878786600081518110611b8557611b85612629565b60200260200101516102d4565b93506000808b6001600160a01b03166318a988a88c611bbb57611bb68560026127d0565b611bbd565b845b6040518263ffffffff1660e01b8152600401611bdb91815260200190565b600060405180830381865afa158015611bf8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611c209190810190612663565b6040516323b872dd60e01b815291935091506001600160a01b038316906323b872dd90611c5590339030908f90600401612588565b6020604051808303816000875af1158015611c74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c9891906125ac565b506040516314abb2c960e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906352aecb2490611d0d907f0000000000000000000000000000000000000000000000000000000000000000908a908f903090889060040161271c565b600060405180830381600087803b158015611d2757600080fd5b505af1158015611d3b573d6000803e3d6000fd5b50600092505089159050611e6b5760405163039dd75360e41b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906339dd753090611d97908d908d90600401612552565b602060405180830381865afa158015611db4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dd89190612539565b604051627eeac760e11b81529097506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169062fdd58e90611e279030908b90600401612552565b602060405180830381865afa158015611e44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e689190612539565b90505b604051626dc0df60e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906301b7037c90611ebc908d908d908d908c9060040161286d565b600060405180830381600087803b158015611ed657600080fd5b505af1158015611eea573d6000803e3d6000fd5b50508a159150612186905057604051627eeac760e11b81526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169062fdd58e90611f459030908c90600401612552565b602060405180830381865afa158015611f62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f869190612539565b905081811115612184576000808f6001600160a01b0316636fc4eddd6040518163ffffffff1660e01b8152600401600060405180830381865afa158015611fd1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611ff99190810190612663565b90925090506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663f242432a307f00000000000000000000000000000000000000000000000000000000000000008d61205a8989612616565b866040518663ffffffff1660e01b815260040161207b9594939291906127e3565b600060405180830381600087803b15801561209557600080fd5b505af11580156120a9573d6000803e3d6000fd5b50505050816001600160a01b031663a9059cbb3386866120c99190612616565b6040518363ffffffff1660e01b81526004016120e6929190612552565b6020604051808303816000875af1158015612105573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061212991906125ac565b6121815760405162461bcd60e51b8152602060048201526024808201527f506172656e74207772617070656420746f6b656e207472616e736665722066616044820152631a5b195960e21b60648201526084016107dd565b50505b505b50505050505050505050505050565b6000602082840312156121a757600080fd5b81356001600160e01b0319811681146121bf57600080fd5b9392505050565b6001600160a01b0391909116815260200190565b6001600160a01b03811681146121ef57600080fd5b50565b6000806000806080858703121561220857600080fd5b8435612213816121da565b966020860135965060408601359560600135945092505050565b80151581146121ef57600080fd5b60008060006060848603121561225057600080fd5b833561225b816121da565b9250602084013561226b8161222d565b929592945050506040919091013590565b60008060006060848603121561229157600080fd5b833561229c816121da565b95602085013595506040909401359392505050565b600080604083850312156122c457600080fd5b82356122cf816121da565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561231c5761231c6122dd565b604052919050565b600082601f83011261233557600080fd5b8135602067ffffffffffffffff821115612351576123516122dd565b8160051b6123608282016122f3565b928352848101820192828101908785111561237a57600080fd5b83870192505b8483101561239957823582529183019190830190612380565b979650505050505050565b600067ffffffffffffffff8211156123be576123be6122dd565b50601f01601f191660200190565b600082601f8301126123dd57600080fd5b81356123f06123eb826123a4565b6122f3565b81815284602083860101111561240557600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a0868803121561243a57600080fd5b8535612445816121da565b94506020860135612455816121da565b9350604086013567ffffffffffffffff8082111561247257600080fd5b61247e89838a01612324565b9450606088013591508082111561249457600080fd5b6124a089838a01612324565b935060808801359150808211156124b657600080fd5b506124c3888289016123cc565b9150509295509295909350565b600080600080600060a086880312156124e857600080fd5b85356124f3816121da565b94506020860135612503816121da565b93506040860135925060608601359150608086013567ffffffffffffffff81111561252d57600080fd5b6124c3888289016123cc565b60006020828403121561254b57600080fd5b5051919050565b6001600160a01b03929092168252602082015260400190565b60006020828403121561257d57600080fd5b81516121bf816121da565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6000602082840312156125be57600080fd5b81516121bf8161222d565b6020808252601a908201527f436f6c6c61746572616c207472616e73666572206661696c6564000000000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b818103818111156102ce576102ce612600565b634e487b7160e01b600052603260045260246000fd5b60005b8381101561265a578181015183820152602001612642565b50506000910152565b6000806040838503121561267657600080fd5b8251612681816121da565b602084015190925067ffffffffffffffff81111561269e57600080fd5b8301601f810185136126af57600080fd5b80516126bd6123eb826123a4565b8181528660208385010111156126d257600080fd5b6126e382602083016020860161263f565b8093505050509250929050565b6000815180845261270881602086016020860161263f565b601f01601f19169290920160200192915050565b6001600160a01b03868116825260208201869052604082018590528316606082015260a060808201819052600090612399908301846126f0565b600081518084526020808501945080840160005b838110156127865781518752958201959082019060010161276a565b509495945050505050565b60018060a01b038616815284602082015283604082015260a0606082015260006127be60a0830185612756565b90508260808301529695505050505050565b808201808211156102ce576102ce612600565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090612399908301846126f0565b6020808252601d908201527f5772617070656420746f6b656e207472616e73666572206661696c6564000000604082015260600190565b60006001820161286657612866612600565b5060010190565b60018060a01b0385168152836020820152826040820152608060608201526000610402608083018461275656fea264697066735822122079074069668c43878a601ae48c63f344b21bd087beb7a5b6dbcdedf3320691c764736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436106100a75760003560e01c80635bd9e299116100645780635bd9e299146101a5578063aab8ff62146101d9578063bc197c81146101f9578063d76074601461023e578063ef56a8f31461025e578063f23a6e611461027157600080fd5b806301ffc9a7146100ac578063150c5b97146100e15780631a09424a1461012257806321816254146101505780633f325a2b1461017257806353a0662214610192575b600080fd5b3480156100b857600080fd5b506100cc6100c7366004612195565b61029d565b60405190151581526020015b60405180910390f35b3480156100ed57600080fd5b506101157f000000000000000000000000000000000000000000000000000000000000000081565b6040516100d891906121c6565b34801561012e57600080fd5b5061014261013d3660046121f2565b6102d4565b6040519081526020016100d8565b34801561015c57600080fd5b5061017061016b36600461223b565b61040c565b005b34801561017e57600080fd5b5061017061018d36600461227c565b6105cf565b6101706101a03660046122b1565b6105ec565b3480156101b157600080fd5b506101157f000000000000000000000000000000000000000000000000000000000000000081565b3480156101e557600080fd5b506101706101f436600461223b565b610608565b34801561020557600080fd5b50610225610214366004612422565b63bc197c8160e01b95945050505050565b6040516001600160e01b031990911681526020016100d8565b34801561024a57600080fd5b5061017061025936600461223b565b6107e6565b61017061026c3660046122b1565b610ac3565b34801561027d57600080fd5b5061022561028c3660046124d0565b63f23a6e6160e01b95945050505050565b60006001600160e01b03198216630271189760e51b14806102ce57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60405163856296f760e01b815260048101849052602481018390526044810182905260009081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063856296f790606401602060405180830381865afa15801561034c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103709190612539565b60405163039dd75360e41b81529091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906339dd7530906103c19089908590600401612552565b602060405180830381865afa1580156103de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104029190612539565b9695505050505050565b60008261047a57836001600160a01b031663c4a091d26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610451573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610475919061256b565b6104dc565b836001600160a01b0316634d7b09006040518163ffffffff1660e01b8152600401602060405180830381865afa1580156104b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104dc919061256b565b90506000801b846001600160a01b03166344bea37e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610520573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105449190612539565b036105be576040516323b872dd60e01b81526001600160a01b038216906323b872dd9061057990339030908790600401612588565b6020604051808303816000875af1158015610598573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bc91906125ac565b505b6105c9848484610adb565b50505050565b6105db836001846107e6565b6105e7836000836107e6565b505050565b6105f88260018361040c565b6106048260008361040c565b5050565b60008261067657836001600160a01b031663c4a091d26040518163ffffffff1660e01b8152600401602060405180830381865afa15801561064d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610671919061256b565b6106d8565b836001600160a01b0316634d7b09006040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d8919061256b565b90506106e5848484611223565b6000801b846001600160a01b03166344bea37e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610727573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074b9190612539565b036105c95760405163a9059cbb60e01b81526001600160a01b0382169063a9059cbb9061077e9033908690600401612552565b6020604051808303816000875af115801561079d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c191906125ac565b6105c95760405162461bcd60e51b81526004016107dd906125c9565b60405180910390fd5b60008261085457836001600160a01b031663c4a091d26040518163ffffffff1660e01b8152600401602060405180830381865afa15801561082b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061084f919061256b565b6108b6565b836001600160a01b0316634d7b09006040518163ffffffff1660e01b8152600401602060405180830381865afa158015610892573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b6919061256b565b90506000846001600160a01b03166344bea37e6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108f8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091c9190612539565b9050600081610997576040516370a0823160e01b81526001600160a01b038416906370a08231906109519030906004016121c6565b6020604051808303816000875af1158015610970573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109949190612539565b90505b6109a28686866118d7565b81610abb576040516370a0823160e01b81526000906001600160a01b038516906370a08231906109d69030906004016121c6565b6020604051808303816000875af11580156109f5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a199190612539565b905081811115610ab9576001600160a01b03841663a9059cbb33610a3d8585612616565b6040518363ffffffff1660e01b8152600401610a5a929190612552565b6020604051808303816000875af1158015610a79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9d91906125ac565b610ab95760405162461bcd60e51b81526004016107dd906125c9565b505b505050505050565b610acf82600183610608565b61060482600083610608565b600082610b4957836001600160a01b031663c4a091d26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b20573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b44919061256b565b610bab565b836001600160a01b0316634d7b09006040518163ffffffff1660e01b8152600401602060405180830381865afa158015610b87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bab919061256b565b90506000846001600160a01b03166344bea37e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610bed573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c119190612539565b90506000856001600160a01b0316632ddc7de76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610c53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c779190612539565b6040805160028082526060820183529293506000929091602083019080368337019050509050600181600081518110610cb257610cb2612629565b602002602001018181525050600281600181518110610cd357610cd3612629565b60209081029190910101528215610f0757600080886001600160a01b0316636fc4eddd6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610d25573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610d4d9190810190612663565b9150915060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166339dd753088886040518363ffffffff1660e01b8152600401610da1929190612552565b602060405180830381865afa158015610dbe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610de29190612539565b6040516323b872dd60e01b81529091506001600160a01b038416906323b872dd90610e1590339030908d90600401612588565b6020604051808303816000875af1158015610e34573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e5891906125ac565b506040516314abb2c960e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906352aecb2490610ecd907f00000000000000000000000000000000000000000000000000000000000000009085908d903090899060040161271c565b600060405180830381600087803b158015610ee757600080fd5b505af1158015610efb573d6000803e3d6000fd5b50505050505050610f9a565b60405163095ea7b360e01b81526001600160a01b0385169063095ea7b390610f55907f0000000000000000000000000000000000000000000000000000000000000000908990600401612552565b6020604051808303816000875af1158015610f74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9891906125ac565b505b6040516372ce427560e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906372ce427590610fee9087908790879087908c90600401612791565b600060405180830381600087803b15801561100857600080fd5b505af115801561101c573d6000803e3d6000fd5b5050505060005b600281101561121957600061103d8686866001861b6102d4565b90506000808a6001600160a01b03166318a988a88b611066576110618660026127d0565b611068565b855b6040518263ffffffff1660e01b815260040161108691815260200190565b600060405180830381865afa1580156110a3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110cb9190810190612663565b604051637921219560e11b815291935091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063f242432a906111449030907f00000000000000000000000000000000000000000000000000000000000000009088908f9088906004016127e3565b600060405180830381600087803b15801561115e57600080fd5b505af1158015611172573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b038516925063a9059cbb91506111a49033908d90600401612552565b6020604051808303816000875af11580156111c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111e791906125ac565b6112035760405162461bcd60e51b81526004016107dd9061281d565b505050808061121190612854565b915050611023565b5050505050505050565b60008261129157836001600160a01b031663c4a091d26040518163ffffffff1660e01b8152600401602060405180830381865afa158015611268573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061128c919061256b565b6112f3565b836001600160a01b0316634d7b09006040518163ffffffff1660e01b8152600401602060405180830381865afa1580156112cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112f3919061256b565b90506000846001600160a01b03166344bea37e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611335573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113599190612539565b90506000856001600160a01b0316632ddc7de76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561139b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113bf9190612539565b60408051600280825260608201835292935060009290916020830190803683370190505090506001816000815181106113fa576113fa612629565b60200260200101818152505060028160018151811061141b5761141b612629565b60200260200101818152505060005b60028110156116075760006114448686866001861b6102d4565b90506000808a6001600160a01b03166318a988a88b61146d576114688660026127d0565b61146f565b855b6040518263ffffffff1660e01b815260040161148d91815260200190565b600060405180830381865afa1580156114aa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114d29190810190612663565b6040516323b872dd60e01b815291935091506001600160a01b038316906323b872dd9061150790339030908e90600401612588565b6020604051808303816000875af1158015611526573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154a91906125ac565b506040516314abb2c960e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906352aecb24906115bf907f00000000000000000000000000000000000000000000000000000000000000009087908e903090889060040161271c565b600060405180830381600087803b1580156115d957600080fd5b505af11580156115ed573d6000803e3d6000fd5b5050505050505080806115ff90612854565b91505061142a565b50604051639e7212ad60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639e7212ad9061165c9087908790879087908c90600401612791565b600060405180830381600087803b15801561167657600080fd5b505af115801561168a573d6000803e3d6000fd5b505084159150610ab990505760405163039dd75360e41b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906339dd7530906116e79088908890600401612552565b602060405180830381865afa158015611704573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117289190612539565b9050600080896001600160a01b0316636fc4eddd6040518163ffffffff1660e01b8152600401600060405180830381865afa15801561176b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526117939190810190612663565b604051637921219560e11b815291935091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063f242432a9061180c9030907f00000000000000000000000000000000000000000000000000000000000000009088908e9088906004016127e3565b600060405180830381600087803b15801561182657600080fd5b505af115801561183a573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b038516925063a9059cbb915061186c9033908c90600401612552565b6020604051808303816000875af115801561188b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118af91906125ac565b6118cb5760405162461bcd60e51b81526004016107dd9061281d565b50505050505050505050565b60008261194557836001600160a01b031663c4a091d26040518163ffffffff1660e01b8152600401602060405180830381865afa15801561191c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611940919061256b565b6119a7565b836001600160a01b0316634d7b09006040518163ffffffff1660e01b8152600401602060405180830381865afa158015611983573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119a7919061256b565b90506000846001600160a01b03166344bea37e6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156119e9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a0d9190612539565b90506000856001600160a01b0316632ddc7de76040518163ffffffff1660e01b8152600401602060405180830381865afa158015611a4f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a739190612539565b60408051600180825281830190925291925060009182916020808301908036833701905050604051630141320560e21b8152600481018590526000602482018190529192506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690630504c81490604401602060405180830381865afa158015611b09573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b2d9190612539565b6001149050600081611b40576001611b43565b60005b60ff169050806001901b83600081518110611b6057611b60612629565b602002602001018181525050611b9287878786600081518110611b8557611b85612629565b60200260200101516102d4565b93506000808b6001600160a01b03166318a988a88c611bbb57611bb68560026127d0565b611bbd565b845b6040518263ffffffff1660e01b8152600401611bdb91815260200190565b600060405180830381865afa158015611bf8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611c209190810190612663565b6040516323b872dd60e01b815291935091506001600160a01b038316906323b872dd90611c5590339030908f90600401612588565b6020604051808303816000875af1158015611c74573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c9891906125ac565b506040516314abb2c960e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906352aecb2490611d0d907f0000000000000000000000000000000000000000000000000000000000000000908a908f903090889060040161271c565b600060405180830381600087803b158015611d2757600080fd5b505af1158015611d3b573d6000803e3d6000fd5b50600092505089159050611e6b5760405163039dd75360e41b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906339dd753090611d97908d908d90600401612552565b602060405180830381865afa158015611db4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611dd89190612539565b604051627eeac760e11b81529097506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169062fdd58e90611e279030908b90600401612552565b602060405180830381865afa158015611e44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e689190612539565b90505b604051626dc0df60e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906301b7037c90611ebc908d908d908d908c9060040161286d565b600060405180830381600087803b158015611ed657600080fd5b505af1158015611eea573d6000803e3d6000fd5b50508a159150612186905057604051627eeac760e11b81526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169062fdd58e90611f459030908c90600401612552565b602060405180830381865afa158015611f62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f869190612539565b905081811115612184576000808f6001600160a01b0316636fc4eddd6040518163ffffffff1660e01b8152600401600060405180830381865afa158015611fd1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611ff99190810190612663565b90925090506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663f242432a307f00000000000000000000000000000000000000000000000000000000000000008d61205a8989612616565b866040518663ffffffff1660e01b815260040161207b9594939291906127e3565b600060405180830381600087803b15801561209557600080fd5b505af11580156120a9573d6000803e3d6000fd5b50505050816001600160a01b031663a9059cbb3386866120c99190612616565b6040518363ffffffff1660e01b81526004016120e6929190612552565b6020604051808303816000875af1158015612105573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061212991906125ac565b6121815760405162461bcd60e51b8152602060048201526024808201527f506172656e74207772617070656420746f6b656e207472616e736665722066616044820152631a5b195960e21b60648201526084016107dd565b50505b505b50505050505050505050505050565b6000602082840312156121a757600080fd5b81356001600160e01b0319811681146121bf57600080fd5b9392505050565b6001600160a01b0391909116815260200190565b6001600160a01b03811681146121ef57600080fd5b50565b6000806000806080858703121561220857600080fd5b8435612213816121da565b966020860135965060408601359560600135945092505050565b80151581146121ef57600080fd5b60008060006060848603121561225057600080fd5b833561225b816121da565b9250602084013561226b8161222d565b929592945050506040919091013590565b60008060006060848603121561229157600080fd5b833561229c816121da565b95602085013595506040909401359392505050565b600080604083850312156122c457600080fd5b82356122cf816121da565b946020939093013593505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff8111828210171561231c5761231c6122dd565b604052919050565b600082601f83011261233557600080fd5b8135602067ffffffffffffffff821115612351576123516122dd565b8160051b6123608282016122f3565b928352848101820192828101908785111561237a57600080fd5b83870192505b8483101561239957823582529183019190830190612380565b979650505050505050565b600067ffffffffffffffff8211156123be576123be6122dd565b50601f01601f191660200190565b600082601f8301126123dd57600080fd5b81356123f06123eb826123a4565b6122f3565b81815284602083860101111561240557600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a0868803121561243a57600080fd5b8535612445816121da565b94506020860135612455816121da565b9350604086013567ffffffffffffffff8082111561247257600080fd5b61247e89838a01612324565b9450606088013591508082111561249457600080fd5b6124a089838a01612324565b935060808801359150808211156124b657600080fd5b506124c3888289016123cc565b9150509295509295909350565b600080600080600060a086880312156124e857600080fd5b85356124f3816121da565b94506020860135612503816121da565b93506040860135925060608601359150608086013567ffffffffffffffff81111561252d57600080fd5b6124c3888289016123cc565b60006020828403121561254b57600080fd5b5051919050565b6001600160a01b03929092168252602082015260400190565b60006020828403121561257d57600080fd5b81516121bf816121da565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6000602082840312156125be57600080fd5b81516121bf8161222d565b6020808252601a908201527f436f6c6c61746572616c207472616e73666572206661696c6564000000000000604082015260600190565b634e487b7160e01b600052601160045260246000fd5b818103818111156102ce576102ce612600565b634e487b7160e01b600052603260045260246000fd5b60005b8381101561265a578181015183820152602001612642565b50506000910152565b6000806040838503121561267657600080fd5b8251612681816121da565b602084015190925067ffffffffffffffff81111561269e57600080fd5b8301601f810185136126af57600080fd5b80516126bd6123eb826123a4565b8181528660208385010111156126d257600080fd5b6126e382602083016020860161263f565b8093505050509250929050565b6000815180845261270881602086016020860161263f565b601f01601f19169290920160200192915050565b6001600160a01b03868116825260208201869052604082018590528316606082015260a060808201819052600090612399908301846126f0565b600081518084526020808501945080840160005b838110156127865781518752958201959082019060010161276a565b509495945050505050565b60018060a01b038616815284602082015283604082015260a0606082015260006127be60a0830185612756565b90508260808301529695505050505050565b808201808211156102ce576102ce612600565b6001600160a01b03868116825285166020820152604081018490526060810183905260a060808201819052600090612399908301846126f0565b6020808252601d908201527f5772617070656420746f6b656e207472616e73666572206661696c6564000000604082015260600190565b60006001820161286657612866612600565b5060010190565b60018060a01b0385168152836020820152826040820152608060608201526000610402608083018461275656fea264697066735822122079074069668c43878a601ae48c63f344b21bd087beb7a5b6dbcdedf3320691c764736f6c63430008140033",
  "devdoc": {
    "details": "Router implementation that allows to use two collateral tokens.",
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Constructor.",
        "params": {
          "_conditionalTokens": "Conditional Tokens contract.",
          "_wrapped1155Factory": "Wrapped1155Factory contract."
        }
      },
      "getTokenId(address,bytes32,bytes32,uint256)": {
        "params": {
          "collateralToken": "The address of the ERC20 used as collateral.",
          "conditionId": "The id of the condition used to redeem.",
          "indexSet": "Index set of the outcome collection to combine with the parent outcome collection.",
          "parentCollectionId": "The Conditional Tokens parent collection id."
        },
        "returns": {
          "_0": "The token id."
        }
      },
      "mergePositions(address,bool,uint256)": {
        "details": "The ERC20 associated to each outcome must be previously created on the wrapped1155Factory.Collateral tokens are withdrawn only if we are not merging a deep position (parentCollectionId is bytes32(0)).",
        "params": {
          "amount": "The amount of outcome tokens to merge.",
          "proposal": "The Proposal to merge.",
          "useFirstCollateral": "Wether to merge the first or second collateral."
        }
      },
      "mergeProposal(address,uint256)": {
        "details": "The ERC20 associated to each outcome must be previously created on the wrapped1155Factory.",
        "params": {
          "amount": "The amount to merge.",
          "proposal": "The futarchy proposal to merge."
        }
      },
      "redeemPositions(address,bool,uint256)": {
        "details": "The ERC20 associated to each outcome must be previously created on the wrapped1155Factory.Collateral tokens are withdrawn only if we are not redeeming a deep position (parentCollectionId is bytes32(0)).",
        "params": {
          "amount": "Amount to redeem.",
          "proposal": "The Proposal to redeem.",
          "useFirstCollateral": "Wether to redeem the first or second collateral."
        }
      },
      "redeemProposal(address,uint256,uint256)": {
        "details": "The ERC20 associated to each outcome must be previously created on the wrapped1155Factory.Collateral tokens are withdrawn only if we are not redeeming a deep position (parentCollectionId is bytes32(0)).",
        "params": {
          "amount1": "Amount to redeem for the first collateral.",
          "amount2": "Amount to redeem for the second collateral.",
          "proposal": "The Proposal to redeem."
        }
      },
      "splitPosition(address,bool,uint256)": {
        "details": "The ERC20 associated to each outcome must be previously created on the wrapped1155Factory.Collateral tokens are deposited only if we are not splitting a deep position (parentCollectionId is bytes32(0)).",
        "params": {
          "amount": "The amount of collateral to split.",
          "proposal": "The Proposal to split.",
          "useFirstCollateral": "Wether to split the first or second collateral."
        }
      },
      "splitProposal(address,uint256)": {
        "details": "The ERC20 associated to each outcome must be previously created on the wrapped1155Factory.",
        "params": {
          "amount": "The amount to split.",
          "proposal": "The futarchy proposal to split."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "stateVariables": {
      "conditionalTokens": {
        "details": "Conditional Tokens contract."
      },
      "wrapped1155Factory": {
        "details": "Wrapped1155Factory contract."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getTokenId(address,bytes32,bytes32,uint256)": {
        "notice": "Constructs a tokenId from a collateral token and an outcome collection."
      },
      "mergePositions(address,bool,uint256)": {
        "notice": "Merges positions and sends the collateral tokens to the user."
      },
      "mergeProposal(address,uint256)": {
        "notice": "Merges a position using two collateral tokens and sends the ERC20 outcome tokens back to the user."
      },
      "redeemPositions(address,bool,uint256)": {
        "notice": "Redeems positions and sends the collateral tokens to the user."
      },
      "redeemProposal(address,uint256,uint256)": {
        "notice": "Redeems positions and sends the collateral tokens to the user."
      },
      "splitPosition(address,bool,uint256)": {
        "notice": "Transfers the collateral to the Router, splits the position and sends the ERC20 outcome tokens back to the user."
      },
      "splitProposal(address,uint256)": {
        "notice": "Splits a position using two collateral tokens and sends the ERC20 outcome tokens back to the user."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}