{
  "address": "0x7EcE7743cc476b4343919B85B2C53AfF50ED3B15",
  "abi": [
    {
      "inputs": [],
      "name": "conditionId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "encodedQuestions",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getQuestionsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_marketName",
          "type": "string"
        },
        {
          "internalType": "string[]",
          "name": "_outcomes",
          "type": "string[]"
        },
        {
          "internalType": "uint256",
          "name": "_lowerBound",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_upperBound",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_conditionId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "_questionId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32[]",
          "name": "_questionsIds",
          "type": "bytes32[]"
        },
        {
          "internalType": "uint256",
          "name": "_templateId",
          "type": "uint256"
        },
        {
          "internalType": "string[]",
          "name": "_encodedQuestions",
          "type": "string[]"
        },
        {
          "internalType": "contract RealityProxy",
          "name": "_realityProxy",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialized",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lowerBound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numOutcomes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "outcomes",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "questionId",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "questionsIds",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "realityProxy",
      "outputs": [
        {
          "internalType": "contract RealityProxy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "resolve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "templateId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "upperBound",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xfd1c4605d0626cef22a33d330b324d84fe11e7b715a04a5f2f72e1a0e0a403e3",
  "receipt": {
    "to": null,
    "from": "0x4EDCA105188a0783Ab3A6f09c50567D1E3F8591D",
    "contractAddress": "0x7EcE7743cc476b4343919B85B2C53AfF50ED3B15",
    "transactionIndex": 2,
    "gasUsed": "596201",
    "logsBloom": "0x
    "blockHash": "0xfc8fb67fe5b910fe14bcab75089e6b3410ef48320e5ae43f776c8bbf70342b9b",
    "transactionHash": "0xfd1c4605d0626cef22a33d330b324d84fe11e7b715a04a5f2f72e1a0e0a403e3",
    "logs": [],
    "blockNumber": 34736223,
    "cumulativeGasUsed": "4624962",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "af633237a9a74929f08496dd20a36a87",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"conditionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"encodedQuestions\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getQuestionsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_marketName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"_outcomes\",\"type\":\"string[]\"},{\"internalType\":\"uint256\",\"name\":\"_lowerBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_upperBound\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_conditionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"_questionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"_questionsIds\",\"type\":\"bytes32[]\"},{\"internalType\":\"uint256\",\"name\":\"_templateId\",\"type\":\"uint256\"},{\"internalType\":\"string[]\",\"name\":\"_encodedQuestions\",\"type\":\"string[]\"},{\"internalType\":\"contract RealityProxy\",\"name\":\"_realityProxy\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialized\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lowerBound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numOutcomes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"outcomes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"questionId\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"questionsIds\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"realityProxy\",\"outputs\":[{\"internalType\":\"contract RealityProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"resolve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"templateId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"upperBound\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Market.sol\":\"Market\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"src/Interfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IERC20 {\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address owner) external returns (uint256);\\n}\\n\\n// https://github.com/RealityETH/reality-eth-monorepo/blob/main/packages/contracts/flat/RealityETH-3.0.sol\\ninterface IRealityETH_v3_0 {\\n    function askQuestionWithMinBond(\\n        uint256 template_id,\\n        string memory question,\\n        address arbitrator,\\n        uint32 timeout,\\n        uint32 opening_ts,\\n        uint256 nonce,\\n        uint256 min_bond\\n    ) external payable returns (bytes32);\\n\\n    function resultForOnceSettled(\\n        bytes32 question_id\\n    ) external view returns (bytes32);\\n\\n    function getContentHash(\\n        bytes32 question_id\\n    ) external view returns (bytes32);\\n\\n    function getTimeout(bytes32 question_id) external view returns (uint32);\\n\\n    function submitAnswer(bytes32 question_id, bytes32 answer, uint256 max_previous) external payable;\\n}\\n\\ninterface IConditionalTokens {\\n    function payoutNumerators(\\n        bytes32 conditionId,\\n        uint index\\n    ) external view returns (uint);\\n\\n    function payoutDenominator(\\n        bytes32 conditionId\\n    ) external view returns (uint);\\n\\n    function prepareCondition(\\n        address oracle,\\n        bytes32 questionId,\\n        uint outcomeSlotCount\\n    ) external;\\n\\n    function reportPayouts(\\n        bytes32 questionId,\\n        uint[] calldata payouts\\n    ) external;\\n\\n    function splitPosition(\\n        /*IERC20*/ address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata partition,\\n        uint amount\\n    ) external;\\n\\n    function mergePositions(\\n        /*IERC20*/ address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata partition,\\n        uint amount\\n    ) external;\\n\\n    function redeemPositions(\\n        /*IERC20*/ address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint[] calldata indexSets\\n    ) external;\\n\\n    function getConditionId(\\n        address oracle,\\n        bytes32 questionId,\\n        uint outcomeSlotCount\\n    ) external pure returns (bytes32);\\n\\n    function getCollectionId(\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint indexSet\\n    ) external view returns (bytes32);\\n\\n    function getPositionId(\\n        address collateralToken,\\n        bytes32 collectionId\\n    ) external pure returns (uint);\\n\\n    function getOutcomeSlotCount(\\n        bytes32 conditionId\\n    ) external view returns (uint);\\n\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external;\\n}\\n\\ninterface Wrapped1155Factory {\\n    function requireWrapped1155(\\n        /*IERC1155*/ address multiToken,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (/*Wrapped1155*/ IERC20);\\n\\n    function unwrap(\\n        /*IERC1155*/ address multiToken,\\n        uint256 tokenId,\\n        uint256 amount,\\n        address recipient,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x2bb1cbaf99ba61b2ae948841b4b23220836a999bc2b3593a1662b9ac2c4d5289\",\"license\":\"MIT\"},\"src/Market.sol\":{\"content\":\"/**\\n *  @authors: []\\n *  @reviewers: [@nvm1410]\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport \\\"./RealityProxy.sol\\\";\\n\\ncontract Market {\\n    bool public initialized;\\n\\n    string public marketName; // The name of the market\\n    string[] public outcomes; // The market outcomes, doesn't include the INVALID_RESULT outcome\\n    uint256 public lowerBound; // Lower bound, only used for scalar markets\\n    uint256 public upperBound; // Upper bound, only user for scalar markets\\n    bytes32 public conditionId; // Conditional Tokens conditionId\\n    bytes32 public questionId; // Conditional Tokens questionId\\n    bytes32[] public questionsIds; // Reality questions ids\\n    uint256 public templateId; // Reality templateId\\n    string[] public encodedQuestions; // Encoded questions parameters, needed to create and reopen a question\\n    RealityProxy public realityProxy; // Oracle contract\\n\\n    function initialize(\\n        string memory _marketName,\\n        string[] memory _outcomes,\\n        uint256 _lowerBound,\\n        uint256 _upperBound,\\n        bytes32 _conditionId,\\n        bytes32 _questionId,\\n        bytes32[] memory _questionsIds,\\n        uint256 _templateId,\\n        string[] memory _encodedQuestions,\\n        RealityProxy _realityProxy\\n    ) external {\\n        require(!initialized, \\\"Already initialized.\\\");\\n\\n        marketName = _marketName;\\n        outcomes = _outcomes;\\n        lowerBound = _lowerBound;\\n        upperBound = _upperBound;\\n        conditionId = _conditionId;\\n        questionId = _questionId;\\n        questionsIds = _questionsIds;\\n        templateId = _templateId;\\n        encodedQuestions = _encodedQuestions;\\n        realityProxy = _realityProxy;\\n\\n        initialized = true;\\n    }\\n\\n    function getQuestionsCount() external view returns (uint256) {\\n        return questionsIds.length;\\n    }\\n\\n    function numOutcomes() external view returns (uint256) {\\n        return outcomes.length;\\n    }\\n\\n    function resolve() external {\\n        realityProxy.resolve(this);\\n    }\\n}\\n\",\"keccak256\":\"0x306223329a3552dc7809258c9b46aeb09ec6482ccde4966a4014251e1f33c962\",\"license\":\"MIT\"},\"src/RealityProxy.sol\":{\"content\":\"/**\\n *  @authors: []\\n *  @reviewers: [@nvm1410]\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {IConditionalTokens, IRealityETH_v3_0} from \\\"./Interfaces.sol\\\";\\nimport \\\"./Market.sol\\\";\\n\\ncontract RealityProxy {\\n    IConditionalTokens public immutable conditionalTokens; // Conditional Tokens contract\\n    IRealityETH_v3_0 public immutable realitio; // Reality.eth contract\\n\\n    bytes32 constant INVALID_RESULT =\\n        0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff; // INVALID_RESULT reserved value\\n\\n    uint256 internal constant REALITY_UINT_TEMPLATE = 1; // Template for scalar and multi scalar markets\\n    uint256 internal constant REALITY_SINGLE_SELECT_TEMPLATE = 2; // Template for categorical markets\\n    uint256 internal constant REALITY_MULTI_SELECT_TEMPLATE = 3; // Template for multi categorical markets\\n\\n    constructor(\\n        IConditionalTokens _conditionalTokens,\\n        IRealityETH_v3_0 _realitio\\n    ) {\\n        conditionalTokens = _conditionalTokens;\\n        realitio = _realitio;\\n    }\\n\\n    function resolve(Market market) external {\\n        uint256 templateId = market.templateId();\\n\\n        if (templateId == REALITY_SINGLE_SELECT_TEMPLATE) {\\n            resolveCategoricalMarket(market);\\n            return;\\n        }\\n\\n        if (templateId == REALITY_MULTI_SELECT_TEMPLATE) {\\n            resolveMultiCategoricalMarket(market);\\n            return;\\n        }\\n\\n        if (market.getQuestionsCount() > 1) {\\n            resolveMultiScalarMarket(market);\\n            return;\\n        }\\n\\n        resolveScalarMarket(market);\\n    }\\n\\n    // @dev Resolves to invalid if the answer is invalid or the result is greater than the amount of outcomes\\n    function resolveCategoricalMarket(Market market) internal {\\n        bytes32 questionId = market.questionId();\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionId));\\n        uint256 numOutcomes = market.numOutcomes();\\n        uint256[] memory payouts = new uint256[](numOutcomes + 1);\\n\\n        if (answer == uint256(INVALID_RESULT) || answer >= numOutcomes) {\\n            // the last outcome is INVALID_RESULT\\n            payouts[numOutcomes] = 1;\\n        } else {\\n            payouts[answer] = 1;\\n        }\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n\\n    // @dev Resolves to invalid if the answer is invalid or all the results are zero\\n    function resolveMultiCategoricalMarket(Market market) internal {\\n        bytes32 questionId = market.questionId();\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionId));\\n        uint256 numOutcomes = market.numOutcomes();\\n        uint256[] memory payouts = new uint256[](numOutcomes + 1);\\n\\n        if (answer == uint256(INVALID_RESULT)) {\\n            // the last outcome is INVALID_RESULT\\n            payouts[numOutcomes] = 1;\\n        } else {\\n            bool allZeroes = true;\\n\\n            for (uint i = 0; i < numOutcomes; i++) {\\n                payouts[i] = (answer >> i) & 1;\\n                allZeroes = allZeroes && payouts[i] == 0;\\n            }\\n\\n            if (allZeroes) {\\n                // invalid result\\n                payouts[numOutcomes] = 1;\\n            }\\n        }\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n\\n    // @dev Resolves to invalid if the answer is invalid\\n    function resolveScalarMarket(Market market) internal {\\n        bytes32 questionId = market.questionId();\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionId));\\n        uint256[] memory payouts = new uint256[](3);\\n\\n        uint256 low = market.lowerBound();\\n        uint256 high = market.upperBound();\\n\\n        if (answer == uint256(INVALID_RESULT)) {\\n            // the last outcome is INVALID_RESULT\\n            payouts[2] = 1;\\n        } else if (answer <= low) {\\n            payouts[0] = 1;\\n        } else if (answer >= high) {\\n            payouts[1] = 1;\\n        } else {\\n            payouts[0] = high - answer;\\n            payouts[1] = answer - low;\\n        }\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n\\n    // @dev If any individual result is invalid then the corresponding payout element is set to 0\\n    // @dev If all the elements of the payout vector are 0 or all are invalid, the market resolves to invalid\\n    function resolveMultiScalarMarket(Market market) internal {\\n        uint256 numOutcomes = market.numOutcomes();\\n        uint256[] memory payouts = new uint256[](numOutcomes + 1);\\n\\n        bool allZeroesOrInvalid = true;\\n\\n        uint256 maxPayout = 2 ** (256 / 2) - 1;\\n\\n        for (uint i = 0; i < numOutcomes; i++) {\\n            payouts[i] = uint256(\\n                realitio.resultForOnceSettled(market.questionsIds(i))\\n            );\\n\\n            if (payouts[i] == uint256(INVALID_RESULT)) {\\n                payouts[i] = 0;\\n            } else if (payouts[i] > maxPayout) {\\n                payouts[i] = maxPayout;\\n            }\\n\\n            allZeroesOrInvalid = allZeroesOrInvalid && payouts[i] == 0;\\n        }\\n\\n        if (allZeroesOrInvalid) {\\n            // invalid result\\n            payouts[numOutcomes] = 1;\\n        }\\n\\n        conditionalTokens.reportPayouts(market.questionId(), payouts);\\n    }\\n}\\n\",\"keccak256\":\"0xba17113731798a0e70233bc5457da6102efe431d8f47175702891bdfe1807e97\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506109d2806100206000396000f3fe608060405234801561001057600080fd5b50600436106100d55760003560e01c80638767d64e116100875780638767d64e14610184578063957442741461018c578063a384d6ff1461019f578063b06a5c52146101a8578063b09ad8a0146101b1578063c2e112d2146101ba578063e6bfd26a146101c2578063eed2a147146101ca57600080fd5b806312e24aa4146100da578063158ef93e146100ef5780632810e1d614610111578063292503ba146101195780632ddc7de7146101395780632ff8d504146101505780637aa77f291461017b575b600080fd5b6100ed6100e83660046106fc565b6101dd565b005b6000546100fc9060ff1681565b60405190151581526020015b60405180910390f35b6100ed6102c5565b61012c6101273660046107ec565b610324565b6040516101089190610805565b61014260055481565b604051908152602001610108565b600a54610163906001600160a01b031681565b6040516001600160a01b039091168152602001610108565b61014260085481565b600254610142565b61014261019a3660046107ec565b6103d0565b61014260035481565b61014260065481565b61014260045481565b600754610142565b61012c6103f1565b61012c6101d83660046107ec565b6103fe565b60005460ff161561022b5760405162461bcd60e51b815260206004820152601460248201527320b63932b0b23c9034b734ba34b0b634bd32b21760611b604482015260640160405180910390fd5b60016102378b826108dc565b50885161024b9060029060208c019061040e565b5060038890556004879055600586905560068590558351610273906007906020870190610464565b506008839055815161028c90600990602085019061040e565b50600a80546001600160a01b0319166001600160a01b039290921691909117905550506000805460ff1916600117905550505050505050565b600a546040516355ea6c4760e01b81523060048201526001600160a01b03909116906355ea6c4790602401600060405180830381600087803b15801561030a57600080fd5b505af115801561031e573d6000803e3d6000fd5b50505050565b6009818154811061033457600080fd5b90600052602060002001600091509050805461034f90610853565b80601f016020809104026020016040519081016040528092919081815260200182805461037b90610853565b80156103c85780601f1061039d576101008083540402835291602001916103c8565b820191906000526020600020905b8154815290600101906020018083116103ab57829003601f168201915b505050505081565b600781815481106103e057600080fd5b600091825260209091200154905081565b6001805461034f90610853565b6002818154811061033457600080fd5b828054828255906000526020600020908101928215610454579160200282015b82811115610454578251829061044490826108dc565b509160200191906001019061042e565b506104609291506104ab565b5090565b82805482825590600052602060002090810192821561049f579160200282015b8281111561049f578251825591602001919060010190610484565b506104609291506104c8565b808211156104605760006104bf82826104dd565b506001016104ab565b5b8082111561046057600081556001016104c9565b5080546104e990610853565b6000825580601f106104f9575050565b601f01602090049060005260206000209081019061051791906104c8565b50565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156105595761055961051a565b604052919050565b600082601f83011261057257600080fd5b813567ffffffffffffffff81111561058c5761058c61051a565b61059f601f8201601f1916602001610530565b8181528460208386010111156105b457600080fd5b816020850160208301376000918101602001919091529392505050565b600067ffffffffffffffff8211156105eb576105eb61051a565b5060051b60200190565b600082601f83011261060657600080fd5b8135602061061b610616836105d1565b610530565b82815260059290921b8401810191818101908684111561063a57600080fd5b8286015b8481101561067a57803567ffffffffffffffff81111561065e5760008081fd5b61066c8986838b0101610561565b84525091830191830161063e565b509695505050505050565b600082601f83011261069657600080fd5b813560206106a6610616836105d1565b82815260059290921b840181019181810190868411156106c557600080fd5b8286015b8481101561067a57803583529183019183016106c9565b80356001600160a01b03811681146106f757600080fd5b919050565b6000806000806000806000806000806101408b8d03121561071c57600080fd5b8a3567ffffffffffffffff8082111561073457600080fd5b6107408e838f01610561565b9b5060208d013591508082111561075657600080fd5b6107628e838f016105f5565b9a5060408d0135995060608d0135985060808d0135975060a08d0135965060c08d013591508082111561079457600080fd5b6107a08e838f01610685565b955060e08d013594506101008d01359150808211156107be57600080fd5b506107cb8d828e016105f5565b9250506107db6101208c016106e0565b90509295989b9194979a5092959850565b6000602082840312156107fe57600080fd5b5035919050565b600060208083528351808285015260005b8181101561083257858101830151858201604001528201610816565b506000604082860101526040601f19601f8301168501019250505092915050565b600181811c9082168061086757607f821691505b60208210810361088757634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156108d757600081815260208120601f850160051c810160208610156108b45750805b601f850160051c820191505b818110156108d3578281556001016108c0565b5050505b505050565b815167ffffffffffffffff8111156108f6576108f661051a565b61090a816109048454610853565b8461088d565b602080601f83116001811461093f57600084156109275750858301515b600019600386901b1c1916600185901b1785556108d3565b600085815260208120601f198616915b8281101561096e5788860151825594840194600190910190840161094f565b508582101561098c5787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea264697066735822122092f6c3d38d3dcc2722347d26120a5f0613f99740a1cc3c98046edfc0a94d073764736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100d55760003560e01c80638767d64e116100875780638767d64e14610184578063957442741461018c578063a384d6ff1461019f578063b06a5c52146101a8578063b09ad8a0146101b1578063c2e112d2146101ba578063e6bfd26a146101c2578063eed2a147146101ca57600080fd5b806312e24aa4146100da578063158ef93e146100ef5780632810e1d614610111578063292503ba146101195780632ddc7de7146101395780632ff8d504146101505780637aa77f291461017b575b600080fd5b6100ed6100e83660046106fc565b6101dd565b005b6000546100fc9060ff1681565b60405190151581526020015b60405180910390f35b6100ed6102c5565b61012c6101273660046107ec565b610324565b6040516101089190610805565b61014260055481565b604051908152602001610108565b600a54610163906001600160a01b031681565b6040516001600160a01b039091168152602001610108565b61014260085481565b600254610142565b61014261019a3660046107ec565b6103d0565b61014260035481565b61014260065481565b61014260045481565b600754610142565b61012c6103f1565b61012c6101d83660046107ec565b6103fe565b60005460ff161561022b5760405162461bcd60e51b815260206004820152601460248201527320b63932b0b23c9034b734ba34b0b634bd32b21760611b604482015260640160405180910390fd5b60016102378b826108dc565b50885161024b9060029060208c019061040e565b5060038890556004879055600586905560068590558351610273906007906020870190610464565b506008839055815161028c90600990602085019061040e565b50600a80546001600160a01b0319166001600160a01b039290921691909117905550506000805460ff1916600117905550505050505050565b600a546040516355ea6c4760e01b81523060048201526001600160a01b03909116906355ea6c4790602401600060405180830381600087803b15801561030a57600080fd5b505af115801561031e573d6000803e3d6000fd5b50505050565b6009818154811061033457600080fd5b90600052602060002001600091509050805461034f90610853565b80601f016020809104026020016040519081016040528092919081815260200182805461037b90610853565b80156103c85780601f1061039d576101008083540402835291602001916103c8565b820191906000526020600020905b8154815290600101906020018083116103ab57829003601f168201915b505050505081565b600781815481106103e057600080fd5b600091825260209091200154905081565b6001805461034f90610853565b6002818154811061033457600080fd5b828054828255906000526020600020908101928215610454579160200282015b82811115610454578251829061044490826108dc565b509160200191906001019061042e565b506104609291506104ab565b5090565b82805482825590600052602060002090810192821561049f579160200282015b8281111561049f578251825591602001919060010190610484565b506104609291506104c8565b808211156104605760006104bf82826104dd565b506001016104ab565b5b8082111561046057600081556001016104c9565b5080546104e990610853565b6000825580601f106104f9575050565b601f01602090049060005260206000209081019061051791906104c8565b50565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff811182821017156105595761055961051a565b604052919050565b600082601f83011261057257600080fd5b813567ffffffffffffffff81111561058c5761058c61051a565b61059f601f8201601f1916602001610530565b8181528460208386010111156105b457600080fd5b816020850160208301376000918101602001919091529392505050565b600067ffffffffffffffff8211156105eb576105eb61051a565b5060051b60200190565b600082601f83011261060657600080fd5b8135602061061b610616836105d1565b610530565b82815260059290921b8401810191818101908684111561063a57600080fd5b8286015b8481101561067a57803567ffffffffffffffff81111561065e5760008081fd5b61066c8986838b0101610561565b84525091830191830161063e565b509695505050505050565b600082601f83011261069657600080fd5b813560206106a6610616836105d1565b82815260059290921b840181019181810190868411156106c557600080fd5b8286015b8481101561067a57803583529183019183016106c9565b80356001600160a01b03811681146106f757600080fd5b919050565b6000806000806000806000806000806101408b8d03121561071c57600080fd5b8a3567ffffffffffffffff8082111561073457600080fd5b6107408e838f01610561565b9b5060208d013591508082111561075657600080fd5b6107628e838f016105f5565b9a5060408d0135995060608d0135985060808d0135975060a08d0135965060c08d013591508082111561079457600080fd5b6107a08e838f01610685565b955060e08d013594506101008d01359150808211156107be57600080fd5b506107cb8d828e016105f5565b9250506107db6101208c016106e0565b90509295989b9194979a5092959850565b6000602082840312156107fe57600080fd5b5035919050565b600060208083528351808285015260005b8181101561083257858101830151858201604001528201610816565b506000604082860101526040601f19601f8301168501019250505092915050565b600181811c9082168061086757607f821691505b60208210810361088757634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156108d757600081815260208120601f850160051c810160208610156108b45750805b601f850160051c820191505b818110156108d3578281556001016108c0565b5050505b505050565b815167ffffffffffffffff8111156108f6576108f661051a565b61090a816109048454610853565b8461088d565b602080601f83116001811461093f57600084156109275750858301515b600019600386901b1c1916600185901b1785556108d3565b600085815260208120601f198616915b8281101561096e5788860151825594840194600190910190840161094f565b508582101561098c5787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea264697066735822122092f6c3d38d3dcc2722347d26120a5f0613f99740a1cc3c98046edfc0a94d073764736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1673,
        "contract": "src/Market.sol:Market",
        "label": "initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1675,
        "contract": "src/Market.sol:Market",
        "label": "marketName",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 1678,
        "contract": "src/Market.sol:Market",
        "label": "outcomes",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 1680,
        "contract": "src/Market.sol:Market",
        "label": "lowerBound",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 1682,
        "contract": "src/Market.sol:Market",
        "label": "upperBound",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1684,
        "contract": "src/Market.sol:Market",
        "label": "conditionId",
        "offset": 0,
        "slot": "5",
        "type": "t_bytes32"
      },
      {
        "astId": 1686,
        "contract": "src/Market.sol:Market",
        "label": "questionId",
        "offset": 0,
        "slot": "6",
        "type": "t_bytes32"
      },
      {
        "astId": 1689,
        "contract": "src/Market.sol:Market",
        "label": "questionsIds",
        "offset": 0,
        "slot": "7",
        "type": "t_array(t_bytes32)dyn_storage"
      },
      {
        "astId": 1691,
        "contract": "src/Market.sol:Market",
        "label": "templateId",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 1694,
        "contract": "src/Market.sol:Market",
        "label": "encodedQuestions",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 1697,
        "contract": "src/Market.sol:Market",
        "label": "realityProxy",
        "offset": 0,
        "slot": "10",
        "type": "t_contract(RealityProxy)3775"
      }
    ],
    "types": {
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(RealityProxy)3775": {
        "encoding": "inplace",
        "label": "contract RealityProxy",
        "numberOfBytes": "20"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}