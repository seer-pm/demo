{
  "address": "0xB29D0C9875D93483891c0645fdC13D665a4d2D70",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract ERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "contract SeerCredits",
          "name": "_seerCredits",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "canSpendCredits",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governor",
          "type": "address"
        }
      ],
      "name": "changeGovernor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "contract ERC20",
          "name": "outputToken",
          "type": "address"
        }
      ],
      "name": "execute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "seerCredits",
      "outputs": [
        {
          "internalType": "contract SeerCredits",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_contract",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_whitelisted",
          "type": "bool"
        }
      ],
      "name": "setWhitelistedContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ERC20",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "sweepTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract ERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "whitelistedContracts",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xf4eec13292dfc56d837282eb3cd505519f5a768ce41ab52ae99479e01ad590fb",
  "receipt": {
    "to": null,
    "from": "0x4EDCA105188a0783Ab3A6f09c50567D1E3F8591D",
    "contractAddress": "0xB29D0C9875D93483891c0645fdC13D665a4d2D70",
    "transactionIndex": 7,
    "gasUsed": "1309615",
    "logsBloom": "0x
    "blockHash": "0xc614bc2759c6db47f2f39ce697aeff174d9e02ce175d8850cb6c820e77cb3a00",
    "transactionHash": "0xf4eec13292dfc56d837282eb3cd505519f5a768ce41ab52ae99479e01ad590fb",
    "logs": [],
    "blockNumber": 42439736,
    "cumulativeGasUsed": "2580237",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xaf204776c7245bf4147c2612bf6e5972ee483701",
    "0xEDd48e43EBd4E2b31238a5CBA8FD548fC051aCAF"
  ],
  "numDeployments": 3,
  "solcInputHash": "7693ac2519ab88153958ebed4942cb22",
  "metadata": "{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"contract SeerCredits\",\"name\":\"_seerCredits\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"canSpendCredits\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governor\",\"type\":\"address\"}],\"name\":\"changeGovernor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"contract ERC20\",\"name\":\"outputToken\",\"type\":\"address\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"seerCredits\",\"outputs\":[{\"internalType\":\"contract SeerCredits\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_contract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_whitelisted\",\"type\":\"bool\"}],\"name\":\"setWhitelistedContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"sweepTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract ERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"whitelistedContracts\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The contract receives an address `to` (expected to be a DEX router) and `data` to execute a swapThe swap data must be encoded to send tokens to `msg.sender`CreditsManager pays for the swap on behalf of the user by deducting credits from their balance\",\"kind\":\"dev\",\"methods\":{\"canSpendCredits(address,uint256)\":{\"details\":\"Check if a user can spend a specific amount of credits.\",\"params\":{\"_amount\":\"The amount of credits to check.\",\"_user\":\"The address of the user to check.\"},\"returns\":{\"_0\":\"True if the user can spend the specified amount of credits.\"}},\"changeGovernor(address)\":{\"details\":\"Change the governor of the contract.\",\"params\":{\"_governor\":\"The address of the new governor. TRUSTED\"}},\"constructor\":{\"details\":\"Constructor.\",\"params\":{\"_seerCredits\":\"The SeerCredits token contract. TRUSTED\",\"_token\":\"The ERC20 token used to swap from (e.g., sDAI on Gnosis). TRUSTED\"}},\"execute(address,bytes,uint256,address)\":{\"details\":\"Execute a swap through a DEX router (Uniswap, Swapr, etc.). CreditsManager pays for the swap.\",\"params\":{\"amount\":\"The amount of credits to spend (tokens approved to the DEX router).\",\"data\":\"The encoded swap call data. Must be encoded to send output tokens to msg.sender.\",\"outputToken\":\"The token that the user is buying (must have increased balance after swap).\",\"to\":\"The DEX router address (must be whitelisted).\"}},\"setWhitelistedContract(address,bool)\":{\"details\":\"Add or remove a contract from the whitelist.\",\"params\":{\"_contract\":\"The address of the contract to modify.\",\"_whitelisted\":\"True to add to whitelist, false to remove.\"}},\"sweepTokens(address)\":{\"details\":\"Sweep all tokens from the contract to the governor.\",\"params\":{\"_token\":\"The token to sweep. If address(0), uses the default token.\"}}},\"title\":\"CreditsManager\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"execute(address,bytes,uint256,address)\":{\"notice\":\"This function acts as a proxy - CreditsManager pays for the swap by deducting credits from user's balance.\"}},\"notice\":\"This contract acts as a proxy to DEXs (Uniswap, Swapr, etc.) where users can spend trading credits\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/trading-credits/CreditsManager.sol\":\"CreditsManager\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"solmate/src/tokens/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Modern and gas efficient ERC20 + EIP-2612 implementation.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/tokens/ERC20.sol)\\n/// @author Modified from Uniswap (https://github.com/Uniswap/uniswap-v2-core/blob/master/contracts/UniswapV2ERC20.sol)\\n/// @dev Do not manually set balances without updating totalSupply, as the sum of all user balances must not exceed it.\\nabstract contract ERC20 {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            METADATA STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    string public name;\\n\\n    string public symbol;\\n\\n    uint8 public immutable decimals;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                              ERC20 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 public totalSupply;\\n\\n    mapping(address => uint256) public balanceOf;\\n\\n    mapping(address => mapping(address => uint256)) public allowance;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            EIP-2612 STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal immutable INITIAL_CHAIN_ID;\\n\\n    bytes32 internal immutable INITIAL_DOMAIN_SEPARATOR;\\n\\n    mapping(address => uint256) public nonces;\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(\\n        string memory _name,\\n        string memory _symbol,\\n        uint8 _decimals\\n    ) {\\n        name = _name;\\n        symbol = _symbol;\\n        decimals = _decimals;\\n\\n        INITIAL_CHAIN_ID = block.chainid;\\n        INITIAL_DOMAIN_SEPARATOR = computeDomainSeparator();\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               ERC20 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function approve(address spender, uint256 amount) public virtual returns (bool) {\\n        allowance[msg.sender][spender] = amount;\\n\\n        emit Approval(msg.sender, spender, amount);\\n\\n        return true;\\n    }\\n\\n    function transfer(address to, uint256 amount) public virtual returns (bool) {\\n        balanceOf[msg.sender] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(msg.sender, to, amount);\\n\\n        return true;\\n    }\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual returns (bool) {\\n        uint256 allowed = allowance[from][msg.sender]; // Saves gas for limited approvals.\\n\\n        if (allowed != type(uint256).max) allowance[from][msg.sender] = allowed - amount;\\n\\n        balanceOf[from] -= amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        return true;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             EIP-2612 LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        require(deadline >= block.timestamp, \\\"PERMIT_DEADLINE_EXPIRED\\\");\\n\\n        // Unchecked because the only math done is incrementing\\n        // the owner's nonce which cannot realistically overflow.\\n        unchecked {\\n            address recoveredAddress = ecrecover(\\n                keccak256(\\n                    abi.encodePacked(\\n                        \\\"\\\\x19\\\\x01\\\",\\n                        DOMAIN_SEPARATOR(),\\n                        keccak256(\\n                            abi.encode(\\n                                keccak256(\\n                                    \\\"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\\\"\\n                                ),\\n                                owner,\\n                                spender,\\n                                value,\\n                                nonces[owner]++,\\n                                deadline\\n                            )\\n                        )\\n                    )\\n                ),\\n                v,\\n                r,\\n                s\\n            );\\n\\n            require(recoveredAddress != address(0) && recoveredAddress == owner, \\\"INVALID_SIGNER\\\");\\n\\n            allowance[recoveredAddress][spender] = value;\\n        }\\n\\n        emit Approval(owner, spender, value);\\n    }\\n\\n    function DOMAIN_SEPARATOR() public view virtual returns (bytes32) {\\n        return block.chainid == INITIAL_CHAIN_ID ? INITIAL_DOMAIN_SEPARATOR : computeDomainSeparator();\\n    }\\n\\n    function computeDomainSeparator() internal view virtual returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"),\\n                    keccak256(bytes(name)),\\n                    keccak256(\\\"1\\\"),\\n                    block.chainid,\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        INTERNAL MINT/BURN LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function _mint(address to, uint256 amount) internal virtual {\\n        totalSupply += amount;\\n\\n        // Cannot overflow because the sum of all user\\n        // balances can't exceed the max uint256 value.\\n        unchecked {\\n            balanceOf[to] += amount;\\n        }\\n\\n        emit Transfer(address(0), to, amount);\\n    }\\n\\n    function _burn(address from, uint256 amount) internal virtual {\\n        balanceOf[from] -= amount;\\n\\n        // Cannot underflow because a user's balance\\n        // will never be larger than the total supply.\\n        unchecked {\\n            totalSupply -= amount;\\n        }\\n\\n        emit Transfer(from, address(0), amount);\\n    }\\n}\\n\",\"keccak256\":\"0xcdfd8db76b2a3415620e4d18cc5545f3d50de792dbf2c3dd5adb40cbe6f94b10\",\"license\":\"AGPL-3.0-only\"},\"src/trading-credits/CreditsManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\nimport {ERC20} from \\\"solmate/src/tokens/ERC20.sol\\\";\\nimport \\\"./SeerCredits.sol\\\";\\n\\n/// @title CreditsManager\\n/// @notice This contract acts as a proxy to DEXs (Uniswap, Swapr, etc.) where users can spend trading credits\\n/// @dev The contract receives an address `to` (expected to be a DEX router) and `data` to execute a swap\\n/// @dev The swap data must be encoded to send tokens to `msg.sender`\\n/// @dev CreditsManager pays for the swap on behalf of the user by deducting credits from their balance\\ncontract CreditsManager {\\n    address public governor; // The address that can make governance changes to the parameters of the contract.\\n    ERC20 public token; // The token used to swap from (e.g., sDAI on Gnosis).\\n    SeerCredits public seerCredits; // The SeerCredits token representing trading credits.\\n    mapping(address => bool) public whitelistedContracts; // Whitelist of contracts that can be called.\\n\\n    modifier onlyGovernor() {\\n        require(msg.sender == governor, \\\"The caller must be the governor\\\");\\n        _;\\n    }\\n\\n    /// @dev Constructor.\\n    /// @param _token The ERC20 token used to swap from (e.g., sDAI on Gnosis). TRUSTED\\n    /// @param _seerCredits The SeerCredits token contract. TRUSTED\\n    constructor(ERC20 _token, SeerCredits _seerCredits) {\\n        governor = msg.sender;\\n        token = _token;\\n        seerCredits = _seerCredits;\\n    }\\n\\n    /// @dev Change the governor of the contract.\\n    /// @param _governor The address of the new governor. TRUSTED\\n    function changeGovernor(address _governor) external onlyGovernor {\\n        governor = _governor;\\n    }\\n\\n\\n    /// @dev Add or remove a contract from the whitelist.\\n    /// @param _contract The address of the contract to modify.\\n    /// @param _whitelisted True to add to whitelist, false to remove.\\n    function setWhitelistedContract(address _contract, bool _whitelisted) external onlyGovernor {\\n        whitelistedContracts[_contract] = _whitelisted;\\n    }\\n\\n\\n    /// @dev Check if a user can spend a specific amount of credits.\\n    /// @param _user The address of the user to check.\\n    /// @param _amount The amount of credits to check.\\n    /// @return True if the user can spend the specified amount of credits.\\n    function canSpendCredits(address _user, uint256 _amount) external view returns (bool) {\\n        // Check if user has enough SeerCredits\\n        if (seerCredits.balanceOf(_user) < _amount) {\\n            return false;\\n        }\\n\\n        // Check if contract has enough token balance\\n        if (token.balanceOf(address(this)) < _amount) {\\n            return false;\\n        }\\n\\n        return true;\\n    }\\n\\n    /// @dev Sweep all tokens from the contract to the governor.\\n    /// @param _token The token to sweep. If address(0), uses the default token.\\n    function sweepTokens(ERC20 _token) external onlyGovernor {\\n        ERC20 tokenToSweep = _token == ERC20(address(0)) ? token : _token;\\n        uint256 balance = tokenToSweep.balanceOf(address(this));\\n        require(balance > 0, \\\"No tokens to sweep\\\");\\n        require(tokenToSweep.transfer(governor, balance), \\\"Token transfer failed\\\");\\n    }\\n\\n    /// @dev Execute a swap through a DEX router (Uniswap, Swapr, etc.). CreditsManager pays for the swap.\\n    /// @param to The DEX router address (must be whitelisted).\\n    /// @param data The encoded swap call data. Must be encoded to send output tokens to msg.sender.\\n    /// @param amount The amount of credits to spend (tokens approved to the DEX router).\\n    /// @param outputToken The token that the user is buying (must have increased balance after swap).\\n    /// @notice This function acts as a proxy - CreditsManager pays for the swap by deducting credits from user's balance.\\n    function execute(address to, bytes calldata data, uint256 amount, ERC20 outputToken) external {\\n        require(whitelistedContracts[to], \\\"Contract not whitelisted\\\");\\n        require(seerCredits.balanceOf(msg.sender) >= amount, \\\"Insufficient credits balance\\\");\\n\\n        // Check user's balance of output token before the swap\\n        uint256 balanceBefore = outputToken.balanceOf(msg.sender);\\n\\n        // CreditsManager approves tokens to the DEX router (e.g., Uniswap, Swapr)\\n        require(token.approve(to, amount), \\\"Token approval failed\\\");\\n\\n        // Burn SeerCredits from user's balance - CreditsManager is paying for the swap\\n        seerCredits.burn(msg.sender, amount);\\n\\n        // Execute the swap call to the DEX router\\n        // The swap data must be encoded to send output tokens to msg.sender\\n        (bool success,) = to.call(data);\\n        require(success, \\\"Call failed\\\");\\n\\n        // Verify that the user received tokens (balance increased)\\n        // This is a security measure to verify that the swap had msg.sender as recipient,\\n        // otherwise the swap recipient would be CreditsManager itself\\n        uint256 balanceAfter = outputToken.balanceOf(msg.sender);\\n        require(balanceAfter > balanceBefore, \\\"No tokens received from swap\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x49a2b49182bf0b9355a010c261fac863f555bbeabed35c53dc46a96a51851905\",\"license\":\"MIT\"},\"src/trading-credits/SeerCredits.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.28;\\n\\nimport {ERC20} from \\\"solmate/src/tokens/ERC20.sol\\\";\\n\\n/// @title SeerCredits\\n/// @notice ERC20 token representing trading credits that users can spend on DEX swaps\\ncontract SeerCredits is ERC20 {\\n    address public governor; // The address that can make governance changes to the parameters of the contract.\\n    address public creditsManager; // The address that can burn tokens (CreditsManager contract).\\n    mapping(address => bool) public isAdmin; // Mapping to track admin addresses\\n\\n    modifier onlyGovernor() {\\n        require(msg.sender == governor, \\\"Only governor can call this function\\\");\\n        _;\\n    }\\n\\n    modifier onlyCreditsManager() {\\n        require(msg.sender == creditsManager, \\\"Only credits manager can call this function\\\");\\n        _;\\n    }\\n\\n    modifier onlyAdmin() {\\n        require(isAdmin[msg.sender], \\\"Only admin can call this function\\\");\\n        _;\\n    }\\n\\n    /// @dev Constructor.\\n    /// @param _governor The trusted governor of the contract.\\n    constructor(address _governor) ERC20(\\\"Seer Credits\\\", \\\"SEER_CREDITS\\\", 18) {\\n        governor = _governor;\\n        creditsManager = _governor;\\n        isAdmin[_governor] = true;\\n    }\\n\\n    /// @dev Change the governor of the contract.\\n    /// @param _governor The address of the new governor.\\n    function changeGovernor(address _governor) external onlyGovernor {\\n        require(_governor != address(0), \\\"Invalid governor address\\\");\\n        governor = _governor;\\n    }\\n\\n    /// @dev Change the credits manager of the contract.\\n    /// @param _creditsManager The address of the new credits manager.\\n    function changeCreditsManager(address _creditsManager) external onlyGovernor {\\n        creditsManager = _creditsManager;\\n    }\\n\\n    /// @dev Set admin status for an address.\\n    /// @param _admin The address to set admin status for.\\n    /// @param _isAdmin Boolean indicating whether the address should be an admin.\\n    function setAdmin(address _admin, bool _isAdmin) external onlyGovernor {\\n        require(_admin != address(0), \\\"Invalid admin address\\\");\\n        isAdmin[_admin] = _isAdmin;\\n    }\\n\\n    function mint(address to, uint256 amount) external onlyGovernor {\\n        _mint(to, amount);\\n    }\\n\\n    function burn(address from, uint256 amount) external onlyCreditsManager {\\n        _burn(from, amount);\\n    }\\n\\n\\n    /// @dev Set credits balance for multiple addresses by minting or burning as needed.\\n    /// @param _addresses The list of addresses to set credits balance for.\\n    /// @param _amounts The list of amounts corresponding to each address.\\n    function setCreditsBalance(address[] memory _addresses, uint256[] memory _amounts) external onlyAdmin {\\n        require(_addresses.length == _amounts.length, \\\"Arrays length mismatch\\\");\\n        for (uint256 i; i < _addresses.length; ++i) {\\n            uint256 currentBalance = this.balanceOf(_addresses[i]);\\n            uint256 targetBalance = _amounts[i];\\n            \\n            if (currentBalance > targetBalance) {\\n                // Burn excess tokens\\n                uint256 burnAmount = currentBalance - targetBalance;\\n                _burn(_addresses[i], burnAmount);\\n            } else if (targetBalance > currentBalance) {\\n                // Mint additional tokens\\n                uint256 mintAmount = targetBalance - currentBalance;\\n                _mint(_addresses[i], mintAmount);\\n            }\\n            // If currentBalance == targetBalance, do nothing\\n        }\\n    }\\n\\n    /// @dev Add credits balance to multiple addresses by minting tokens.\\n    /// @param _addresses The list of addresses to add credits balance to.\\n    /// @param _amounts The list of amounts to add to each address.\\n    function addCreditsBalance(address[] memory _addresses, uint256[] memory _amounts) external onlyAdmin {\\n        require(_addresses.length == _amounts.length, \\\"Arrays length mismatch\\\");\\n        for (uint256 i; i < _addresses.length; ++i) {\\n            if (_amounts[i] > 0) {\\n                _mint(_addresses[i], _amounts[i]);\\n            }\\n        }\\n    }\\n}\",\"keccak256\":\"0xbbf9e34771ae3c29750998d870dbb0f0c71b0972057b78c85f3f523de50ded25\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161176f38038061176f833981810160405281019061003291906101ae565b336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050506101ee565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061012b82610100565b9050919050565b600061013d82610120565b9050919050565b61014d81610132565b811461015857600080fd5b50565b60008151905061016a81610144565b92915050565b600061017b82610120565b9050919050565b61018b81610170565b811461019657600080fd5b50565b6000815190506101a881610182565b92915050565b600080604083850312156101c5576101c46100fb565b5b60006101d38582860161015b565b92505060206101e485828601610199565b9150509250929050565b611572806101fd6000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063a6ec9ea511610066578063a6ec9ea514610132578063c421449214610150578063e4c0aaf41461016c578063f5f6d3af14610188578063fc0c546a146101a457610093565b80630c340a241461009857806313a93def146100b6578063391feebb146100e657806370ec9d0814610116575b600080fd5b6100a06101c2565b6040516100ad9190610d13565b60405180910390f35b6100d060048036038101906100cb9190610d9a565b6101e6565b6040516100dd9190610df5565b60405180910390f35b61010060048036038101906100fb9190610e10565b61034b565b60405161010d9190610df5565b60405180910390f35b610130600480360381019061012b9190610ee0565b61036b565b005b61013a61083a565b6040516101479190610fc7565b60405180910390f35b61016a6004803603810190610165919061100e565b610860565b005b61018660048036038101906101819190610e10565b610949565b005b6101a2600480360381019061019d919061104e565b610a1a565b005b6101ac610cac565b6040516101b9919061109c565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600081600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b81526004016102449190610d13565b602060405180830381865afa158015610261573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028591906110cc565b10156102945760009050610345565b81600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016102f09190610d13565b602060405180830381865afa15801561030d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033191906110cc565b10156103405760009050610345565b600190505b92915050565b60036020528060005260406000206000915054906101000a900460ff1681565b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166103f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ee90611156565b60405180910390fd5b81600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016104539190610d13565b602060405180830381865afa158015610470573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049491906110cc565b10156104d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104cc906111c2565b60405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016105109190610d13565b602060405180830381865afa15801561052d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055191906110cc565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b387856040518363ffffffff1660e01b81526004016105b09291906111f1565b6020604051808303816000875af11580156105cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f3919061122f565b610632576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610629906112a8565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac33856040518363ffffffff1660e01b815260040161068f9291906111f1565b600060405180830381600087803b1580156106a957600080fd5b505af11580156106bd573d6000803e3d6000fd5b5050505060008673ffffffffffffffffffffffffffffffffffffffff1686866040516106ea929190611307565b6000604051808303816000865af19150503d8060008114610727576040519150601f19603f3d011682016040523d82523d6000602084013e61072c565b606091505b5050905080610770576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107679061136c565b60405180910390fd5b60008373ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016107ab9190610d13565b602060405180830381865afa1580156107c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ec91906110cc565b9050828111610830576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610827906113d8565b60405180910390fd5b5050505050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e590611444565b60405180910390fd5b80600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146109d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ce90611444565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610aa8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9f90611444565b60405180910390fd5b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610ae35781610b07565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff165b905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610b449190610d13565b602060405180830381865afa158015610b61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8591906110cc565b905060008111610bca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc1906114b0565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401610c259291906111f1565b6020604051808303816000875af1158015610c44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c68919061122f565b610ca7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9e9061151c565b60405180910390fd5b505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610cfd82610cd2565b9050919050565b610d0d81610cf2565b82525050565b6000602082019050610d286000830184610d04565b92915050565b600080fd5b600080fd5b610d4181610cf2565b8114610d4c57600080fd5b50565b600081359050610d5e81610d38565b92915050565b6000819050919050565b610d7781610d64565b8114610d8257600080fd5b50565b600081359050610d9481610d6e565b92915050565b60008060408385031215610db157610db0610d2e565b5b6000610dbf85828601610d4f565b9250506020610dd085828601610d85565b9150509250929050565b60008115159050919050565b610def81610dda565b82525050565b6000602082019050610e0a6000830184610de6565b92915050565b600060208284031215610e2657610e25610d2e565b5b6000610e3484828501610d4f565b91505092915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610e6257610e61610e3d565b5b8235905067ffffffffffffffff811115610e7f57610e7e610e42565b5b602083019150836001820283011115610e9b57610e9a610e47565b5b9250929050565b6000610ead82610cf2565b9050919050565b610ebd81610ea2565b8114610ec857600080fd5b50565b600081359050610eda81610eb4565b92915050565b600080600080600060808688031215610efc57610efb610d2e565b5b6000610f0a88828901610d4f565b955050602086013567ffffffffffffffff811115610f2b57610f2a610d33565b5b610f3788828901610e4c565b94509450506040610f4a88828901610d85565b9250506060610f5b88828901610ecb565b9150509295509295909350565b6000819050919050565b6000610f8d610f88610f8384610cd2565b610f68565b610cd2565b9050919050565b6000610f9f82610f72565b9050919050565b6000610fb182610f94565b9050919050565b610fc181610fa6565b82525050565b6000602082019050610fdc6000830184610fb8565b92915050565b610feb81610dda565b8114610ff657600080fd5b50565b60008135905061100881610fe2565b92915050565b6000806040838503121561102557611024610d2e565b5b600061103385828601610d4f565b925050602061104485828601610ff9565b9150509250929050565b60006020828403121561106457611063610d2e565b5b600061107284828501610ecb565b91505092915050565b600061108682610f94565b9050919050565b6110968161107b565b82525050565b60006020820190506110b1600083018461108d565b92915050565b6000815190506110c681610d6e565b92915050565b6000602082840312156110e2576110e1610d2e565b5b60006110f0848285016110b7565b91505092915050565b600082825260208201905092915050565b7f436f6e7472616374206e6f742077686974656c69737465640000000000000000600082015250565b60006111406018836110f9565b915061114b8261110a565b602082019050919050565b6000602082019050818103600083015261116f81611133565b9050919050565b7f496e73756666696369656e7420637265646974732062616c616e636500000000600082015250565b60006111ac601c836110f9565b91506111b782611176565b602082019050919050565b600060208201905081810360008301526111db8161119f565b9050919050565b6111eb81610d64565b82525050565b60006040820190506112066000830185610d04565b61121360208301846111e2565b9392505050565b60008151905061122981610fe2565b92915050565b60006020828403121561124557611244610d2e565b5b60006112538482850161121a565b91505092915050565b7f546f6b656e20617070726f76616c206661696c65640000000000000000000000600082015250565b60006112926015836110f9565b915061129d8261125c565b602082019050919050565b600060208201905081810360008301526112c181611285565b9050919050565b600081905092915050565b82818337600083830152505050565b60006112ee83856112c8565b93506112fb8385846112d3565b82840190509392505050565b60006113148284866112e2565b91508190509392505050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000611356600b836110f9565b915061136182611320565b602082019050919050565b6000602082019050818103600083015261138581611349565b9050919050565b7f4e6f20746f6b656e732072656365697665642066726f6d207377617000000000600082015250565b60006113c2601c836110f9565b91506113cd8261138c565b602082019050919050565b600060208201905081810360008301526113f1816113b5565b9050919050565b7f5468652063616c6c6572206d7573742062652074686520676f7665726e6f7200600082015250565b600061142e601f836110f9565b9150611439826113f8565b602082019050919050565b6000602082019050818103600083015261145d81611421565b9050919050565b7f4e6f20746f6b656e7320746f2073776565700000000000000000000000000000600082015250565b600061149a6012836110f9565b91506114a582611464565b602082019050919050565b600060208201905081810360008301526114c98161148d565b9050919050565b7f546f6b656e207472616e73666572206661696c65640000000000000000000000600082015250565b60006115066015836110f9565b9150611511826114d0565b602082019050919050565b60006020820190508181036000830152611535816114f9565b905091905056fea2646970667358221220f409874a62e38ccb17baffe05d64e89f0fa6fd6243b7a4baf89b287a7cb5e17b64736f6c634300081c0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100935760003560e01c8063a6ec9ea511610066578063a6ec9ea514610132578063c421449214610150578063e4c0aaf41461016c578063f5f6d3af14610188578063fc0c546a146101a457610093565b80630c340a241461009857806313a93def146100b6578063391feebb146100e657806370ec9d0814610116575b600080fd5b6100a06101c2565b6040516100ad9190610d13565b60405180910390f35b6100d060048036038101906100cb9190610d9a565b6101e6565b6040516100dd9190610df5565b60405180910390f35b61010060048036038101906100fb9190610e10565b61034b565b60405161010d9190610df5565b60405180910390f35b610130600480360381019061012b9190610ee0565b61036b565b005b61013a61083a565b6040516101479190610fc7565b60405180910390f35b61016a6004803603810190610165919061100e565b610860565b005b61018660048036038101906101819190610e10565b610949565b005b6101a2600480360381019061019d919061104e565b610a1a565b005b6101ac610cac565b6040516101b9919061109c565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600081600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231856040518263ffffffff1660e01b81526004016102449190610d13565b602060405180830381865afa158015610261573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028591906110cc565b10156102945760009050610345565b81600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b81526004016102f09190610d13565b602060405180830381865afa15801561030d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033191906110cc565b10156103405760009050610345565b600190505b92915050565b60036020528060005260406000206000915054906101000a900460ff1681565b600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166103f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ee90611156565b60405180910390fd5b81600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016104539190610d13565b602060405180830381865afa158015610470573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049491906110cc565b10156104d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104cc906111c2565b60405180910390fd5b60008173ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016105109190610d13565b602060405180830381865afa15801561052d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061055191906110cc565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663095ea7b387856040518363ffffffff1660e01b81526004016105b09291906111f1565b6020604051808303816000875af11580156105cf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105f3919061122f565b610632576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610629906112a8565b60405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dc29fac33856040518363ffffffff1660e01b815260040161068f9291906111f1565b600060405180830381600087803b1580156106a957600080fd5b505af11580156106bd573d6000803e3d6000fd5b5050505060008673ffffffffffffffffffffffffffffffffffffffff1686866040516106ea929190611307565b6000604051808303816000865af19150503d8060008114610727576040519150601f19603f3d011682016040523d82523d6000602084013e61072c565b606091505b5050905080610770576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107679061136c565b60405180910390fd5b60008373ffffffffffffffffffffffffffffffffffffffff166370a08231336040518263ffffffff1660e01b81526004016107ab9190610d13565b602060405180830381865afa1580156107c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107ec91906110cc565b9050828111610830576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610827906113d8565b60405180910390fd5b5050505050505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146108ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e590611444565b60405180910390fd5b80600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146109d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ce90611444565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610aa8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a9f90611444565b60405180910390fd5b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614610ae35781610b07565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff165b905060008173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610b449190610d13565b602060405180830381865afa158015610b61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8591906110cc565b905060008111610bca576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc1906114b0565b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff16836040518363ffffffff1660e01b8152600401610c259291906111f1565b6020604051808303816000875af1158015610c44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c68919061122f565b610ca7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c9e9061151c565b60405180910390fd5b505050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610cfd82610cd2565b9050919050565b610d0d81610cf2565b82525050565b6000602082019050610d286000830184610d04565b92915050565b600080fd5b600080fd5b610d4181610cf2565b8114610d4c57600080fd5b50565b600081359050610d5e81610d38565b92915050565b6000819050919050565b610d7781610d64565b8114610d8257600080fd5b50565b600081359050610d9481610d6e565b92915050565b60008060408385031215610db157610db0610d2e565b5b6000610dbf85828601610d4f565b9250506020610dd085828601610d85565b9150509250929050565b60008115159050919050565b610def81610dda565b82525050565b6000602082019050610e0a6000830184610de6565b92915050565b600060208284031215610e2657610e25610d2e565b5b6000610e3484828501610d4f565b91505092915050565b600080fd5b600080fd5b600080fd5b60008083601f840112610e6257610e61610e3d565b5b8235905067ffffffffffffffff811115610e7f57610e7e610e42565b5b602083019150836001820283011115610e9b57610e9a610e47565b5b9250929050565b6000610ead82610cf2565b9050919050565b610ebd81610ea2565b8114610ec857600080fd5b50565b600081359050610eda81610eb4565b92915050565b600080600080600060808688031215610efc57610efb610d2e565b5b6000610f0a88828901610d4f565b955050602086013567ffffffffffffffff811115610f2b57610f2a610d33565b5b610f3788828901610e4c565b94509450506040610f4a88828901610d85565b9250506060610f5b88828901610ecb565b9150509295509295909350565b6000819050919050565b6000610f8d610f88610f8384610cd2565b610f68565b610cd2565b9050919050565b6000610f9f82610f72565b9050919050565b6000610fb182610f94565b9050919050565b610fc181610fa6565b82525050565b6000602082019050610fdc6000830184610fb8565b92915050565b610feb81610dda565b8114610ff657600080fd5b50565b60008135905061100881610fe2565b92915050565b6000806040838503121561102557611024610d2e565b5b600061103385828601610d4f565b925050602061104485828601610ff9565b9150509250929050565b60006020828403121561106457611063610d2e565b5b600061107284828501610ecb565b91505092915050565b600061108682610f94565b9050919050565b6110968161107b565b82525050565b60006020820190506110b1600083018461108d565b92915050565b6000815190506110c681610d6e565b92915050565b6000602082840312156110e2576110e1610d2e565b5b60006110f0848285016110b7565b91505092915050565b600082825260208201905092915050565b7f436f6e7472616374206e6f742077686974656c69737465640000000000000000600082015250565b60006111406018836110f9565b915061114b8261110a565b602082019050919050565b6000602082019050818103600083015261116f81611133565b9050919050565b7f496e73756666696369656e7420637265646974732062616c616e636500000000600082015250565b60006111ac601c836110f9565b91506111b782611176565b602082019050919050565b600060208201905081810360008301526111db8161119f565b9050919050565b6111eb81610d64565b82525050565b60006040820190506112066000830185610d04565b61121360208301846111e2565b9392505050565b60008151905061122981610fe2565b92915050565b60006020828403121561124557611244610d2e565b5b60006112538482850161121a565b91505092915050565b7f546f6b656e20617070726f76616c206661696c65640000000000000000000000600082015250565b60006112926015836110f9565b915061129d8261125c565b602082019050919050565b600060208201905081810360008301526112c181611285565b9050919050565b600081905092915050565b82818337600083830152505050565b60006112ee83856112c8565b93506112fb8385846112d3565b82840190509392505050565b60006113148284866112e2565b91508190509392505050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000611356600b836110f9565b915061136182611320565b602082019050919050565b6000602082019050818103600083015261138581611349565b9050919050565b7f4e6f20746f6b656e732072656365697665642066726f6d207377617000000000600082015250565b60006113c2601c836110f9565b91506113cd8261138c565b602082019050919050565b600060208201905081810360008301526113f1816113b5565b9050919050565b7f5468652063616c6c6572206d7573742062652074686520676f7665726e6f7200600082015250565b600061142e601f836110f9565b9150611439826113f8565b602082019050919050565b6000602082019050818103600083015261145d81611421565b9050919050565b7f4e6f20746f6b656e7320746f2073776565700000000000000000000000000000600082015250565b600061149a6012836110f9565b91506114a582611464565b602082019050919050565b600060208201905081810360008301526114c98161148d565b9050919050565b7f546f6b656e207472616e73666572206661696c65640000000000000000000000600082015250565b60006115066015836110f9565b9150611511826114d0565b602082019050919050565b60006020820190508181036000830152611535816114f9565b905091905056fea2646970667358221220f409874a62e38ccb17baffe05d64e89f0fa6fd6243b7a4baf89b287a7cb5e17b64736f6c634300081c0033",
  "devdoc": {
    "details": "The contract receives an address `to` (expected to be a DEX router) and `data` to execute a swapThe swap data must be encoded to send tokens to `msg.sender`CreditsManager pays for the swap on behalf of the user by deducting credits from their balance",
    "kind": "dev",
    "methods": {
      "canSpendCredits(address,uint256)": {
        "details": "Check if a user can spend a specific amount of credits.",
        "params": {
          "_amount": "The amount of credits to check.",
          "_user": "The address of the user to check."
        },
        "returns": {
          "_0": "True if the user can spend the specified amount of credits."
        }
      },
      "changeGovernor(address)": {
        "details": "Change the governor of the contract.",
        "params": {
          "_governor": "The address of the new governor. TRUSTED"
        }
      },
      "constructor": {
        "details": "Constructor.",
        "params": {
          "_seerCredits": "The SeerCredits token contract. TRUSTED",
          "_token": "The ERC20 token used to swap from (e.g., sDAI on Gnosis). TRUSTED"
        }
      },
      "execute(address,bytes,uint256,address)": {
        "details": "Execute a swap through a DEX router (Uniswap, Swapr, etc.). CreditsManager pays for the swap.",
        "params": {
          "amount": "The amount of credits to spend (tokens approved to the DEX router).",
          "data": "The encoded swap call data. Must be encoded to send output tokens to msg.sender.",
          "outputToken": "The token that the user is buying (must have increased balance after swap).",
          "to": "The DEX router address (must be whitelisted)."
        }
      },
      "setWhitelistedContract(address,bool)": {
        "details": "Add or remove a contract from the whitelist.",
        "params": {
          "_contract": "The address of the contract to modify.",
          "_whitelisted": "True to add to whitelist, false to remove."
        }
      },
      "sweepTokens(address)": {
        "details": "Sweep all tokens from the contract to the governor.",
        "params": {
          "_token": "The token to sweep. If address(0), uses the default token."
        }
      }
    },
    "title": "CreditsManager",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "execute(address,bytes,uint256,address)": {
        "notice": "This function acts as a proxy - CreditsManager pays for the swap by deducting credits from user's balance."
      }
    },
    "notice": "This contract acts as a proxy to DEXs (Uniswap, Swapr, etc.) where users can spend trading credits",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 395,
        "contract": "src/trading-credits/CreditsManager.sol:CreditsManager",
        "label": "governor",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 398,
        "contract": "src/trading-credits/CreditsManager.sol:CreditsManager",
        "label": "token",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(ERC20)387"
      },
      {
        "astId": 401,
        "contract": "src/trading-credits/CreditsManager.sol:CreditsManager",
        "label": "seerCredits",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(SeerCredits)949"
      },
      {
        "astId": 405,
        "contract": "src/trading-credits/CreditsManager.sol:CreditsManager",
        "label": "whitelistedContracts",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ERC20)387": {
        "encoding": "inplace",
        "label": "contract ERC20",
        "numberOfBytes": "20"
      },
      "t_contract(SeerCredits)949": {
        "encoding": "inplace",
        "label": "contract SeerCredits",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}