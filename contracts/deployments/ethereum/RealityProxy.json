{
  "address": "0xC72f738e331b6B7A5d77661277074BB60Ca0Ca9E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IConditionalTokens",
          "name": "_conditionalTokens",
          "type": "address"
        },
        {
          "internalType": "contract IRealityETH_v3_0",
          "name": "_realitio",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "conditionalTokens",
      "outputs": [
        {
          "internalType": "contract IConditionalTokens",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "realitio",
      "outputs": [
        {
          "internalType": "contract IRealityETH_v3_0",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract Market",
          "name": "market",
          "type": "address"
        }
      ],
      "name": "resolve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xf9883a3d5d99d014f572c799d84395f0f3c3c653d635e9d45ff7afb10d2c8340",
  "receipt": {
    "to": null,
    "from": "0x4EDCA105188a0783Ab3A6f09c50567D1E3F8591D",
    "contractAddress": "0xC72f738e331b6B7A5d77661277074BB60Ca0Ca9E",
    "transactionIndex": 19,
    "gasUsed": "832210",
    "logsBloom": "0x
    "blockHash": "0xfb915a4304a97d21ec6807e892bfa4d32a4e7d6cbf346f787847334a2115235d",
    "transactionHash": "0xf9883a3d5d99d014f572c799d84395f0f3c3c653d635e9d45ff7afb10d2c8340",
    "logs": [],
    "blockNumber": 20880509,
    "cumulativeGasUsed": "7351344",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xC59b0e4De5F1248C1140964E0fF287B192407E0C",
    "0x5b7dd1e86623548af054a4985f7fc8ccbb554e2c"
  ],
  "numDeployments": 1,
  "solcInputHash": "4f253f35a863d7f234ed79fcc65a1b76",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IConditionalTokens\",\"name\":\"_conditionalTokens\",\"type\":\"address\"},{\"internalType\":\"contract IRealityETH_v3_0\",\"name\":\"_realitio\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"conditionalTokens\",\"outputs\":[{\"internalType\":\"contract IConditionalTokens\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"realitio\",\"outputs\":[{\"internalType\":\"contract IRealityETH_v3_0\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract Market\",\"name\":\"market\",\"type\":\"address\"}],\"name\":\"resolve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Constructor.\",\"params\":{\"_conditionalTokens\":\"Conditional Tokens contract address.\",\"_realitio\":\"Reality.eth contract address.\"}},\"resolve(address)\":{\"details\":\"Resolves the specified market.\",\"params\":{\"market\":\"Market to resolve. UNTRUSTED.\"}}},\"stateVariables\":{\"INVALID_RESULT\":{\"details\":\"INVALID_RESULT reserved value.\"},\"REALITY_MULTI_SELECT_TEMPLATE\":{\"details\":\"Template for multi categorical markets.\"},\"REALITY_SINGLE_SELECT_TEMPLATE\":{\"details\":\"Template for categorical markets.\"},\"REALITY_UINT_TEMPLATE\":{\"details\":\"Template for scalar and multi scalar markets.\"},\"conditionalTokens\":{\"details\":\"Conditional Tokens contract.\"},\"realitio\":{\"details\":\"Reality.eth contract.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/RealityProxy.sol\":\"RealityProxy\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"src/Interfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IERC20 {\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address owner) external returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n}\\n\\n// https://github.com/RealityETH/reality-eth-monorepo/blob/main/packages/contracts/flat/RealityETH-3.0.sol\\ninterface IRealityETH_v3_0 {\\n    function askQuestionWithMinBond(\\n        uint256 template_id,\\n        string memory question,\\n        address arbitrator,\\n        uint32 timeout,\\n        uint32 opening_ts,\\n        uint256 nonce,\\n        uint256 min_bond\\n    ) external payable returns (bytes32);\\n\\n    function resultForOnceSettled(bytes32 question_id) external view returns (bytes32);\\n\\n    function getContentHash(bytes32 question_id) external view returns (bytes32);\\n\\n    function getTimeout(bytes32 question_id) external view returns (uint32);\\n\\n    function submitAnswer(bytes32 question_id, bytes32 answer, uint256 max_previous) external payable;\\n}\\n\\ninterface IConditionalTokens {\\n    function payoutNumerators(bytes32 conditionId, uint256 index) external view returns (uint256);\\n\\n    function payoutDenominator(bytes32 conditionId) external view returns (uint256);\\n\\n    function prepareCondition(address oracle, bytes32 questionId, uint256 outcomeSlotCount) external;\\n\\n    function reportPayouts(bytes32 questionId, uint256[] calldata payouts) external;\\n\\n    function splitPosition(\\n        /*IERC20*/\\n        address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint256[] calldata partition,\\n        uint256 amount\\n    ) external;\\n\\n    function mergePositions(\\n        /*IERC20*/\\n        address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint256[] calldata partition,\\n        uint256 amount\\n    ) external;\\n\\n    function redeemPositions(\\n        /*IERC20*/\\n        address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint256[] calldata indexSets\\n    ) external;\\n\\n    function getConditionId(\\n        address oracle,\\n        bytes32 questionId,\\n        uint256 outcomeSlotCount\\n    ) external pure returns (bytes32);\\n\\n    function getCollectionId(\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint256 indexSet\\n    ) external view returns (bytes32);\\n\\n    function getPositionId(address collateralToken, bytes32 collectionId) external pure returns (uint256);\\n\\n    function getOutcomeSlotCount(bytes32 conditionId) external view returns (uint256);\\n\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    function balanceOf(address owner, uint256 id) external view returns (uint256);\\n}\\n\\ninterface IWrapped1155Factory {\\n    function requireWrapped1155(\\n        /*IERC1155*/\\n        address multiToken,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external /*Wrapped1155*/ returns (IERC20);\\n\\n    function unwrap(\\n        /*IERC1155*/\\n        address multiToken,\\n        uint256 tokenId,\\n        uint256 amount,\\n        address recipient,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1a66fb5758a0ca15b706a7d9a163505803103930acd58c188565a88e81499fa3\",\"license\":\"MIT\"},\"src/Market.sol\":{\"content\":\"/**\\n *  @authors: [@xyzseer]\\n *  @reviewers: [@nvm1410, @madhurMongia, @unknownunknown1, @mani99brar]\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {IERC20} from \\\"./Interfaces.sol\\\";\\nimport \\\"./RealityProxy.sol\\\";\\n\\ncontract Market {\\n    /// @dev Flag to initialize the market only once.\\n    bool public initialized;\\n\\n    /// @dev Contains the information associated to Reality.\\n    /// @param questionsIds Reality questions ids.\\n    /// @param templateId Reality templateId.\\n    /// @param encodedQuestions Encoded questions parameters, needed to create and reopen a question.\\n    struct RealityParams {\\n        bytes32[] questionsIds;\\n        uint256 templateId;\\n        string[] encodedQuestions;\\n    }\\n\\n    /// @dev Contains the information associated to Conditional Tokens.\\n    /// @param conditionId Conditional Tokens conditionId.\\n    /// @param parentCollectionId Conditional Tokens parentCollectionId.\\n    /// @param parentOutcome Conditional outcome to use (optional).\\n    /// @param parentMarket Conditional market to use (optional).\\n    /// @param questionId Conditional Tokens questionId.\\n    /// @param wrapped1155 Outcome tokens Wrapped1155 address.\\n    /// @param data Wrapped1155 token data.\\n    struct ConditionalTokensParams {\\n        bytes32 conditionId;\\n        bytes32 parentCollectionId;\\n        uint256 parentOutcome;\\n        address parentMarket;\\n        bytes32 questionId;\\n        IERC20[] wrapped1155;\\n        bytes[] data;\\n    }\\n\\n    /// @dev The name of the market.\\n    string public marketName;\\n    /// @dev The market outcomes, doesn't include the INVALID_RESULT outcome.\\n    string[] public outcomes;\\n    /// @dev Lower bound, only used for scalar markets.\\n    uint256 public lowerBound;\\n    /// @dev Upper bound, only used for scalar markets.\\n    uint256 public upperBound;\\n    /// @dev Conditional Tokens parameters.\\n    ConditionalTokensParams public conditionalTokensParams;\\n    /// @dev Reality parameters.\\n    RealityParams public realityParams;\\n    /// @dev Oracle contract.\\n    RealityProxy public realityProxy;\\n\\n    /// @dev Initializer.\\n    /// @param _marketName The name of the market.\\n    /// @param _outcomes The market outcomes, doesn't include the INVALID_RESULT outcome.\\n    /// @param _lowerBound Lower bound, only used for scalar markets.\\n    /// @param _upperBound Upper bound, only used for scalar markets.\\n    /// @param _conditionalTokensParams Conditional Tokens params.\\n    /// @param _realityParams Reality params.\\n    /// @param _realityProxy Oracle contract.\\n    function initialize(\\n        string memory _marketName,\\n        string[] memory _outcomes,\\n        uint256 _lowerBound,\\n        uint256 _upperBound,\\n        ConditionalTokensParams memory _conditionalTokensParams,\\n        RealityParams memory _realityParams,\\n        RealityProxy _realityProxy\\n    ) external {\\n        require(!initialized, \\\"Already initialized.\\\");\\n\\n        marketName = _marketName;\\n        outcomes = _outcomes;\\n        lowerBound = _lowerBound;\\n        upperBound = _upperBound;\\n        conditionalTokensParams = _conditionalTokensParams;\\n        realityParams = _realityParams;\\n        realityProxy = _realityProxy;\\n\\n        initialized = true;\\n    }\\n\\n    /// @dev The templateId associated to the Reality question.\\n    /// @return The template id.\\n    function templateId() external view returns (uint256) {\\n        return realityParams.templateId;\\n    }\\n\\n    /// @dev Returns the Reality questions ids. Multi Scalar markets have one question for each outcome, while any other market has only one question.\\n    /// @return The Reality questions ids.\\n    function questionsIds() external view returns (bytes32[] memory) {\\n        return realityParams.questionsIds;\\n    }\\n\\n    /// @dev Encoded questions parameters, needed to create and reopen a question.\\n    /// @param index The question index.\\n    /// @return The encoded question.\\n    function encodedQuestions(uint256 index) external view returns (string memory) {\\n        return realityParams.encodedQuestions[index];\\n    }\\n\\n    /// @dev Conditional Tokens questionId.\\n    /// @return the question ID.\\n    function questionId() external view returns (bytes32) {\\n        return conditionalTokensParams.questionId;\\n    }\\n\\n    /// @dev Conditional Tokens conditionId.\\n    /// @return The condition ID.\\n    function conditionId() external view returns (bytes32) {\\n        return conditionalTokensParams.conditionId;\\n    }\\n\\n    /// @dev Conditional Tokens parentCollectionId.\\n    /// @return The parent collection ID.\\n    function parentCollectionId() external view returns (bytes32) {\\n        return conditionalTokensParams.parentCollectionId;\\n    }\\n\\n    /// @dev The parent market (optional). This market redeems to an outcome token of the parent market.\\n    /// @return The parent market address.\\n    function parentMarket() external view returns (address) {\\n        return conditionalTokensParams.parentMarket;\\n    }\\n\\n    /// @dev The parent outcome (optional). The parent market's outcome token this market redeems for.\\n    /// @return The parent outcome index.\\n    function parentOutcome() external view returns (uint256) {\\n        return conditionalTokensParams.parentOutcome;\\n    }\\n\\n    /// @dev Returns the wrapped1155 and the data corresponding to an outcome token.\\n    /// @param index The outcome index.\\n    /// @return wrapped1155 The wrapped token.\\n    /// @return data The token data.\\n    function wrappedOutcome(uint256 index) external view returns (IERC20 wrapped1155, bytes memory data) {\\n        return (conditionalTokensParams.wrapped1155[index], conditionalTokensParams.data[index]);\\n    }\\n\\n    /// @dev Returns the wrapped1155 and the data corresponding to the parent market.\\n    /// @return wrapped1155 The wrapped token.\\n    /// @return data The token data.\\n    function parentWrappedOutcome() external view returns (IERC20 wrapped1155, bytes memory data) {\\n        if (conditionalTokensParams.parentMarket != address(0)) {\\n            (wrapped1155, data) =\\n                Market(conditionalTokensParams.parentMarket).wrappedOutcome(conditionalTokensParams.parentOutcome);\\n        }\\n    }\\n\\n    /// @dev Returns the number of outcomes.\\n    /// Doesn't include the INVALID_RESULT outcome.\\n    /// @return numOutcomes The number of outcomes.\\n    function numOutcomes() external view returns (uint256) {\\n        return outcomes.length;\\n    }\\n\\n    /// @dev Helper function to resolve the market.\\n    function resolve() external {\\n        realityProxy.resolve(this);\\n    }\\n}\\n\",\"keccak256\":\"0xa1a7e99f16812a345d7cb9a063516632f5257704969914948016629605232a3d\",\"license\":\"MIT\"},\"src/RealityProxy.sol\":{\"content\":\"/**\\n *  @authors: [@xyzseer]\\n *  @reviewers: [@nvm1410, @madhurMongia, @unknownunknown1, @mani99brar]\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {IConditionalTokens, IRealityETH_v3_0} from \\\"./Interfaces.sol\\\";\\nimport \\\"./Market.sol\\\";\\n\\ncontract RealityProxy {\\n    /// @dev Conditional Tokens contract.\\n    IConditionalTokens public immutable conditionalTokens;\\n    /// @dev Reality.eth contract.\\n    IRealityETH_v3_0 public immutable realitio;\\n\\n    /// @dev INVALID_RESULT reserved value.\\n    bytes32 internal constant INVALID_RESULT = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    /// @dev Template for scalar and multi scalar markets.\\n    uint256 internal constant REALITY_UINT_TEMPLATE = 1;\\n    /// @dev Template for categorical markets.\\n    uint256 internal constant REALITY_SINGLE_SELECT_TEMPLATE = 2;\\n    /// @dev Template for multi categorical markets.\\n    uint256 internal constant REALITY_MULTI_SELECT_TEMPLATE = 3;\\n\\n    /// @dev Constructor.\\n    /// @param _conditionalTokens Conditional Tokens contract address.\\n    /// @param _realitio Reality.eth contract address.\\n    constructor(IConditionalTokens _conditionalTokens, IRealityETH_v3_0 _realitio) {\\n        conditionalTokens = _conditionalTokens;\\n        realitio = _realitio;\\n    }\\n\\n    /// @dev Resolves the specified market.\\n    /// @param market Market to resolve. UNTRUSTED.\\n    function resolve(Market market) external {\\n        bytes32[] memory questionsIds = market.questionsIds();\\n        uint256 numOutcomes = market.numOutcomes();\\n        uint256 templateId = market.templateId();\\n        uint256 low = market.lowerBound();\\n        uint256 high = market.upperBound();\\n\\n        // questionId must be a hash of all the values used to resolve a market, this way if an attacker tries to resolve a fake market by changing some value its questionId will not match the id of a valid market.\\n        bytes32 questionId = keccak256(abi.encode(questionsIds, numOutcomes, templateId, low, high));\\n\\n        if (templateId == REALITY_SINGLE_SELECT_TEMPLATE) {\\n            resolveCategoricalMarket(questionId, questionsIds, numOutcomes);\\n            return;\\n        }\\n\\n        if (templateId == REALITY_MULTI_SELECT_TEMPLATE) {\\n            resolveMultiCategoricalMarket(questionId, questionsIds, numOutcomes);\\n            return;\\n        }\\n\\n        if (questionsIds.length > 1) {\\n            resolveMultiScalarMarket(questionId, questionsIds, numOutcomes);\\n            return;\\n        }\\n\\n        resolveScalarMarket(questionId, questionsIds, low, high);\\n    }\\n\\n    /// @dev Resolves to invalid if the answer is invalid or the result is greater than the amount of outcomes.\\n    /// @param questionId Conditional Tokens questionId.\\n    /// @param questionsIds Reality questions ids.\\n    /// @param numOutcomes The number of outcomes, excluding the INVALID_RESULT outcome.\\n    function resolveCategoricalMarket(\\n        bytes32 questionId,\\n        bytes32[] memory questionsIds,\\n        uint256 numOutcomes\\n    ) internal {\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionsIds[0]));\\n        uint256[] memory payouts = new uint256[](numOutcomes + 1);\\n\\n        if (answer == uint256(INVALID_RESULT) || answer >= numOutcomes) {\\n            // the last outcome is INVALID_RESULT.\\n            payouts[numOutcomes] = 1;\\n        } else {\\n            payouts[answer] = 1;\\n        }\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n\\n    /// @dev Resolves to invalid if the answer is invalid or all the results are zero.\\n    /// @param questionId Conditional Tokens questionId.\\n    /// @param questionsIds Reality questions ids.\\n    /// @param numOutcomes The number of outcomes, excluding the INVALID_RESULT outcome.\\n    function resolveMultiCategoricalMarket(\\n        bytes32 questionId,\\n        bytes32[] memory questionsIds,\\n        uint256 numOutcomes\\n    ) internal {\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionsIds[0]));\\n        uint256[] memory payouts = new uint256[](numOutcomes + 1);\\n\\n        if (answer == uint256(INVALID_RESULT)) {\\n            // the last outcome is INVALID_RESULT.\\n            payouts[numOutcomes] = 1;\\n        } else {\\n            bool allZeroes = true;\\n\\n            for (uint256 i = 0; i < numOutcomes; i++) {\\n                payouts[i] = (answer >> i) & 1;\\n                allZeroes = allZeroes && payouts[i] == 0;\\n            }\\n\\n            if (allZeroes) {\\n                // invalid result.\\n                payouts[numOutcomes] = 1;\\n            }\\n        }\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n\\n    /// @dev Resolves to invalid if the answer is invalid.\\n    /// @param questionId Conditional Tokens questionId.\\n    /// @param questionsIds Reality questions ids.\\n    /// @param low Lower bound.\\n    /// @param high Upper bound.\\n    function resolveScalarMarket(\\n        bytes32 questionId,\\n        bytes32[] memory questionsIds,\\n        uint256 low,\\n        uint256 high\\n    ) internal {\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionsIds[0]));\\n        uint256[] memory payouts = new uint256[](3);\\n\\n        if (answer == uint256(INVALID_RESULT)) {\\n            // the last outcome is INVALID_RESULT.\\n            payouts[2] = 1;\\n        } else if (answer <= low) {\\n            payouts[0] = 1;\\n        } else if (answer >= high) {\\n            payouts[1] = 1;\\n        } else {\\n            payouts[0] = high - answer;\\n            payouts[1] = answer - low;\\n        }\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n\\n    /// @dev If any individual result is invalid then the corresponding payout element is set to 0.\\n    /// @dev If all the elements of the payout vector are 0 or all are invalid, the market resolves to invalid.\\n    /// @param questionId Conditional Tokens questionId.\\n    /// @param questionsIds Reality questions ids.\\n    /// @param numOutcomes The number of outcomes, excluding the INVALID_RESULT outcome.\\n    function resolveMultiScalarMarket(\\n        bytes32 questionId,\\n        bytes32[] memory questionsIds,\\n        uint256 numOutcomes\\n    ) internal {\\n        uint256[] memory payouts = new uint256[](numOutcomes + 1);\\n        bool allZeroesOrInvalid = true;\\n\\n        /*\\n         * We set maxPayout to a sufficiently large number for most possible outcomes that also avoids overflows in the following places:\\n         * https://github.com/gnosis/conditional-tokens-contracts/blob/master/contracts/ConditionalTokens.sol#L89\\n         * https://github.com/gnosis/conditional-tokens-contracts/blob/master/contracts/ConditionalTokens.sol#L242\\n         */\\n        uint256 maxPayout = 2 ** (256 / 2) - 1;\\n\\n        for (uint256 i = 0; i < numOutcomes; i++) {\\n            payouts[i] = uint256(realitio.resultForOnceSettled(questionsIds[i]));\\n\\n            if (payouts[i] == uint256(INVALID_RESULT)) {\\n                payouts[i] = 0;\\n            } else if (payouts[i] > maxPayout) {\\n                payouts[i] = maxPayout;\\n            }\\n\\n            allZeroesOrInvalid = allZeroesOrInvalid && payouts[i] == 0;\\n        }\\n\\n        if (allZeroesOrInvalid) {\\n            // invalid result.\\n            payouts[numOutcomes] = 1;\\n        }\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n}\\n\",\"keccak256\":\"0x896712b726fc76f3f29f79b62c5a2976bd9df55cf5d5d42b4e69fce5c078b220\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b50604051610f06380380610f0683398101604081905261002f9161005e565b6001600160a01b039182166080521660a052610098565b6001600160a01b038116811461005b57600080fd5b50565b6000806040838503121561007157600080fd5b825161007c81610046565b602084015190925061008d81610046565b809150509250929050565b60805160a051610e136100f36000396000818160a30152818161034e0152818161052e0152818161078f01526109ce0152600081816060015281816104ba015281816106f0015281816109590152610b6b0152610e136000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806355ea6c47146100465780635bd9e2991461005b578063bc8802a21461009e575b600080fd5b610059610054366004610ba2565b6100c5565b005b6100827f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f35b6100827f000000000000000000000000000000000000000000000000000000000000000081565b6000816001600160a01b031663455d885e6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610105573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261012d9190810190610be8565b90506000826001600160a01b0316638767d64e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561016f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101939190610ca6565b90506000836001600160a01b0316637aa77f296040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f99190610ca6565b90506000846001600160a01b031663a384d6ff6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561023b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025f9190610ca6565b90506000856001600160a01b031663b09ad8a06040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c59190610ca6565b9050600085858585856040516020016102e2959493929190610cbf565b604051602081830303815290604052805190602001209050600284036103165761030d81878761034a565b50505050505050565b600384036103295761030d81878761052a565b60018651111561033e5761030d818787610727565b61030d818785856109ca565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ab5a4e358460008151811061038e5761038e610d1e565b60200260200101516040518263ffffffff1660e01b81526004016103b491815260200190565b602060405180830381865afa1580156103d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f59190610ca6565b90506000610404836001610d4a565b67ffffffffffffffff81111561041c5761041c610bd2565b604051908082528060200260200182016040528015610445578160200160208202803683370190505b5090506000198214806104585750828210155b1561048257600181848151811061047157610471610d1e565b6020026020010181815250506104a3565b600181838151811061049657610496610d1e565b6020026020010181815250505b604051633124a62b60e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c49298ac906104f19088908590600401610d63565b600060405180830381600087803b15801561050b57600080fd5b505af115801561051f573d6000803e3d6000fd5b505050505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ab5a4e358460008151811061056e5761056e610d1e565b60200260200101516040518263ffffffff1660e01b815260040161059491815260200190565b602060405180830381865afa1580156105b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d59190610ca6565b905060006105e4836001610d4a565b67ffffffffffffffff8111156105fc576105fc610bd2565b604051908082528060200260200182016040528015610625578160200160208202803683370190505b5090506001820161064457600181848151811061047157610471610d1e565b600160005b848110156106b0578084901c60011683828151811061066a5761066a610d1e565b60200260200101818152505081801561069c575082818151811061069057610690610d1e565b60200260200101516000145b9150806106a881610db1565b915050610649565b5080156106d85760018285815181106106cb576106cb610d1e565b6020026020010181815250505b50604051633124a62b60e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c49298ac906104f19088908590600401610d63565b6000610734826001610d4a565b67ffffffffffffffff81111561074c5761074c610bd2565b604051908082528060200260200182016040528015610775578160200160208202803683370190505b50905060016001600160801b0360005b8481101561091a577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ab5a4e358783815181106107ce576107ce610d1e565b60200260200101516040518263ffffffff1660e01b81526004016107f491815260200190565b602060405180830381865afa158015610811573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108359190610ca6565b60001c84828151811061084a5761084a610d1e565b602090810291909101015283516000199085908390811061086d5761086d610d1e565b60200260200101510361089f57600084828151811061088e5761088e610d1e565b6020026020010181815250506108e0565b818482815181106108b2576108b2610d1e565b602002602001015111156108e057818482815181106108d3576108d3610d1e565b6020026020010181815250505b82801561090657508381815181106108fa576108fa610d1e565b60200260200101516000145b92508061091281610db1565b915050610785565b50811561094257600183858151811061093557610935610d1e565b6020026020010181815250505b604051633124a62b60e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c49298ac906109909089908790600401610d63565b600060405180830381600087803b1580156109aa57600080fd5b505af11580156109be573d6000803e3d6000fd5b50505050505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ab5a4e3585600081518110610a0e57610a0e610d1e565b60200260200101516040518263ffffffff1660e01b8152600401610a3491815260200190565b602060405180830381865afa158015610a51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a759190610ca6565b60408051600380825260808201909252919250600091906020820160608036833701905050905060018201610aca57600181600281518110610ab957610ab9610d1e565b602002602001018181525050610b54565b838211610ae657600181600081518110610ab957610ab9610d1e565b828210610b0257600181600181518110610ab957610ab9610d1e565b610b0c8284610dca565b81600081518110610b1f57610b1f610d1e565b6020908102919091010152610b348483610dca565b81600181518110610b4757610b47610d1e565b6020026020010181815250505b604051633124a62b60e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c49298ac906109909089908590600401610d63565b600060208284031215610bb457600080fd5b81356001600160a01b0381168114610bcb57600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b60006020808385031215610bfb57600080fd5b825167ffffffffffffffff80821115610c1357600080fd5b818501915085601f830112610c2757600080fd5b815181811115610c3957610c39610bd2565b8060051b604051601f19603f83011681018181108582111715610c5e57610c5e610bd2565b604052918252848201925083810185019188831115610c7c57600080fd5b938501935b82851015610c9a57845184529385019392850192610c81565b98975050505050505050565b600060208284031215610cb857600080fd5b5051919050565b60a0808252865190820181905260009060209060c0840190828a01845b82811015610cf857815184529284019290840190600101610cdc565b505050908301969096525060408101939093526060830191909152608090910152919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115610d5d57610d5d610d34565b92915050565b6000604082018483526020604081850152818551808452606086019150828701935060005b81811015610da457845183529383019391830191600101610d88565b5090979650505050505050565b600060018201610dc357610dc3610d34565b5060010190565b81810381811115610d5d57610d5d610d3456fea264697066735822122073411e1779fe478e9d470af6dab1025fd6b6e72ba5ef39eb3bbc74855039df5464736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100415760003560e01c806355ea6c47146100465780635bd9e2991461005b578063bc8802a21461009e575b600080fd5b610059610054366004610ba2565b6100c5565b005b6100827f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200160405180910390f35b6100827f000000000000000000000000000000000000000000000000000000000000000081565b6000816001600160a01b031663455d885e6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610105573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261012d9190810190610be8565b90506000826001600160a01b0316638767d64e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561016f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101939190610ca6565b90506000836001600160a01b0316637aa77f296040518163ffffffff1660e01b8152600401602060405180830381865afa1580156101d5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f99190610ca6565b90506000846001600160a01b031663a384d6ff6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561023b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061025f9190610ca6565b90506000856001600160a01b031663b09ad8a06040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102c59190610ca6565b9050600085858585856040516020016102e2959493929190610cbf565b604051602081830303815290604052805190602001209050600284036103165761030d81878761034a565b50505050505050565b600384036103295761030d81878761052a565b60018651111561033e5761030d818787610727565b61030d818785856109ca565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ab5a4e358460008151811061038e5761038e610d1e565b60200260200101516040518263ffffffff1660e01b81526004016103b491815260200190565b602060405180830381865afa1580156103d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f59190610ca6565b90506000610404836001610d4a565b67ffffffffffffffff81111561041c5761041c610bd2565b604051908082528060200260200182016040528015610445578160200160208202803683370190505b5090506000198214806104585750828210155b1561048257600181848151811061047157610471610d1e565b6020026020010181815250506104a3565b600181838151811061049657610496610d1e565b6020026020010181815250505b604051633124a62b60e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c49298ac906104f19088908590600401610d63565b600060405180830381600087803b15801561050b57600080fd5b505af115801561051f573d6000803e3d6000fd5b505050505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ab5a4e358460008151811061056e5761056e610d1e565b60200260200101516040518263ffffffff1660e01b815260040161059491815260200190565b602060405180830381865afa1580156105b1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d59190610ca6565b905060006105e4836001610d4a565b67ffffffffffffffff8111156105fc576105fc610bd2565b604051908082528060200260200182016040528015610625578160200160208202803683370190505b5090506001820161064457600181848151811061047157610471610d1e565b600160005b848110156106b0578084901c60011683828151811061066a5761066a610d1e565b60200260200101818152505081801561069c575082818151811061069057610690610d1e565b60200260200101516000145b9150806106a881610db1565b915050610649565b5080156106d85760018285815181106106cb576106cb610d1e565b6020026020010181815250505b50604051633124a62b60e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c49298ac906104f19088908590600401610d63565b6000610734826001610d4a565b67ffffffffffffffff81111561074c5761074c610bd2565b604051908082528060200260200182016040528015610775578160200160208202803683370190505b50905060016001600160801b0360005b8481101561091a577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ab5a4e358783815181106107ce576107ce610d1e565b60200260200101516040518263ffffffff1660e01b81526004016107f491815260200190565b602060405180830381865afa158015610811573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108359190610ca6565b60001c84828151811061084a5761084a610d1e565b602090810291909101015283516000199085908390811061086d5761086d610d1e565b60200260200101510361089f57600084828151811061088e5761088e610d1e565b6020026020010181815250506108e0565b818482815181106108b2576108b2610d1e565b602002602001015111156108e057818482815181106108d3576108d3610d1e565b6020026020010181815250505b82801561090657508381815181106108fa576108fa610d1e565b60200260200101516000145b92508061091281610db1565b915050610785565b50811561094257600183858151811061093557610935610d1e565b6020026020010181815250505b604051633124a62b60e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c49298ac906109909089908790600401610d63565b600060405180830381600087803b1580156109aa57600080fd5b505af11580156109be573d6000803e3d6000fd5b50505050505050505050565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663ab5a4e3585600081518110610a0e57610a0e610d1e565b60200260200101516040518263ffffffff1660e01b8152600401610a3491815260200190565b602060405180830381865afa158015610a51573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a759190610ca6565b60408051600380825260808201909252919250600091906020820160608036833701905050905060018201610aca57600181600281518110610ab957610ab9610d1e565b602002602001018181525050610b54565b838211610ae657600181600081518110610ab957610ab9610d1e565b828210610b0257600181600181518110610ab957610ab9610d1e565b610b0c8284610dca565b81600081518110610b1f57610b1f610d1e565b6020908102919091010152610b348483610dca565b81600181518110610b4757610b47610d1e565b6020026020010181815250505b604051633124a62b60e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063c49298ac906109909089908590600401610d63565b600060208284031215610bb457600080fd5b81356001600160a01b0381168114610bcb57600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b60006020808385031215610bfb57600080fd5b825167ffffffffffffffff80821115610c1357600080fd5b818501915085601f830112610c2757600080fd5b815181811115610c3957610c39610bd2565b8060051b604051601f19603f83011681018181108582111715610c5e57610c5e610bd2565b604052918252848201925083810185019188831115610c7c57600080fd5b938501935b82851015610c9a57845184529385019392850192610c81565b98975050505050505050565b600060208284031215610cb857600080fd5b5051919050565b60a0808252865190820181905260009060209060c0840190828a01845b82811015610cf857815184529284019290840190600101610cdc565b505050908301969096525060408101939093526060830191909152608090910152919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b80820180821115610d5d57610d5d610d34565b92915050565b6000604082018483526020604081850152818551808452606086019150828701935060005b81811015610da457845183529383019391830191600101610d88565b5090979650505050505050565b600060018201610dc357610dc3610d34565b5060010190565b81810381811115610d5d57610d5d610d3456fea264697066735822122073411e1779fe478e9d470af6dab1025fd6b6e72ba5ef39eb3bbc74855039df5464736f6c63430008140033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Constructor.",
        "params": {
          "_conditionalTokens": "Conditional Tokens contract address.",
          "_realitio": "Reality.eth contract address."
        }
      },
      "resolve(address)": {
        "details": "Resolves the specified market.",
        "params": {
          "market": "Market to resolve. UNTRUSTED."
        }
      }
    },
    "stateVariables": {
      "INVALID_RESULT": {
        "details": "INVALID_RESULT reserved value."
      },
      "REALITY_MULTI_SELECT_TEMPLATE": {
        "details": "Template for multi categorical markets."
      },
      "REALITY_SINGLE_SELECT_TEMPLATE": {
        "details": "Template for categorical markets."
      },
      "REALITY_UINT_TEMPLATE": {
        "details": "Template for scalar and multi scalar markets."
      },
      "conditionalTokens": {
        "details": "Conditional Tokens contract."
      },
      "realitio": {
        "details": "Reality.eth contract."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}