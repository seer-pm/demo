{
  "address": "0xdEB5dC052e55bf81C6d75CD47C961e0b280B3791",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IConditionalTokens",
          "name": "_conditionalTokens",
          "type": "address"
        },
        {
          "internalType": "contract IWrapped1155Factory",
          "name": "_wrapped1155Factory",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "conditionalTokens",
      "outputs": [
        {
          "internalType": "contract IConditionalTokens",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "parentCollectionId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "conditionId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "indexSet",
          "type": "uint256"
        }
      ],
      "name": "getTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "conditionId",
          "type": "bytes32"
        }
      ],
      "name": "getWinningOutcomes",
      "outputs": [
        {
          "internalType": "bool[]",
          "name": "",
          "type": "bool[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "contract Market",
          "name": "market",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "mergePositions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155BatchReceived",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC1155Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "contract Market",
          "name": "market",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "outcomeIndexes",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "redeemPositions",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "collateralToken",
          "type": "address"
        },
        {
          "internalType": "contract Market",
          "name": "market",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "splitPosition",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrapped1155Factory",
      "outputs": [
        {
          "internalType": "contract IWrapped1155Factory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc23edabf301ce7105819ead93b89f0539fc0e89cbc4942d4215815a71e274e5c",
  "receipt": {
    "to": null,
    "from": "0x4EDCA105188a0783Ab3A6f09c50567D1E3F8591D",
    "contractAddress": "0xdEB5dC052e55bf81C6d75CD47C961e0b280B3791",
    "transactionIndex": 33,
    "gasUsed": "2132137",
    "logsBloom": "0x
    "blockHash": "0x4181fdcea685e3317b8b08939d4ef899e32bf3307d10076f278e154be646a060",
    "transactionHash": "0xc23edabf301ce7105819ead93b89f0539fc0e89cbc4942d4215815a71e274e5c",
    "logs": [],
    "blockNumber": 6992827,
    "cumulativeGasUsed": "4607839",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x8bdC504dC3A05310059c1c67E0A2667309D27B93",
    "0xD194319D1804C1051DD21Ba1Dc931cA72410B79f"
  ],
  "numDeployments": 1,
  "solcInputHash": "e5551da2abe3840e61141321020a7e5f",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IConditionalTokens\",\"name\":\"_conditionalTokens\",\"type\":\"address\"},{\"internalType\":\"contract IWrapped1155Factory\",\"name\":\"_wrapped1155Factory\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"conditionalTokens\",\"outputs\":[{\"internalType\":\"contract IConditionalTokens\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"parentCollectionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"indexSet\",\"type\":\"uint256\"}],\"name\":\"getTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"}],\"name\":\"getWinningOutcomes\",\"outputs\":[{\"internalType\":\"bool[]\",\"name\":\"\",\"type\":\"bool[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"contract Market\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mergePositions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155BatchReceived\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC1155Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"contract Market\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"outcomeIndexes\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"redeemPositions\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"collateralToken\",\"type\":\"address\"},{\"internalType\":\"contract Market\",\"name\":\"market\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"splitPosition\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrapped1155Factory\",\"outputs\":[{\"internalType\":\"contract IWrapped1155Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"The Router contract replicates the main Conditional Tokens functions, but allowing to work with ERC20 outcomes instead of the ERC1155.\",\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Constructor.\",\"params\":{\"_conditionalTokens\":\"Conditional Tokens contract.\",\"_wrapped1155Factory\":\"Wrapped1155Factory contract.\"}},\"getTokenId(address,bytes32,bytes32,uint256)\":{\"params\":{\"collateralToken\":\"The address of the ERC20 used as collateral.\",\"conditionId\":\"The id of the condition used to redeem.\",\"indexSet\":\"Index set of the outcome collection to combine with the parent outcome collection.\",\"parentCollectionId\":\"The Conditional Tokens parent collection id.\"},\"returns\":{\"_0\":\"The token id.\"}},\"getWinningOutcomes(bytes32)\":{\"params\":{\"conditionId\":\"The id of the condition.\"},\"returns\":{\"_0\":\"An array of outcomes where a true value indicates that the outcome is redeemable.\"}},\"mergePositions(address,address,uint256)\":{\"details\":\"The ERC20 associated to each outcome must be previously created on the wrapped1155Factory.Collateral tokens are withdrawn only if we are not merging a deep position (parentCollectionId is bytes32(0)).\",\"params\":{\"amount\":\"The amount of outcome tokens to merge.\",\"collateralToken\":\"The address of the ERC20 used as collateral.\",\"market\":\"The Market to merge.\"}},\"redeemPositions(address,address,uint256[],uint256[])\":{\"details\":\"The ERC20 associated to each outcome must be previously created on the wrapped1155Factory.Collateral tokens are withdrawn only if we are not redeeming a deep position (parentCollectionId is bytes32(0)).\",\"params\":{\"amounts\":\"Amount to redeem of each outcome.\",\"collateralToken\":\"The address of the ERC20 used as collateral.\",\"market\":\"The Market to redeem.\",\"outcomeIndexes\":\"The index of the outcomes to redeem.\"}},\"splitPosition(address,address,uint256)\":{\"details\":\"The ERC20 associated to each outcome must be previously created on the wrapped1155Factory.Collateral tokens are deposited only if we are not splitting a deep position (parentCollectionId is bytes32(0)).\",\"params\":{\"amount\":\"The amount of collateral to split.\",\"collateralToken\":\"The address of the ERC20 used as collateral.\",\"market\":\"The Market to split.\"}},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"}},\"stateVariables\":{\"conditionalTokens\":{\"details\":\"Conditional Tokens contract.\"},\"wrapped1155Factory\":{\"details\":\"Wrapped1155Factory contract.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getTokenId(address,bytes32,bytes32,uint256)\":{\"notice\":\"Constructs a tokenId from a collateral token and an outcome collection.\"},\"getWinningOutcomes(bytes32)\":{\"notice\":\"Helper function used to know the redeemable outcomes associated to a conditionId.\"},\"mergePositions(address,address,uint256)\":{\"notice\":\"Merges positions and sends the collateral tokens to the user.\"},\"redeemPositions(address,address,uint256[],uint256[])\":{\"notice\":\"Redeems positions and sends the collateral tokens to the user.\"},\"splitPosition(address,address,uint256)\":{\"notice\":\"Transfers the collateral to the Router, splits the position and sends the ERC20 outcome tokens back to the user.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/Router.sol\":\"Router\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface that must be implemented by smart contracts in order to receive\\n * ERC-1155 token transfers.\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb69597a63b202e28401128bed6a6d259e8730191274471af7303eafb247881a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/utils/ERC1155Holder.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165, ERC165} from \\\"../../../utils/introspection/ERC165.sol\\\";\\nimport {IERC1155Receiver} from \\\"../IERC1155Receiver.sol\\\";\\n\\n/**\\n * @dev Simple implementation of `IERC1155Receiver` that will allow a contract to hold ERC1155 tokens.\\n *\\n * IMPORTANT: When inheriting this contract, you must include a way to use the received tokens, otherwise they will be\\n * stuck.\\n */\\nabstract contract ERC1155Holder is ERC165, IERC1155Receiver {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return interfaceId == type(IERC1155Receiver).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    function onERC1155Received(\\n        address,\\n        address,\\n        uint256,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155Received.selector;\\n    }\\n\\n    function onERC1155BatchReceived(\\n        address,\\n        address,\\n        uint256[] memory,\\n        uint256[] memory,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC1155BatchReceived.selector;\\n    }\\n}\\n\",\"keccak256\":\"0xc26cd2e2bcf59b87c986fc653545b35010db9c585a3f3312fe61d7b1b3805735\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"src/Interfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IERC20 {\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address owner) external returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n}\\n\\n// https://github.com/RealityETH/reality-eth-monorepo/blob/main/packages/contracts/flat/RealityETH-3.0.sol\\ninterface IRealityETH_v3_0 {\\n    function askQuestionWithMinBond(\\n        uint256 template_id,\\n        string memory question,\\n        address arbitrator,\\n        uint32 timeout,\\n        uint32 opening_ts,\\n        uint256 nonce,\\n        uint256 min_bond\\n    ) external payable returns (bytes32);\\n\\n    function resultForOnceSettled(bytes32 question_id) external view returns (bytes32);\\n\\n    function getContentHash(bytes32 question_id) external view returns (bytes32);\\n\\n    function getTimeout(bytes32 question_id) external view returns (uint32);\\n\\n    function submitAnswer(bytes32 question_id, bytes32 answer, uint256 max_previous) external payable;\\n}\\n\\ninterface IConditionalTokens {\\n    function payoutNumerators(bytes32 conditionId, uint256 index) external view returns (uint256);\\n\\n    function payoutDenominator(bytes32 conditionId) external view returns (uint256);\\n\\n    function prepareCondition(address oracle, bytes32 questionId, uint256 outcomeSlotCount) external;\\n\\n    function reportPayouts(bytes32 questionId, uint256[] calldata payouts) external;\\n\\n    function splitPosition(\\n        /*IERC20*/\\n        address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint256[] calldata partition,\\n        uint256 amount\\n    ) external;\\n\\n    function mergePositions(\\n        /*IERC20*/\\n        address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint256[] calldata partition,\\n        uint256 amount\\n    ) external;\\n\\n    function redeemPositions(\\n        /*IERC20*/\\n        address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint256[] calldata indexSets\\n    ) external;\\n\\n    function getConditionId(\\n        address oracle,\\n        bytes32 questionId,\\n        uint256 outcomeSlotCount\\n    ) external pure returns (bytes32);\\n\\n    function getCollectionId(\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint256 indexSet\\n    ) external view returns (bytes32);\\n\\n    function getPositionId(address collateralToken, bytes32 collectionId) external pure returns (uint256);\\n\\n    function getOutcomeSlotCount(bytes32 conditionId) external view returns (uint256);\\n\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    function balanceOf(address owner, uint256 id) external view returns (uint256);\\n}\\n\\ninterface IWrapped1155Factory {\\n    function requireWrapped1155(\\n        /*IERC1155*/\\n        address multiToken,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external /*Wrapped1155*/ returns (IERC20);\\n\\n    function unwrap(\\n        /*IERC1155*/\\n        address multiToken,\\n        uint256 tokenId,\\n        uint256 amount,\\n        address recipient,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1a66fb5758a0ca15b706a7d9a163505803103930acd58c188565a88e81499fa3\",\"license\":\"MIT\"},\"src/Market.sol\":{\"content\":\"/**\\n *  @authors: [@xyzseer]\\n *  @reviewers: [@nvm1410, @madhurMongia, @unknownunknown1, @mani99brar]\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {IERC20} from \\\"./Interfaces.sol\\\";\\nimport \\\"./RealityProxy.sol\\\";\\n\\ncontract Market {\\n    /// @dev Flag to initialize the market only once.\\n    bool public initialized;\\n\\n    /// @dev Contains the information associated to Reality.\\n    /// @param questionsIds Reality questions ids.\\n    /// @param templateId Reality templateId.\\n    /// @param encodedQuestions Encoded questions parameters, needed to create and reopen a question.\\n    struct RealityParams {\\n        bytes32[] questionsIds;\\n        uint256 templateId;\\n        string[] encodedQuestions;\\n    }\\n\\n    /// @dev Contains the information associated to Conditional Tokens.\\n    /// @param conditionId Conditional Tokens conditionId.\\n    /// @param parentCollectionId Conditional Tokens parentCollectionId.\\n    /// @param parentOutcome Conditional outcome to use (optional).\\n    /// @param parentMarket Conditional market to use (optional).\\n    /// @param questionId Conditional Tokens questionId.\\n    /// @param wrapped1155 Outcome tokens Wrapped1155 address.\\n    /// @param data Wrapped1155 token data.\\n    struct ConditionalTokensParams {\\n        bytes32 conditionId;\\n        bytes32 parentCollectionId;\\n        uint256 parentOutcome;\\n        address parentMarket;\\n        bytes32 questionId;\\n        IERC20[] wrapped1155;\\n        bytes[] data;\\n    }\\n\\n    /// @dev The name of the market.\\n    string public marketName;\\n    /// @dev The market outcomes, doesn't include the INVALID_RESULT outcome.\\n    string[] public outcomes;\\n    /// @dev Lower bound, only used for scalar markets.\\n    uint256 public lowerBound;\\n    /// @dev Upper bound, only used for scalar markets.\\n    uint256 public upperBound;\\n    /// @dev Conditional Tokens parameters.\\n    ConditionalTokensParams public conditionalTokensParams;\\n    /// @dev Reality parameters.\\n    RealityParams public realityParams;\\n    /// @dev Oracle contract.\\n    RealityProxy public realityProxy;\\n\\n    /// @dev Initializer.\\n    /// @param _marketName The name of the market.\\n    /// @param _outcomes The market outcomes, doesn't include the INVALID_RESULT outcome.\\n    /// @param _lowerBound Lower bound, only used for scalar markets.\\n    /// @param _upperBound Upper bound, only used for scalar markets.\\n    /// @param _conditionalTokensParams Conditional Tokens params.\\n    /// @param _realityParams Reality params.\\n    /// @param _realityProxy Oracle contract.\\n    function initialize(\\n        string memory _marketName,\\n        string[] memory _outcomes,\\n        uint256 _lowerBound,\\n        uint256 _upperBound,\\n        ConditionalTokensParams memory _conditionalTokensParams,\\n        RealityParams memory _realityParams,\\n        RealityProxy _realityProxy\\n    ) external {\\n        require(!initialized, \\\"Already initialized.\\\");\\n\\n        marketName = _marketName;\\n        outcomes = _outcomes;\\n        lowerBound = _lowerBound;\\n        upperBound = _upperBound;\\n        conditionalTokensParams = _conditionalTokensParams;\\n        realityParams = _realityParams;\\n        realityProxy = _realityProxy;\\n\\n        initialized = true;\\n    }\\n\\n    /// @dev The templateId associated to the Reality question.\\n    /// @return The template id.\\n    function templateId() external view returns (uint256) {\\n        return realityParams.templateId;\\n    }\\n\\n    /// @dev Returns the Reality questions ids. Multi Scalar markets have one question for each outcome, while any other market has only one question.\\n    /// @return The Reality questions ids.\\n    function questionsIds() external view returns (bytes32[] memory) {\\n        return realityParams.questionsIds;\\n    }\\n\\n    /// @dev Encoded questions parameters, needed to create and reopen a question.\\n    /// @param index The question index.\\n    /// @return The encoded question.\\n    function encodedQuestions(uint256 index) external view returns (string memory) {\\n        return realityParams.encodedQuestions[index];\\n    }\\n\\n    /// @dev Conditional Tokens questionId.\\n    /// @return the question ID.\\n    function questionId() external view returns (bytes32) {\\n        return conditionalTokensParams.questionId;\\n    }\\n\\n    /// @dev Conditional Tokens conditionId.\\n    /// @return The condition ID.\\n    function conditionId() external view returns (bytes32) {\\n        return conditionalTokensParams.conditionId;\\n    }\\n\\n    /// @dev Conditional Tokens parentCollectionId.\\n    /// @return The parent collection ID.\\n    function parentCollectionId() external view returns (bytes32) {\\n        return conditionalTokensParams.parentCollectionId;\\n    }\\n\\n    /// @dev The parent market (optional). This market redeems to an outcome token of the parent market.\\n    /// @return The parent market address.\\n    function parentMarket() external view returns (address) {\\n        return conditionalTokensParams.parentMarket;\\n    }\\n\\n    /// @dev The parent outcome (optional). The parent market's outcome token this market redeems for.\\n    /// @return The parent outcome index.\\n    function parentOutcome() external view returns (uint256) {\\n        return conditionalTokensParams.parentOutcome;\\n    }\\n\\n    /// @dev Returns the wrapped1155 and the data corresponding to an outcome token.\\n    /// @param index The outcome index.\\n    /// @return wrapped1155 The wrapped token.\\n    /// @return data The token data.\\n    function wrappedOutcome(uint256 index) external view returns (IERC20 wrapped1155, bytes memory data) {\\n        return (conditionalTokensParams.wrapped1155[index], conditionalTokensParams.data[index]);\\n    }\\n\\n    /// @dev Returns the wrapped1155 and the data corresponding to the parent market.\\n    /// @return wrapped1155 The wrapped token.\\n    /// @return data The token data.\\n    function parentWrappedOutcome() external view returns (IERC20 wrapped1155, bytes memory data) {\\n        if (conditionalTokensParams.parentMarket != address(0)) {\\n            (wrapped1155, data) =\\n                Market(conditionalTokensParams.parentMarket).wrappedOutcome(conditionalTokensParams.parentOutcome);\\n        }\\n    }\\n\\n    /// @dev Returns the number of outcomes.\\n    /// Doesn't include the INVALID_RESULT outcome.\\n    /// @return numOutcomes The number of outcomes.\\n    function numOutcomes() external view returns (uint256) {\\n        return outcomes.length;\\n    }\\n\\n    /// @dev Helper function to resolve the market.\\n    function resolve() external {\\n        realityProxy.resolve(this);\\n    }\\n}\\n\",\"keccak256\":\"0xa1a7e99f16812a345d7cb9a063516632f5257704969914948016629605232a3d\",\"license\":\"MIT\"},\"src/RealityProxy.sol\":{\"content\":\"/**\\n *  @authors: [@xyzseer]\\n *  @reviewers: [@nvm1410, @madhurMongia, @unknownunknown1, @mani99brar]\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {IConditionalTokens, IRealityETH_v3_0} from \\\"./Interfaces.sol\\\";\\nimport \\\"./Market.sol\\\";\\n\\ncontract RealityProxy {\\n    /// @dev Conditional Tokens contract.\\n    IConditionalTokens public immutable conditionalTokens;\\n    /// @dev Reality.eth contract.\\n    IRealityETH_v3_0 public immutable realitio;\\n\\n    /// @dev INVALID_RESULT reserved value.\\n    bytes32 internal constant INVALID_RESULT = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    /// @dev Template for scalar and multi scalar markets.\\n    uint256 internal constant REALITY_UINT_TEMPLATE = 1;\\n    /// @dev Template for categorical markets.\\n    uint256 internal constant REALITY_SINGLE_SELECT_TEMPLATE = 2;\\n    /// @dev Template for multi categorical markets.\\n    uint256 internal constant REALITY_MULTI_SELECT_TEMPLATE = 3;\\n\\n    /// @dev Constructor.\\n    /// @param _conditionalTokens Conditional Tokens contract address.\\n    /// @param _realitio Reality.eth contract address.\\n    constructor(IConditionalTokens _conditionalTokens, IRealityETH_v3_0 _realitio) {\\n        conditionalTokens = _conditionalTokens;\\n        realitio = _realitio;\\n    }\\n\\n    /// @dev Resolves the specified market.\\n    /// @param market Market to resolve. UNTRUSTED.\\n    function resolve(Market market) external {\\n        bytes32[] memory questionsIds = market.questionsIds();\\n        uint256 numOutcomes = market.numOutcomes();\\n        uint256 templateId = market.templateId();\\n        uint256 low = market.lowerBound();\\n        uint256 high = market.upperBound();\\n\\n        // questionId must be a hash of all the values used to resolve a market, this way if an attacker tries to resolve a fake market by changing some value its questionId will not match the id of a valid market.\\n        bytes32 questionId = keccak256(abi.encode(questionsIds, numOutcomes, templateId, low, high));\\n\\n        if (templateId == REALITY_SINGLE_SELECT_TEMPLATE) {\\n            resolveCategoricalMarket(questionId, questionsIds, numOutcomes);\\n            return;\\n        }\\n\\n        if (templateId == REALITY_MULTI_SELECT_TEMPLATE) {\\n            resolveMultiCategoricalMarket(questionId, questionsIds, numOutcomes);\\n            return;\\n        }\\n\\n        if (questionsIds.length > 1) {\\n            resolveMultiScalarMarket(questionId, questionsIds, numOutcomes);\\n            return;\\n        }\\n\\n        resolveScalarMarket(questionId, questionsIds, low, high);\\n    }\\n\\n    /// @dev Resolves to invalid if the answer is invalid or the result is greater than the amount of outcomes.\\n    /// @param questionId Conditional Tokens questionId.\\n    /// @param questionsIds Reality questions ids.\\n    /// @param numOutcomes The number of outcomes, excluding the INVALID_RESULT outcome.\\n    function resolveCategoricalMarket(\\n        bytes32 questionId,\\n        bytes32[] memory questionsIds,\\n        uint256 numOutcomes\\n    ) internal {\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionsIds[0]));\\n        uint256[] memory payouts = new uint256[](numOutcomes + 1);\\n\\n        if (answer == uint256(INVALID_RESULT) || answer >= numOutcomes) {\\n            // the last outcome is INVALID_RESULT.\\n            payouts[numOutcomes] = 1;\\n        } else {\\n            payouts[answer] = 1;\\n        }\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n\\n    /// @dev Resolves to invalid if the answer is invalid or all the results are zero.\\n    /// @param questionId Conditional Tokens questionId.\\n    /// @param questionsIds Reality questions ids.\\n    /// @param numOutcomes The number of outcomes, excluding the INVALID_RESULT outcome.\\n    function resolveMultiCategoricalMarket(\\n        bytes32 questionId,\\n        bytes32[] memory questionsIds,\\n        uint256 numOutcomes\\n    ) internal {\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionsIds[0]));\\n        uint256[] memory payouts = new uint256[](numOutcomes + 1);\\n\\n        if (answer == uint256(INVALID_RESULT)) {\\n            // the last outcome is INVALID_RESULT.\\n            payouts[numOutcomes] = 1;\\n        } else {\\n            bool allZeroes = true;\\n\\n            for (uint256 i = 0; i < numOutcomes; i++) {\\n                payouts[i] = (answer >> i) & 1;\\n                allZeroes = allZeroes && payouts[i] == 0;\\n            }\\n\\n            if (allZeroes) {\\n                // invalid result.\\n                payouts[numOutcomes] = 1;\\n            }\\n        }\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n\\n    /// @dev Resolves to invalid if the answer is invalid.\\n    /// @param questionId Conditional Tokens questionId.\\n    /// @param questionsIds Reality questions ids.\\n    /// @param low Lower bound.\\n    /// @param high Upper bound.\\n    function resolveScalarMarket(\\n        bytes32 questionId,\\n        bytes32[] memory questionsIds,\\n        uint256 low,\\n        uint256 high\\n    ) internal {\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionsIds[0]));\\n        uint256[] memory payouts = new uint256[](3);\\n\\n        if (answer == uint256(INVALID_RESULT)) {\\n            // the last outcome is INVALID_RESULT.\\n            payouts[2] = 1;\\n        } else if (answer <= low) {\\n            payouts[0] = 1;\\n        } else if (answer >= high) {\\n            payouts[1] = 1;\\n        } else {\\n            payouts[0] = high - answer;\\n            payouts[1] = answer - low;\\n        }\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n\\n    /// @dev If any individual result is invalid then the corresponding payout element is set to 0.\\n    /// @dev If all the elements of the payout vector are 0 or all are invalid, the market resolves to invalid.\\n    /// @param questionId Conditional Tokens questionId.\\n    /// @param questionsIds Reality questions ids.\\n    /// @param numOutcomes The number of outcomes, excluding the INVALID_RESULT outcome.\\n    function resolveMultiScalarMarket(\\n        bytes32 questionId,\\n        bytes32[] memory questionsIds,\\n        uint256 numOutcomes\\n    ) internal {\\n        uint256[] memory payouts = new uint256[](numOutcomes + 1);\\n        bool allZeroesOrInvalid = true;\\n\\n        /*\\n         * We set maxPayout to a sufficiently large number for most possible outcomes that also avoids overflows in the following places:\\n         * https://github.com/gnosis/conditional-tokens-contracts/blob/master/contracts/ConditionalTokens.sol#L89\\n         * https://github.com/gnosis/conditional-tokens-contracts/blob/master/contracts/ConditionalTokens.sol#L242\\n         */\\n        uint256 maxPayout = 2 ** (256 / 2) - 1;\\n\\n        for (uint256 i = 0; i < numOutcomes; i++) {\\n            payouts[i] = uint256(realitio.resultForOnceSettled(questionsIds[i]));\\n\\n            if (payouts[i] == uint256(INVALID_RESULT)) {\\n                payouts[i] = 0;\\n            } else if (payouts[i] > maxPayout) {\\n                payouts[i] = maxPayout;\\n            }\\n\\n            allZeroesOrInvalid = allZeroesOrInvalid && payouts[i] == 0;\\n        }\\n\\n        if (allZeroesOrInvalid) {\\n            // invalid result.\\n            payouts[numOutcomes] = 1;\\n        }\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n}\\n\",\"keccak256\":\"0x896712b726fc76f3f29f79b62c5a2976bd9df55cf5d5d42b4e69fce5c078b220\",\"license\":\"MIT\"},\"src/Router.sol\":{\"content\":\"/**\\n *  @authors: [@xyzseer]\\n *  @reviewers: [@nvm1410, @madhurMongia, @unknownunknown1, @mani99brar]\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {IConditionalTokens, IERC20, IWrapped1155Factory} from \\\"./Interfaces.sol\\\";\\nimport \\\"./Market.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol\\\";\\n\\n/// @dev The Router contract replicates the main Conditional Tokens functions, but allowing to work with ERC20 outcomes instead of the ERC1155.\\ncontract Router is ERC1155Holder {\\n    /// @dev Conditional Tokens contract.\\n    IConditionalTokens public immutable conditionalTokens;\\n    /// @dev Wrapped1155Factory contract.\\n    IWrapped1155Factory public immutable wrapped1155Factory;\\n\\n    /// @dev Constructor.\\n    /// @param _conditionalTokens Conditional Tokens contract.\\n    /// @param _wrapped1155Factory Wrapped1155Factory contract.\\n    constructor(IConditionalTokens _conditionalTokens, IWrapped1155Factory _wrapped1155Factory) {\\n        conditionalTokens = _conditionalTokens;\\n        wrapped1155Factory = _wrapped1155Factory;\\n    }\\n\\n    /// @notice Transfers the collateral to the Router, splits the position and sends the ERC20 outcome tokens back to the user.\\n    /// @dev The ERC20 associated to each outcome must be previously created on the wrapped1155Factory.\\n    /// @dev Collateral tokens are deposited only if we are not splitting a deep position (parentCollectionId is bytes32(0)).\\n    /// @param collateralToken The address of the ERC20 used as collateral.\\n    /// @param market The Market to split.\\n    /// @param amount The amount of collateral to split.\\n    function splitPosition(IERC20 collateralToken, Market market, uint256 amount) public {\\n        if (market.parentCollectionId() == bytes32(0)) {\\n            // transfer the collateral tokens to the Router.\\n            collateralToken.transferFrom(msg.sender, address(this), amount);\\n        }\\n        _splitPosition(collateralToken, market, amount);\\n    }\\n\\n    /// @notice Splits a position and sends the ERC20 outcome tokens to the user.\\n    /// @dev The ERC20 associated to each outcome must be previously created on the wrapped1155Factory.\\n    /// @param collateralToken The address of the ERC20 used as collateral.\\n    /// @param market The Market to split.\\n    /// @param amount The amount of collateral to split.\\n    function _splitPosition(IERC20 collateralToken, Market market, uint256 amount) internal {\\n        bytes32 parentCollectionId = market.parentCollectionId();\\n        bytes32 conditionId = market.conditionId();\\n\\n        uint256[] memory partition = getPartition(conditionalTokens.getOutcomeSlotCount(conditionId));\\n\\n        if (parentCollectionId != bytes32(0)) {\\n            // it's splitting from a parent position, so we need to unwrap these tokens first because they will be burnt to mint the child outcome tokens.\\n            (IERC20 wrapped1155, bytes memory data) = market.parentWrappedOutcome();\\n\\n            uint256 tokenId = conditionalTokens.getPositionId(address(collateralToken), parentCollectionId);\\n\\n            wrapped1155.transferFrom(msg.sender, address(this), amount);\\n            wrapped1155Factory.unwrap(address(conditionalTokens), tokenId, amount, address(this), data);\\n        } else {\\n            collateralToken.approve(address(conditionalTokens), amount);\\n        }\\n\\n        conditionalTokens.splitPosition(address(collateralToken), parentCollectionId, conditionId, partition, amount);\\n\\n        // wrap & transfer the minted outcome tokens.\\n        for (uint256 j = 0; j < partition.length; j++) {\\n            uint256 tokenId = getTokenId(collateralToken, parentCollectionId, conditionId, partition[j]);\\n\\n            (IERC20 wrapped1155, bytes memory data) = market.wrappedOutcome(j);\\n\\n            // wrap to erc20.\\n            conditionalTokens.safeTransferFrom(address(this), address(wrapped1155Factory), tokenId, amount, data);\\n\\n            // transfer the ERC20 back to the user.\\n            require(wrapped1155.transfer(msg.sender, amount), \\\"Wrapped token transfer failed\\\");\\n        }\\n    }\\n\\n    /// @notice Merges positions and sends the collateral tokens to the user.\\n    /// @dev The ERC20 associated to each outcome must be previously created on the wrapped1155Factory.\\n    /// @dev Collateral tokens are withdrawn only if we are not merging a deep position (parentCollectionId is bytes32(0)).\\n    /// @param collateralToken The address of the ERC20 used as collateral.\\n    /// @param market The Market to merge.\\n    /// @param amount The amount of outcome tokens to merge.\\n    function mergePositions(IERC20 collateralToken, Market market, uint256 amount) public {\\n        _mergePositions(collateralToken, market, amount);\\n\\n        if (market.parentCollectionId() == bytes32(0)) {\\n            // send collateral tokens back to the user.\\n            require(collateralToken.transfer(msg.sender, amount), \\\"Collateral transfer failed\\\");\\n        }\\n    }\\n\\n    /// @notice Merges positions and receives the collateral tokens.\\n    /// @dev Callers to this function must send the collateral to the user.\\n    /// @param collateralToken The address of the ERC20 used as collateral.\\n    /// @param market The Market to merge.\\n    /// @param amount The amount of outcome tokens to merge.\\n    function _mergePositions(IERC20 collateralToken, Market market, uint256 amount) internal {\\n        bytes32 parentCollectionId = market.parentCollectionId();\\n        bytes32 conditionId = market.conditionId();\\n\\n        uint256[] memory partition = getPartition(conditionalTokens.getOutcomeSlotCount(conditionId));\\n\\n        // we need to unwrap the outcome tokens because they will be burnt during the merge.\\n\\n        for (uint256 j = 0; j < partition.length; j++) {\\n            uint256 tokenId = getTokenId(collateralToken, parentCollectionId, conditionId, partition[j]);\\n\\n            (IERC20 wrapped1155, bytes memory data) = market.wrappedOutcome(j);\\n\\n            wrapped1155.transferFrom(msg.sender, address(this), amount);\\n            wrapped1155Factory.unwrap(address(conditionalTokens), tokenId, amount, address(this), data);\\n        }\\n\\n        conditionalTokens.mergePositions(address(collateralToken), parentCollectionId, conditionId, partition, amount);\\n\\n        if (parentCollectionId != bytes32(0)) {\\n            // it's merging from a parent position, so we need to wrap these tokens and send them back to the user.\\n            uint256 tokenId = conditionalTokens.getPositionId(address(collateralToken), parentCollectionId);\\n\\n            (IERC20 wrapped1155, bytes memory data) = market.parentWrappedOutcome();\\n\\n            // wrap to erc20.\\n            conditionalTokens.safeTransferFrom(address(this), address(wrapped1155Factory), tokenId, amount, data);\\n\\n            // transfer the ERC20 back to the user.\\n            require(wrapped1155.transfer(msg.sender, amount), \\\"Wrapped token transfer failed\\\");\\n        }\\n    }\\n\\n    /// @notice Redeems positions and sends the collateral tokens to the user.\\n    /// @dev The ERC20 associated to each outcome must be previously created on the wrapped1155Factory.\\n    /// @dev Collateral tokens are withdrawn only if we are not redeeming a deep position (parentCollectionId is bytes32(0)).\\n    /// @param collateralToken The address of the ERC20 used as collateral.\\n    /// @param market The Market to redeem.\\n    /// @param outcomeIndexes The index of the outcomes to redeem.\\n    /// @param amounts Amount to redeem of each outcome.\\n    function redeemPositions(\\n        IERC20 collateralToken,\\n        Market market,\\n        uint256[] calldata outcomeIndexes,\\n        uint256[] calldata amounts\\n    ) public {\\n        bytes32 parentCollectionId = market.parentCollectionId();\\n        uint256 initialBalance;\\n\\n        if (parentCollectionId == bytes32(0)) {\\n            initialBalance = collateralToken.balanceOf(address(this));\\n        }\\n\\n        _redeemPositions(collateralToken, market, outcomeIndexes, amounts);\\n\\n        if (parentCollectionId == bytes32(0)) {\\n            uint256 finalBalance = collateralToken.balanceOf(address(this));\\n\\n            if (finalBalance > initialBalance) {\\n                // send collateral tokens back to the user.\\n                require(collateralToken.transfer(msg.sender, finalBalance - initialBalance), \\\"Collateral transfer failed\\\");\\n            }\\n        }\\n    }\\n\\n    /// @notice Redeems positions and receives the collateral tokens.\\n    /// @dev Callers to this function must send the collateral to the user.\\n    /// @param collateralToken The address of the ERC20 used as collateral.\\n    /// @param market The Market to redeem.\\n    /// @param outcomeIndexes The index of the outcomes to redeem.\\n    /// @param amounts Amount to redeem of each outcome.\\n    function _redeemPositions(\\n        IERC20 collateralToken,\\n        Market market,\\n        uint256[] calldata outcomeIndexes,\\n        uint256[] calldata amounts\\n    ) internal {\\n        bytes32 parentCollectionId = market.parentCollectionId();\\n        bytes32 conditionId = market.conditionId();\\n        uint256 tokenId = 0;\\n\\n        uint256[] memory indexSets = new uint256[](outcomeIndexes.length);\\n\\n        for (uint256 j = 0; j < outcomeIndexes.length; j++) {\\n            indexSets[j] = 1 << outcomeIndexes[j];\\n            tokenId = getTokenId(collateralToken, parentCollectionId, conditionId, indexSets[j]);\\n\\n            // first we need to unwrap the outcome tokens that will be redeemed.\\n            (IERC20 wrapped1155, bytes memory data) = market.wrappedOutcome(outcomeIndexes[j]);\\n\\n            wrapped1155.transferFrom(msg.sender, address(this), amounts[j]);\\n\\n            wrapped1155Factory.unwrap(address(conditionalTokens), tokenId, amounts[j], address(this), data);\\n        }\\n\\n        uint256 initialBalance = 0;\\n\\n        if (parentCollectionId != bytes32(0)) {\\n            // if we are redeeming from a child market, the user may already have parent tokens so we need to track the balance change.\\n            tokenId = conditionalTokens.getPositionId(address(collateralToken), parentCollectionId);\\n            initialBalance = conditionalTokens.balanceOf(address(this), tokenId);\\n        }\\n\\n        conditionalTokens.redeemPositions(address(collateralToken), parentCollectionId, conditionId, indexSets);\\n\\n        if (parentCollectionId != bytes32(0)) {\\n            // if we are redeeming from a child market, redeemPositions() returned outcome tokens of the parent market. We need to wrap and send them to the user.\\n            uint256 finalBalance = conditionalTokens.balanceOf(address(this), tokenId);\\n\\n            if (finalBalance > initialBalance) {\\n                // wrap to erc20.\\n                (IERC20 parentWrapped1155, bytes memory parentData) = market.parentWrappedOutcome();\\n\\n                conditionalTokens.safeTransferFrom(\\n                    address(this), address(wrapped1155Factory), tokenId, finalBalance - initialBalance, parentData\\n                );\\n\\n                // transfer the ERC20 back to the user.\\n                require(parentWrapped1155.transfer(msg.sender, finalBalance - initialBalance), \\\"Parent wrapped token transfer failed\\\");\\n            }\\n        }\\n    }\\n\\n    /// @dev Returns a partition containing the full set of outcomes.\\n    /// @param size Number of outcome slots.\\n    /// @return The partition containing the full set of outcomes.\\n    function getPartition(uint256 size) internal pure returns (uint256[] memory) {\\n        uint256[] memory partition = new uint256[](size);\\n\\n        for (uint256 i = 0; i < size; i++) {\\n            partition[i] = 1 << i;\\n        }\\n\\n        return partition;\\n    }\\n\\n    /// @notice Constructs a tokenId from a collateral token and an outcome collection.\\n    /// @param collateralToken The address of the ERC20 used as collateral.\\n    /// @param parentCollectionId The Conditional Tokens parent collection id.\\n    /// @param conditionId The id of the condition used to redeem.\\n    /// @param indexSet Index set of the outcome collection to combine with the parent outcome collection.\\n    /// @return The token id.\\n    function getTokenId(\\n        IERC20 collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint256 indexSet\\n    ) public view returns (uint256) {\\n        bytes32 collectionId = conditionalTokens.getCollectionId(parentCollectionId, conditionId, indexSet);\\n        return conditionalTokens.getPositionId(address(collateralToken), collectionId);\\n    }\\n\\n    /// @notice Helper function used to know the redeemable outcomes associated to a conditionId.\\n    /// @param conditionId The id of the condition.\\n    /// @return An array of outcomes where a true value indicates that the outcome is redeemable.\\n    function getWinningOutcomes(bytes32 conditionId) external view returns (bool[] memory) {\\n        bool[] memory result = new bool[](conditionalTokens.getOutcomeSlotCount(conditionId));\\n\\n        for (uint256 i = 0; i < result.length; i++) {\\n            result[i] = conditionalTokens.payoutNumerators(conditionId, i) == 0 ? false : true;\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x1c5f402f3bf48021226f88221e088595de9c0071ee22cd5ba78c876de088bd45\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b506040516200273438038062002734833981016040819052620000349162000065565b6001600160a01b039182166080521660a052620000a4565b6001600160a01b03811681146200006257600080fd5b50565b600080604083850312156200007957600080fd5b825162000086816200004c565b602084015190925062000099816200004c565b809150509250929050565b60805160a0516125ae620001866000396000818160f001528181610bce01528181610e4a015281816111d201528181611593015281816119a90152611c42015260008181610145015281816102540152818161032b015281816104190152818161049e015281816109ff01528181610bfb01528181610c8b01528181610d1c01528181610e1b01528181611201015281816112c301528181611354015281816113e4015281816114720152818161156b015281816117c90152818161188e015281816119d601528181611a6401528181611aea0152611c1301526125ae6000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c80637abef8d1116100665780637abef8d114610167578063865955a01461017c578063bc197c811461018f578063d5f82280146101c7578063f23a6e61146101da57600080fd5b806301ffc9a7146100a357806302bd74c3146100cb578063150c5b97146100eb5780631a09424a1461011f5780635bd9e29914610140575b600080fd5b6100b66100b1366004611dd5565b6101f9565b60405190151581526020015b60405180910390f35b6100de6100d9366004611e06565b610230565b6040516100c29190611e1f565b6101127f000000000000000000000000000000000000000000000000000000000000000081565b6040516100c29190611e65565b61013261012d366004611e91565b6103e8565b6040519081526020016100c2565b6101127f000000000000000000000000000000000000000000000000000000000000000081565b61017a610175366004611ecc565b610520565b005b61017a61018a366004611f58565b610631565b6101ae61019d36600461212e565b63bc197c8160e01b95945050505050565b6040516001600160e01b031990911681526020016100c2565b61017a6101d5366004611ecc565b610841565b6101ae6101e83660046121db565b63f23a6e6160e01b95945050505050565b60006001600160e01b03198216630271189760e51b148061022a57506301ffc9a760e01b6001600160e01b03198316145b92915050565b604051636a16e06160e11b8152600481018290526060906000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d42dc0c290602401602060405180830381865afa15801561029b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102bf9190612243565b6001600160401b038111156102d6576102d6611fec565b6040519080825280602002602001820160405280156102ff578160200160208202803683370190505b50905060005b81518110156103e157604051630141320560e21b815260048101859052602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690630504c81490604401602060405180830381865afa15801561037a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039e9190612243565b156103aa5760016103ad565b60005b8282815181106103bf576103bf61225c565b91151560209283029190910190910152806103d981612288565b915050610305565b5092915050565b60405163856296f760e01b815260048101849052602481018390526044810182905260009081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063856296f790606401602060405180830381865afa158015610460573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104849190612243565b60405163039dd75360e41b81529091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906339dd7530906104d590899085906004016122a1565b602060405180830381865afa1580156104f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105169190612243565b9695505050505050565b61052b83838361092c565b6000801b826001600160a01b03166344bea37e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561056d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105919190612243565b0361062c5760405163a9059cbb60e01b81526001600160a01b0384169063a9059cbb906105c490339085906004016122a1565b6020604051808303816000875af11580156105e3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060791906122ba565b61062c5760405162461bcd60e51b8152600401610623906122dc565b60405180910390fd5b505050565b6000856001600160a01b03166344bea37e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610671573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106959190612243565b9050600081610710576040516370a0823160e01b81526001600160a01b038916906370a08231906106ca903090600401611e65565b6020604051808303816000875af11580156106e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070d9190612243565b90505b61071e888888888888610f3f565b81610837576040516370a0823160e01b81526000906001600160a01b038a16906370a0823190610752903090600401611e65565b6020604051808303816000875af1158015610771573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107959190612243565b905081811115610835576001600160a01b03891663a9059cbb336107b98585612313565b6040518363ffffffff1660e01b81526004016107d69291906122a1565b6020604051808303816000875af11580156107f5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081991906122ba565b6108355760405162461bcd60e51b8152600401610623906122dc565b505b5050505050505050565b6000801b826001600160a01b03166344bea37e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610883573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a79190612243565b03610921576040516323b872dd60e01b81526001600160a01b038416906323b872dd906108dc90339030908690600401612326565b6020604051808303816000875af11580156108fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091f91906122ba565b505b61062c8383836116f6565b6000826001600160a01b03166344bea37e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561096c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109909190612243565b90506000836001600160a01b0316632ddc7de76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f69190612243565b90506000610a917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d42dc0c2846040518263ffffffff1660e01b8152600401610a4b91815260200190565b602060405180830381865afa158015610a68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8c9190612243565b611d4e565b905060005b8151811015610c73576000610ac6888686868681518110610ab957610ab961225c565b60200260200101516103e8565b9050600080886001600160a01b03166318a988a8856040518263ffffffff1660e01b8152600401610af991815260200190565b600060405180830381865afa158015610b16573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b3e919081019061236e565b6040516323b872dd60e01b815291935091506001600160a01b038316906323b872dd90610b7390339030908d90600401612326565b6020604051808303816000875af1158015610b92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb691906122ba565b506040516314abb2c960e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906352aecb2490610c2b907f00000000000000000000000000000000000000000000000000000000000000009087908d9030908890600401612426565b600060405180830381600087803b158015610c4557600080fd5b505af1158015610c59573d6000803e3d6000fd5b505050505050508080610c6b90612288565b915050610a96565b50604051639e7212ad60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639e7212ad90610cc89089908790879087908b9060040161249b565b600060405180830381600087803b158015610ce257600080fd5b505af1158015610cf6573d6000803e3d6000fd5b505084159150610f3790505760405163039dd75360e41b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906339dd753090610d53908a9088906004016122a1565b602060405180830381865afa158015610d70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d949190612243565b9050600080876001600160a01b0316636fc4eddd6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610dd7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610dff919081019061236e565b604051637921219560e11b815291935091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063f242432a90610e789030907f00000000000000000000000000000000000000000000000000000000000000009088908d9088906004016124da565b600060405180830381600087803b158015610e9257600080fd5b505af1158015610ea6573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b038516925063a9059cbb9150610ed89033908b906004016122a1565b6020604051808303816000875af1158015610ef7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1b91906122ba565b6108355760405162461bcd60e51b815260040161062390612514565b505050505050565b6000856001600160a01b03166344bea37e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa39190612243565b90506000866001600160a01b0316632ddc7de76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fe5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110099190612243565b9050600080866001600160401b0381111561102657611026611fec565b60405190808252806020026020018201604052801561104f578160200160208202803683370190505b50905060005b878110156112a35788888281811061106f5761106f61225c565b905060200201356001901b82828151811061108c5761108c61225c565b6020026020010181815250506110b08b8686858581518110610ab957610ab961225c565b92506000808b6001600160a01b03166318a988a88c8c868181106110d6576110d661225c565b905060200201356040518263ffffffff1660e01b81526004016110fb91815260200190565b600060405180830381865afa158015611118573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611140919081019061236e565b91509150816001600160a01b03166323b872dd33308c8c888181106111675761116761225c565b905060200201356040518463ffffffff1660e01b815260040161118c93929190612326565b6020604051808303816000875af11580156111ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111cf91906122ba565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166352aecb247f0000000000000000000000000000000000000000000000000000000000000000878c8c888181106112335761123361225c565b9050602002013530866040518663ffffffff1660e01b815260040161125c959493929190612426565b600060405180830381600087803b15801561127657600080fd5b505af115801561128a573d6000803e3d6000fd5b505050505050808061129b90612288565b915050611055565b50600084156113ce5760405163039dd75360e41b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906339dd7530906112fa908e9089906004016122a1565b602060405180830381865afa158015611317573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061133b9190612243565b604051627eeac760e11b81529093506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169062fdd58e9061138a90309087906004016122a1565b602060405180830381865afa1580156113a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113cb9190612243565b90505b604051626dc0df60e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906301b7037c9061141f908e9089908990889060040161254b565b600060405180830381600087803b15801561143957600080fd5b505af115801561144d573d6000803e3d6000fd5b5050861591506116e9905057604051627eeac760e11b81526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169062fdd58e906114a890309088906004016122a1565b602060405180830381865afa1580156114c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e99190612243565b9050818111156116e7576000808c6001600160a01b0316636fc4eddd6040518163ffffffff1660e01b8152600401600060405180830381865afa158015611534573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261155c919081019061236e565b90925090506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663f242432a307f0000000000000000000000000000000000000000000000000000000000000000896115bd8989612313565b866040518663ffffffff1660e01b81526004016115de9594939291906124da565b600060405180830381600087803b1580156115f857600080fd5b505af115801561160c573d6000803e3d6000fd5b50505050816001600160a01b031663a9059cbb33868661162c9190612313565b6040518363ffffffff1660e01b81526004016116499291906122a1565b6020604051808303816000875af1158015611668573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168c91906122ba565b6116e45760405162461bcd60e51b8152602060048201526024808201527f506172656e74207772617070656420746f6b656e207472616e736665722066616044820152631a5b195960e21b6064820152608401610623565b50505b505b5050505050505050505050565b6000826001600160a01b03166344bea37e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611736573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061175a9190612243565b90506000836001600160a01b0316632ddc7de76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561179c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c09190612243565b905060006118157f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d42dc0c2846040518263ffffffff1660e01b8152600401610a4b91815260200190565b90508215611a4057600080866001600160a01b0316636fc4eddd6040518163ffffffff1660e01b8152600401600060405180830381865afa15801561185e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611886919081019061236e565b9150915060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166339dd75308a886040518363ffffffff1660e01b81526004016118da9291906122a1565b602060405180830381865afa1580156118f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061191b9190612243565b6040516323b872dd60e01b81529091506001600160a01b038416906323b872dd9061194e90339030908c90600401612326565b6020604051808303816000875af115801561196d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061199191906122ba565b506040516314abb2c960e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906352aecb2490611a06907f00000000000000000000000000000000000000000000000000000000000000009085908c9030908990600401612426565b600060405180830381600087803b158015611a2057600080fd5b505af1158015611a34573d6000803e3d6000fd5b50505050505050611ad3565b60405163095ea7b360e01b81526001600160a01b0387169063095ea7b390611a8e907f00000000000000000000000000000000000000000000000000000000000000009088906004016122a1565b6020604051808303816000875af1158015611aad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ad191906122ba565b505b6040516372ce427560e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906372ce427590611b279089908790879087908b9060040161249b565b600060405180830381600087803b158015611b4157600080fd5b505af1158015611b55573d6000803e3d6000fd5b5050505060005b8151811015611d45576000611b7f888686868681518110610ab957610ab961225c565b9050600080886001600160a01b03166318a988a8856040518263ffffffff1660e01b8152600401611bb291815260200190565b600060405180830381865afa158015611bcf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611bf7919081019061236e565b604051637921219560e11b815291935091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063f242432a90611c709030907f00000000000000000000000000000000000000000000000000000000000000009088908e9088906004016124da565b600060405180830381600087803b158015611c8a57600080fd5b505af1158015611c9e573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b038516925063a9059cbb9150611cd09033908c906004016122a1565b6020604051808303816000875af1158015611cef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d1391906122ba565b611d2f5760405162461bcd60e51b815260040161062390612514565b5050508080611d3d90612288565b915050611b5c565b50505050505050565b60606000826001600160401b03811115611d6a57611d6a611fec565b604051908082528060200260200182016040528015611d93578160200160208202803683370190505b50905060005b838110156103e157806001901b828281518110611db857611db861225c565b602090810291909101015280611dcd81612288565b915050611d99565b600060208284031215611de757600080fd5b81356001600160e01b031981168114611dff57600080fd5b9392505050565b600060208284031215611e1857600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b81811015611e59578351151583529284019291840191600101611e3b565b50909695505050505050565b6001600160a01b0391909116815260200190565b6001600160a01b0381168114611e8e57600080fd5b50565b60008060008060808587031215611ea757600080fd5b8435611eb281611e79565b966020860135965060408601359560600135945092505050565b600080600060608486031215611ee157600080fd5b8335611eec81611e79565b92506020840135611efc81611e79565b929592945050506040919091013590565b60008083601f840112611f1f57600080fd5b5081356001600160401b03811115611f3657600080fd5b6020830191508360208260051b8501011115611f5157600080fd5b9250929050565b60008060008060008060808789031215611f7157600080fd5b8635611f7c81611e79565b95506020870135611f8c81611e79565b945060408701356001600160401b0380821115611fa857600080fd5b611fb48a838b01611f0d565b90965094506060890135915080821115611fcd57600080fd5b50611fda89828a01611f0d565b979a9699509497509295939492505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561202a5761202a611fec565b604052919050565b600082601f83011261204357600080fd5b813560206001600160401b0382111561205e5761205e611fec565b8160051b61206d828201612002565b928352848101820192828101908785111561208757600080fd5b83870192505b848310156120a65782358252918301919083019061208d565b979650505050505050565b60006001600160401b038211156120ca576120ca611fec565b50601f01601f191660200190565b600082601f8301126120e957600080fd5b81356120fc6120f7826120b1565b612002565b81815284602083860101111561211157600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a0868803121561214657600080fd5b853561215181611e79565b9450602086013561216181611e79565b935060408601356001600160401b038082111561217d57600080fd5b61218989838a01612032565b9450606088013591508082111561219f57600080fd5b6121ab89838a01612032565b935060808801359150808211156121c157600080fd5b506121ce888289016120d8565b9150509295509295909350565b600080600080600060a086880312156121f357600080fd5b85356121fe81611e79565b9450602086013561220e81611e79565b9350604086013592506060860135915060808601356001600160401b0381111561223757600080fd5b6121ce888289016120d8565b60006020828403121561225557600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161229a5761229a612272565b5060010190565b6001600160a01b03929092168252602082015260400190565b6000602082840312156122cc57600080fd5b81518015158114611dff57600080fd5b6020808252601a908201527f436f6c6c61746572616c207472616e73666572206661696c6564000000000000604082015260600190565b8181038181111561022a5761022a612272565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60005b8381101561236557818101518382015260200161234d565b50506000910152565b6000806040838503121561238157600080fd5b825161238c81611e79565b60208401519092506001600160401b038111156123a857600080fd5b8301601f810185136123b957600080fd5b80516123c76120f7826120b1565b8181528660208385010111156123dc57600080fd5b6123ed82602083016020860161234a565b8093505050509250929050565b6000815180845261241281602086016020860161234a565b601f01601f19169290920160200192915050565b6001600160a01b03868116825260208201869052604082018590528316606082015260a0608082018190526000906120a6908301846123fa565b600081518084526020808501945080840160005b8381101561249057815187529582019590820190600101612474565b509495945050505050565b60018060a01b038616815284602082015283604082015260a0606082015260006124c860a0830185612460565b90508260808301529695505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906120a6908301846123fa565b6020808252601d908201527f5772617070656420746f6b656e207472616e73666572206661696c6564000000604082015260600190565b60018060a01b0385168152836020820152826040820152608060608201526000610516608083018461246056fea264697066735822122088ca29dbdb7952b528436fc9744006b7ac0a446c5e5129928a170868595eaa5b64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c80637abef8d1116100665780637abef8d114610167578063865955a01461017c578063bc197c811461018f578063d5f82280146101c7578063f23a6e61146101da57600080fd5b806301ffc9a7146100a357806302bd74c3146100cb578063150c5b97146100eb5780631a09424a1461011f5780635bd9e29914610140575b600080fd5b6100b66100b1366004611dd5565b6101f9565b60405190151581526020015b60405180910390f35b6100de6100d9366004611e06565b610230565b6040516100c29190611e1f565b6101127f000000000000000000000000000000000000000000000000000000000000000081565b6040516100c29190611e65565b61013261012d366004611e91565b6103e8565b6040519081526020016100c2565b6101127f000000000000000000000000000000000000000000000000000000000000000081565b61017a610175366004611ecc565b610520565b005b61017a61018a366004611f58565b610631565b6101ae61019d36600461212e565b63bc197c8160e01b95945050505050565b6040516001600160e01b031990911681526020016100c2565b61017a6101d5366004611ecc565b610841565b6101ae6101e83660046121db565b63f23a6e6160e01b95945050505050565b60006001600160e01b03198216630271189760e51b148061022a57506301ffc9a760e01b6001600160e01b03198316145b92915050565b604051636a16e06160e11b8152600481018290526060906000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d42dc0c290602401602060405180830381865afa15801561029b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102bf9190612243565b6001600160401b038111156102d6576102d6611fec565b6040519080825280602002602001820160405280156102ff578160200160208202803683370190505b50905060005b81518110156103e157604051630141320560e21b815260048101859052602481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690630504c81490604401602060405180830381865afa15801561037a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061039e9190612243565b156103aa5760016103ad565b60005b8282815181106103bf576103bf61225c565b91151560209283029190910190910152806103d981612288565b915050610305565b5092915050565b60405163856296f760e01b815260048101849052602481018390526044810182905260009081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063856296f790606401602060405180830381865afa158015610460573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104849190612243565b60405163039dd75360e41b81529091506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906339dd7530906104d590899085906004016122a1565b602060405180830381865afa1580156104f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105169190612243565b9695505050505050565b61052b83838361092c565b6000801b826001600160a01b03166344bea37e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561056d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105919190612243565b0361062c5760405163a9059cbb60e01b81526001600160a01b0384169063a9059cbb906105c490339085906004016122a1565b6020604051808303816000875af11580156105e3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061060791906122ba565b61062c5760405162461bcd60e51b8152600401610623906122dc565b60405180910390fd5b505050565b6000856001600160a01b03166344bea37e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610671573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106959190612243565b9050600081610710576040516370a0823160e01b81526001600160a01b038916906370a08231906106ca903090600401611e65565b6020604051808303816000875af11580156106e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070d9190612243565b90505b61071e888888888888610f3f565b81610837576040516370a0823160e01b81526000906001600160a01b038a16906370a0823190610752903090600401611e65565b6020604051808303816000875af1158015610771573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107959190612243565b905081811115610835576001600160a01b03891663a9059cbb336107b98585612313565b6040518363ffffffff1660e01b81526004016107d69291906122a1565b6020604051808303816000875af11580156107f5573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061081991906122ba565b6108355760405162461bcd60e51b8152600401610623906122dc565b505b5050505050505050565b6000801b826001600160a01b03166344bea37e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610883573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a79190612243565b03610921576040516323b872dd60e01b81526001600160a01b038416906323b872dd906108dc90339030908690600401612326565b6020604051808303816000875af11580156108fb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061091f91906122ba565b505b61062c8383836116f6565b6000826001600160a01b03166344bea37e6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561096c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109909190612243565b90506000836001600160a01b0316632ddc7de76040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f69190612243565b90506000610a917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d42dc0c2846040518263ffffffff1660e01b8152600401610a4b91815260200190565b602060405180830381865afa158015610a68573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a8c9190612243565b611d4e565b905060005b8151811015610c73576000610ac6888686868681518110610ab957610ab961225c565b60200260200101516103e8565b9050600080886001600160a01b03166318a988a8856040518263ffffffff1660e01b8152600401610af991815260200190565b600060405180830381865afa158015610b16573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b3e919081019061236e565b6040516323b872dd60e01b815291935091506001600160a01b038316906323b872dd90610b7390339030908d90600401612326565b6020604051808303816000875af1158015610b92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb691906122ba565b506040516314abb2c960e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906352aecb2490610c2b907f00000000000000000000000000000000000000000000000000000000000000009087908d9030908890600401612426565b600060405180830381600087803b158015610c4557600080fd5b505af1158015610c59573d6000803e3d6000fd5b505050505050508080610c6b90612288565b915050610a96565b50604051639e7212ad60e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690639e7212ad90610cc89089908790879087908b9060040161249b565b600060405180830381600087803b158015610ce257600080fd5b505af1158015610cf6573d6000803e3d6000fd5b505084159150610f3790505760405163039dd75360e41b81526000906001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906339dd753090610d53908a9088906004016122a1565b602060405180830381865afa158015610d70573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d949190612243565b9050600080876001600160a01b0316636fc4eddd6040518163ffffffff1660e01b8152600401600060405180830381865afa158015610dd7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610dff919081019061236e565b604051637921219560e11b815291935091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063f242432a90610e789030907f00000000000000000000000000000000000000000000000000000000000000009088908d9088906004016124da565b600060405180830381600087803b158015610e9257600080fd5b505af1158015610ea6573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b038516925063a9059cbb9150610ed89033908b906004016122a1565b6020604051808303816000875af1158015610ef7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1b91906122ba565b6108355760405162461bcd60e51b815260040161062390612514565b505050505050565b6000856001600160a01b03166344bea37e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa39190612243565b90506000866001600160a01b0316632ddc7de76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610fe5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110099190612243565b9050600080866001600160401b0381111561102657611026611fec565b60405190808252806020026020018201604052801561104f578160200160208202803683370190505b50905060005b878110156112a35788888281811061106f5761106f61225c565b905060200201356001901b82828151811061108c5761108c61225c565b6020026020010181815250506110b08b8686858581518110610ab957610ab961225c565b92506000808b6001600160a01b03166318a988a88c8c868181106110d6576110d661225c565b905060200201356040518263ffffffff1660e01b81526004016110fb91815260200190565b600060405180830381865afa158015611118573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611140919081019061236e565b91509150816001600160a01b03166323b872dd33308c8c888181106111675761116761225c565b905060200201356040518463ffffffff1660e01b815260040161118c93929190612326565b6020604051808303816000875af11580156111ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111cf91906122ba565b507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166352aecb247f0000000000000000000000000000000000000000000000000000000000000000878c8c888181106112335761123361225c565b9050602002013530866040518663ffffffff1660e01b815260040161125c959493929190612426565b600060405180830381600087803b15801561127657600080fd5b505af115801561128a573d6000803e3d6000fd5b505050505050808061129b90612288565b915050611055565b50600084156113ce5760405163039dd75360e41b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906339dd7530906112fa908e9089906004016122a1565b602060405180830381865afa158015611317573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061133b9190612243565b604051627eeac760e11b81529093506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169062fdd58e9061138a90309087906004016122a1565b602060405180830381865afa1580156113a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113cb9190612243565b90505b604051626dc0df60e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906301b7037c9061141f908e9089908990889060040161254b565b600060405180830381600087803b15801561143957600080fd5b505af115801561144d573d6000803e3d6000fd5b5050861591506116e9905057604051627eeac760e11b81526000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169062fdd58e906114a890309088906004016122a1565b602060405180830381865afa1580156114c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e99190612243565b9050818111156116e7576000808c6001600160a01b0316636fc4eddd6040518163ffffffff1660e01b8152600401600060405180830381865afa158015611534573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261155c919081019061236e565b90925090506001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001663f242432a307f0000000000000000000000000000000000000000000000000000000000000000896115bd8989612313565b866040518663ffffffff1660e01b81526004016115de9594939291906124da565b600060405180830381600087803b1580156115f857600080fd5b505af115801561160c573d6000803e3d6000fd5b50505050816001600160a01b031663a9059cbb33868661162c9190612313565b6040518363ffffffff1660e01b81526004016116499291906122a1565b6020604051808303816000875af1158015611668573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061168c91906122ba565b6116e45760405162461bcd60e51b8152602060048201526024808201527f506172656e74207772617070656420746f6b656e207472616e736665722066616044820152631a5b195960e21b6064820152608401610623565b50505b505b5050505050505050505050565b6000826001600160a01b03166344bea37e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611736573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061175a9190612243565b90506000836001600160a01b0316632ddc7de76040518163ffffffff1660e01b8152600401602060405180830381865afa15801561179c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c09190612243565b905060006118157f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d42dc0c2846040518263ffffffff1660e01b8152600401610a4b91815260200190565b90508215611a4057600080866001600160a01b0316636fc4eddd6040518163ffffffff1660e01b8152600401600060405180830381865afa15801561185e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611886919081019061236e565b9150915060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166339dd75308a886040518363ffffffff1660e01b81526004016118da9291906122a1565b602060405180830381865afa1580156118f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061191b9190612243565b6040516323b872dd60e01b81529091506001600160a01b038416906323b872dd9061194e90339030908c90600401612326565b6020604051808303816000875af115801561196d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061199191906122ba565b506040516314abb2c960e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906352aecb2490611a06907f00000000000000000000000000000000000000000000000000000000000000009085908c9030908990600401612426565b600060405180830381600087803b158015611a2057600080fd5b505af1158015611a34573d6000803e3d6000fd5b50505050505050611ad3565b60405163095ea7b360e01b81526001600160a01b0387169063095ea7b390611a8e907f00000000000000000000000000000000000000000000000000000000000000009088906004016122a1565b6020604051808303816000875af1158015611aad573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ad191906122ba565b505b6040516372ce427560e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016906372ce427590611b279089908790879087908b9060040161249b565b600060405180830381600087803b158015611b4157600080fd5b505af1158015611b55573d6000803e3d6000fd5b5050505060005b8151811015611d45576000611b7f888686868681518110610ab957610ab961225c565b9050600080886001600160a01b03166318a988a8856040518263ffffffff1660e01b8152600401611bb291815260200190565b600060405180830381865afa158015611bcf573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611bf7919081019061236e565b604051637921219560e11b815291935091506001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063f242432a90611c709030907f00000000000000000000000000000000000000000000000000000000000000009088908e9088906004016124da565b600060405180830381600087803b158015611c8a57600080fd5b505af1158015611c9e573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b038516925063a9059cbb9150611cd09033908c906004016122a1565b6020604051808303816000875af1158015611cef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d1391906122ba565b611d2f5760405162461bcd60e51b815260040161062390612514565b5050508080611d3d90612288565b915050611b5c565b50505050505050565b60606000826001600160401b03811115611d6a57611d6a611fec565b604051908082528060200260200182016040528015611d93578160200160208202803683370190505b50905060005b838110156103e157806001901b828281518110611db857611db861225c565b602090810291909101015280611dcd81612288565b915050611d99565b600060208284031215611de757600080fd5b81356001600160e01b031981168114611dff57600080fd5b9392505050565b600060208284031215611e1857600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b81811015611e59578351151583529284019291840191600101611e3b565b50909695505050505050565b6001600160a01b0391909116815260200190565b6001600160a01b0381168114611e8e57600080fd5b50565b60008060008060808587031215611ea757600080fd5b8435611eb281611e79565b966020860135965060408601359560600135945092505050565b600080600060608486031215611ee157600080fd5b8335611eec81611e79565b92506020840135611efc81611e79565b929592945050506040919091013590565b60008083601f840112611f1f57600080fd5b5081356001600160401b03811115611f3657600080fd5b6020830191508360208260051b8501011115611f5157600080fd5b9250929050565b60008060008060008060808789031215611f7157600080fd5b8635611f7c81611e79565b95506020870135611f8c81611e79565b945060408701356001600160401b0380821115611fa857600080fd5b611fb48a838b01611f0d565b90965094506060890135915080821115611fcd57600080fd5b50611fda89828a01611f0d565b979a9699509497509295939492505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561202a5761202a611fec565b604052919050565b600082601f83011261204357600080fd5b813560206001600160401b0382111561205e5761205e611fec565b8160051b61206d828201612002565b928352848101820192828101908785111561208757600080fd5b83870192505b848310156120a65782358252918301919083019061208d565b979650505050505050565b60006001600160401b038211156120ca576120ca611fec565b50601f01601f191660200190565b600082601f8301126120e957600080fd5b81356120fc6120f7826120b1565b612002565b81815284602083860101111561211157600080fd5b816020850160208301376000918101602001919091529392505050565b600080600080600060a0868803121561214657600080fd5b853561215181611e79565b9450602086013561216181611e79565b935060408601356001600160401b038082111561217d57600080fd5b61218989838a01612032565b9450606088013591508082111561219f57600080fd5b6121ab89838a01612032565b935060808801359150808211156121c157600080fd5b506121ce888289016120d8565b9150509295509295909350565b600080600080600060a086880312156121f357600080fd5b85356121fe81611e79565b9450602086013561220e81611e79565b9350604086013592506060860135915060808601356001600160401b0381111561223757600080fd5b6121ce888289016120d8565b60006020828403121561225557600080fd5b5051919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60006001820161229a5761229a612272565b5060010190565b6001600160a01b03929092168252602082015260400190565b6000602082840312156122cc57600080fd5b81518015158114611dff57600080fd5b6020808252601a908201527f436f6c6c61746572616c207472616e73666572206661696c6564000000000000604082015260600190565b8181038181111561022a5761022a612272565b6001600160a01b039384168152919092166020820152604081019190915260600190565b60005b8381101561236557818101518382015260200161234d565b50506000910152565b6000806040838503121561238157600080fd5b825161238c81611e79565b60208401519092506001600160401b038111156123a857600080fd5b8301601f810185136123b957600080fd5b80516123c76120f7826120b1565b8181528660208385010111156123dc57600080fd5b6123ed82602083016020860161234a565b8093505050509250929050565b6000815180845261241281602086016020860161234a565b601f01601f19169290920160200192915050565b6001600160a01b03868116825260208201869052604082018590528316606082015260a0608082018190526000906120a6908301846123fa565b600081518084526020808501945080840160005b8381101561249057815187529582019590820190600101612474565b509495945050505050565b60018060a01b038616815284602082015283604082015260a0606082015260006124c860a0830185612460565b90508260808301529695505050505050565b6001600160a01b03868116825285166020820152604081018490526060810183905260a0608082018190526000906120a6908301846123fa565b6020808252601d908201527f5772617070656420746f6b656e207472616e73666572206661696c6564000000604082015260600190565b60018060a01b0385168152836020820152826040820152608060608201526000610516608083018461246056fea264697066735822122088ca29dbdb7952b528436fc9744006b7ac0a446c5e5129928a170868595eaa5b64736f6c63430008140033",
  "devdoc": {
    "details": "The Router contract replicates the main Conditional Tokens functions, but allowing to work with ERC20 outcomes instead of the ERC1155.",
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "Constructor.",
        "params": {
          "_conditionalTokens": "Conditional Tokens contract.",
          "_wrapped1155Factory": "Wrapped1155Factory contract."
        }
      },
      "getTokenId(address,bytes32,bytes32,uint256)": {
        "params": {
          "collateralToken": "The address of the ERC20 used as collateral.",
          "conditionId": "The id of the condition used to redeem.",
          "indexSet": "Index set of the outcome collection to combine with the parent outcome collection.",
          "parentCollectionId": "The Conditional Tokens parent collection id."
        },
        "returns": {
          "_0": "The token id."
        }
      },
      "getWinningOutcomes(bytes32)": {
        "params": {
          "conditionId": "The id of the condition."
        },
        "returns": {
          "_0": "An array of outcomes where a true value indicates that the outcome is redeemable."
        }
      },
      "mergePositions(address,address,uint256)": {
        "details": "The ERC20 associated to each outcome must be previously created on the wrapped1155Factory.Collateral tokens are withdrawn only if we are not merging a deep position (parentCollectionId is bytes32(0)).",
        "params": {
          "amount": "The amount of outcome tokens to merge.",
          "collateralToken": "The address of the ERC20 used as collateral.",
          "market": "The Market to merge."
        }
      },
      "redeemPositions(address,address,uint256[],uint256[])": {
        "details": "The ERC20 associated to each outcome must be previously created on the wrapped1155Factory.Collateral tokens are withdrawn only if we are not redeeming a deep position (parentCollectionId is bytes32(0)).",
        "params": {
          "amounts": "Amount to redeem of each outcome.",
          "collateralToken": "The address of the ERC20 used as collateral.",
          "market": "The Market to redeem.",
          "outcomeIndexes": "The index of the outcomes to redeem."
        }
      },
      "splitPosition(address,address,uint256)": {
        "details": "The ERC20 associated to each outcome must be previously created on the wrapped1155Factory.Collateral tokens are deposited only if we are not splitting a deep position (parentCollectionId is bytes32(0)).",
        "params": {
          "amount": "The amount of collateral to split.",
          "collateralToken": "The address of the ERC20 used as collateral.",
          "market": "The Market to split."
        }
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      }
    },
    "stateVariables": {
      "conditionalTokens": {
        "details": "Conditional Tokens contract."
      },
      "wrapped1155Factory": {
        "details": "Wrapped1155Factory contract."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getTokenId(address,bytes32,bytes32,uint256)": {
        "notice": "Constructs a tokenId from a collateral token and an outcome collection."
      },
      "getWinningOutcomes(bytes32)": {
        "notice": "Helper function used to know the redeemable outcomes associated to a conditionId."
      },
      "mergePositions(address,address,uint256)": {
        "notice": "Merges positions and sends the collateral tokens to the user."
      },
      "redeemPositions(address,address,uint256[],uint256[])": {
        "notice": "Redeems positions and sends the collateral tokens to the user."
      },
      "splitPosition(address,address,uint256)": {
        "notice": "Transfers the collateral to the Router, splits the position and sends the ERC20 outcome tokens back to the user."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}