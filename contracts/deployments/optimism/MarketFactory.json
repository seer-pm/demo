{
  "address": "0x12BB49DeB8f293435e27F6F4Ab140184604cE346",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_market",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_arbitrator",
          "type": "address"
        },
        {
          "internalType": "contract IRealityETH_v3_0",
          "name": "_realitio",
          "type": "address"
        },
        {
          "internalType": "contract IWrapped1155Factory",
          "name": "_wrapped1155Factory",
          "type": "address"
        },
        {
          "internalType": "contract IConditionalTokens",
          "name": "_conditionalTokens",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "internalType": "contract RealityProxy",
          "name": "_realityProxy",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_questionTimeout",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FailedDeployment",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "InsufficientBalance",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "market",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "marketName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "parentMarket",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "conditionId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "questionId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32[]",
          "name": "questionsIds",
          "type": "bytes32[]"
        }
      ],
      "name": "NewMarket",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "allMarkets",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "arbitrator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "conditionalTokens",
      "outputs": [
        {
          "internalType": "contract IConditionalTokens",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "marketName",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "outcomes",
              "type": "string[]"
            },
            {
              "internalType": "string",
              "name": "questionStart",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "questionEnd",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "outcomeType",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "parentOutcome",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "parentMarket",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "category",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "lang",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "lowerBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upperBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minBond",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "openingTime",
              "type": "uint32"
            },
            {
              "internalType": "string[]",
              "name": "tokenNames",
              "type": "string[]"
            }
          ],
          "internalType": "struct MarketFactory.CreateMarketParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "createCategoricalMarket",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "marketName",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "outcomes",
              "type": "string[]"
            },
            {
              "internalType": "string",
              "name": "questionStart",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "questionEnd",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "outcomeType",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "parentOutcome",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "parentMarket",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "category",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "lang",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "lowerBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upperBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minBond",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "openingTime",
              "type": "uint32"
            },
            {
              "internalType": "string[]",
              "name": "tokenNames",
              "type": "string[]"
            }
          ],
          "internalType": "struct MarketFactory.CreateMarketParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "createMultiCategoricalMarket",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "marketName",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "outcomes",
              "type": "string[]"
            },
            {
              "internalType": "string",
              "name": "questionStart",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "questionEnd",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "outcomeType",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "parentOutcome",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "parentMarket",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "category",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "lang",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "lowerBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upperBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minBond",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "openingTime",
              "type": "uint32"
            },
            {
              "internalType": "string[]",
              "name": "tokenNames",
              "type": "string[]"
            }
          ],
          "internalType": "struct MarketFactory.CreateMarketParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "createMultiScalarMarket",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "marketName",
              "type": "string"
            },
            {
              "internalType": "string[]",
              "name": "outcomes",
              "type": "string[]"
            },
            {
              "internalType": "string",
              "name": "questionStart",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "questionEnd",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "outcomeType",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "parentOutcome",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "parentMarket",
              "type": "address"
            },
            {
              "internalType": "string",
              "name": "category",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "lang",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "lowerBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upperBound",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minBond",
              "type": "uint256"
            },
            {
              "internalType": "uint32",
              "name": "openingTime",
              "type": "uint32"
            },
            {
              "internalType": "string[]",
              "name": "tokenNames",
              "type": "string[]"
            }
          ],
          "internalType": "struct MarketFactory.CreateMarketParams",
          "name": "params",
          "type": "tuple"
        }
      ],
      "name": "createScalarMarket",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "market",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marketCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "markets",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "questionTimeout",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "realitio",
      "outputs": [
        {
          "internalType": "contract IRealityETH_v3_0",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "realityProxy",
      "outputs": [
        {
          "internalType": "contract RealityProxy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrapped1155Factory",
      "outputs": [
        {
          "internalType": "contract IWrapped1155Factory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x247c42d02687a19c08f400bcc70ad758bf991dd27b6769ab8b1b2be10835d665",
  "receipt": {
    "to": null,
    "from": "0x4EDCA105188a0783Ab3A6f09c50567D1E3F8591D",
    "contractAddress": "0x12BB49DeB8f293435e27F6F4Ab140184604cE346",
    "transactionIndex": 20,
    "gasUsed": "2191553",
    "logsBloom": "0x
    "blockHash": "0xc936e0602384f230aeab389ea6b4d21072c78c31f0df9b269e9107624da71de1",
    "transactionHash": "0x247c42d02687a19c08f400bcc70ad758bf991dd27b6769ab8b1b2be10835d665",
    "logs": [],
    "blockNumber": 139945435,
    "cumulativeGasUsed": "4703105",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xAb797C4C6022A401c31543E316D3cd04c67a87fC",
    "0x0000000000000000000000000000000000000000",
    "0x0eF940F7f053a2eF5D6578841072488aF0c7d89A",
    "0xd194319d1804c1051dd21ba1dc931ca72410b79f",
    "0x8bdC504dC3A05310059c1c67E0A2667309D27B93",
    "0xb5b2dc7fd34c249f4be7fb1fcea07950784229e0",
    "0xfE8bF5140F00de6F75BAFa3Ca0f4ebf2084A46B2",
    302400
  ],
  "numDeployments": 1,
  "solcInputHash": "1956f874b7d1788e92cca2a771e1af4e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_market\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_arbitrator\",\"type\":\"address\"},{\"internalType\":\"contract IRealityETH_v3_0\",\"name\":\"_realitio\",\"type\":\"address\"},{\"internalType\":\"contract IWrapped1155Factory\",\"name\":\"_wrapped1155Factory\",\"type\":\"address\"},{\"internalType\":\"contract IConditionalTokens\",\"name\":\"_conditionalTokens\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"contract RealityProxy\",\"name\":\"_realityProxy\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_questionTimeout\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FailedDeployment\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"InsufficientBalance\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"market\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"parentMarket\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"conditionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"questionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32[]\",\"name\":\"questionsIds\",\"type\":\"bytes32[]\"}],\"name\":\"NewMarket\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"allMarkets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"arbitrator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"conditionalTokens\",\"outputs\":[{\"internalType\":\"contract IConditionalTokens\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"outcomes\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"questionStart\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"questionEnd\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"outcomeType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"parentOutcome\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"parentMarket\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lang\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"lowerBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBond\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"openingTime\",\"type\":\"uint32\"},{\"internalType\":\"string[]\",\"name\":\"tokenNames\",\"type\":\"string[]\"}],\"internalType\":\"struct MarketFactory.CreateMarketParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"createCategoricalMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"outcomes\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"questionStart\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"questionEnd\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"outcomeType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"parentOutcome\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"parentMarket\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lang\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"lowerBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBond\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"openingTime\",\"type\":\"uint32\"},{\"internalType\":\"string[]\",\"name\":\"tokenNames\",\"type\":\"string[]\"}],\"internalType\":\"struct MarketFactory.CreateMarketParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"createMultiCategoricalMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"outcomes\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"questionStart\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"questionEnd\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"outcomeType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"parentOutcome\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"parentMarket\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lang\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"lowerBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBond\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"openingTime\",\"type\":\"uint32\"},{\"internalType\":\"string[]\",\"name\":\"tokenNames\",\"type\":\"string[]\"}],\"internalType\":\"struct MarketFactory.CreateMarketParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"createMultiScalarMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"marketName\",\"type\":\"string\"},{\"internalType\":\"string[]\",\"name\":\"outcomes\",\"type\":\"string[]\"},{\"internalType\":\"string\",\"name\":\"questionStart\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"questionEnd\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"outcomeType\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"parentOutcome\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"parentMarket\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"lang\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"lowerBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperBound\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minBond\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"openingTime\",\"type\":\"uint32\"},{\"internalType\":\"string[]\",\"name\":\"tokenNames\",\"type\":\"string[]\"}],\"internalType\":\"struct MarketFactory.CreateMarketParams\",\"name\":\"params\",\"type\":\"tuple\"}],\"name\":\"createScalarMarket\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"market\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marketCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"markets\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"questionTimeout\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"realitio\",\"outputs\":[{\"internalType\":\"contract IRealityETH_v3_0\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"realityProxy\",\"outputs\":[{\"internalType\":\"contract RealityProxy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrapped1155Factory\",\"outputs\":[{\"internalType\":\"contract IWrapped1155Factory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"FailedDeployment()\":[{\"details\":\"The deployment failed.\"}],\"InsufficientBalance(uint256,uint256)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}]},\"events\":{\"NewMarket(address,string,address,bytes32,bytes32,bytes32[])\":{\"details\":\"To be emitted when a new market is created.\",\"params\":{\"conditionId\":\"Conditional Tokens conditionId.\",\"market\":\"The new market address.\",\"marketName\":\"The name of the market.\",\"parentMarket\":\"Conditional market to use.\",\"questionId\":\"Conditional Tokens questionId.\",\"questionsIds\":\"Reality questions ids.\"}}},\"kind\":\"dev\",\"methods\":{\"allMarkets()\":{\"details\":\"Returns all the markets created by this factory.\",\"returns\":{\"_0\":\"The addresses of the markets.\"}},\"constructor\":{\"details\":\"Constructor.\",\"params\":{\"_arbitrator\":\"Address of the arbitrator that is going to resolve Realitio disputes.\",\"_collateralToken\":\"Address of the collateral token.\",\"_conditionalTokens\":\"Address of the ConditionalTokens implementation.\",\"_market\":\"Address of the market contract that is going to be used for each new deployment.\",\"_questionTimeout\":\"Reality question timeout.\",\"_realitio\":\"Address of the Realitio implementation.\",\"_realityProxy\":\"Address of the RealityProxy implementation.\",\"_wrapped1155Factory\":\"Address of the Wrapped1155Factory implementation.\"}},\"createCategoricalMarket((string,string[],string,string,string,uint256,address,string,string,uint256,uint256,uint256,uint32,string[]))\":{\"details\":\"Creates a Categorical market.\",\"params\":{\"params\":\"CreateMarketParams instance.\"},\"returns\":{\"_0\":\"The new market address.\"}},\"createMultiCategoricalMarket((string,string[],string,string,string,uint256,address,string,string,uint256,uint256,uint256,uint32,string[]))\":{\"details\":\"Creates a Multi Categorical market.\",\"params\":{\"params\":\"CreateMarketParams instance.\"},\"returns\":{\"_0\":\"The new market address.\"}},\"createMultiScalarMarket((string,string[],string,string,string,uint256,address,string,string,uint256,uint256,uint256,uint32,string[]))\":{\"details\":\"Creates a Multi Scalar market.\",\"params\":{\"params\":\"CreateMarketParams instance.\"},\"returns\":{\"_0\":\"The new market address.\"}},\"createScalarMarket((string,string[],string,string,string,uint256,address,string,string,uint256,uint256,uint256,uint32,string[]))\":{\"details\":\"Creates a Scalar market.\",\"params\":{\"params\":\"CreateMarketParams instance.\"},\"returns\":{\"_0\":\"The new market address.\"}},\"marketCount()\":{\"returns\":{\"_0\":\"The amount of markets.\"}}},\"stateVariables\":{\"REALITY_MULTI_SELECT_TEMPLATE\":{\"details\":\"Template for multi categorical markets.\"},\"REALITY_SINGLE_SELECT_TEMPLATE\":{\"details\":\"Template for categorical markets.\"},\"REALITY_UINT_TEMPLATE\":{\"details\":\"Template for scalar and multi scalar markets.\"},\"arbitrator\":{\"details\":\"Arbitrator contract.\"},\"collateralToken\":{\"details\":\"Conditional Tokens collateral token contract.\"},\"conditionalTokens\":{\"details\":\"Conditional Tokens contract.\"},\"market\":{\"details\":\"Market contract.\"},\"markets\":{\"details\":\"Markets created by this factory.\"},\"questionTimeout\":{\"details\":\"Reality question timeout.\"},\"realitio\":{\"details\":\"Reality.eth contract.\"},\"realityProxy\":{\"details\":\"Oracle contract.\"},\"wrapped1155Factory\":{\"details\":\"Wrapped1155Factory contract.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createCategoricalMarket((string,string[],string,string,string,uint256,address,string,string,uint256,uint256,uint256,uint32,string[]))\":{\"notice\":\"Categorical markets are associated with a Reality question that has only one answer.\"},\"createMultiCategoricalMarket((string,string[],string,string,string,uint256,address,string,string,uint256,uint256,uint256,uint32,string[]))\":{\"notice\":\"Multi Categorical markets are associated with a Reality question that has one or more answers.\"},\"createMultiScalarMarket((string,string[],string,string,string,uint256,address,string,string,uint256,uint256,uint256,uint32,string[]))\":{\"notice\":\"Multi Scalar markets are associated with two or more Reality questions, and each one of them resolves to a numeric value.\"},\"createScalarMarket((string,string[],string,string,string,uint256,address,string,string,uint256,uint256,uint256,uint32,string[]))\":{\"notice\":\"Scalar markets are associated with a Reality question that resolves to a numeric value.\"},\"marketCount()\":{\"notice\":\"Returns the amount of markets created by this factory.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/MarketFactory.sol\":\"MarketFactory\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.3.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Create2} from \\\"../utils/Create2.sol\\\";\\nimport {Errors} from \\\"../utils/Errors.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[ERC-1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n */\\nlibrary Clones {\\n    error CloneArgumentsTooLong();\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behavior of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        return clone(implementation, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Clones-clone-address-}[clone], but with a `value` parameter to send native currency\\n     * to the new contract.\\n     *\\n     * NOTE: Using a non-zero value at creation will require the contract using this function (e.g. a factory)\\n     * to always have enough balance for new deployments. Consider exposing this function under a payable method.\\n     */\\n    function clone(address implementation, uint256 value) internal returns (address instance) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        assembly (\\\"memory-safe\\\") {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(value, 0x09, 0x37)\\n        }\\n        if (instance == address(0)) {\\n            revert Errors.FailedDeployment();\\n        }\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behavior of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple times will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        return cloneDeterministic(implementation, salt, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Clones-cloneDeterministic-address-bytes32-}[cloneDeterministic], but with\\n     * a `value` parameter to send native currency to the new contract.\\n     *\\n     * NOTE: Using a non-zero value at creation will require the contract using this function (e.g. a factory)\\n     * to always have enough balance for new deployments. Consider exposing this function under a payable method.\\n     */\\n    function cloneDeterministic(\\n        address implementation,\\n        bytes32 salt,\\n        uint256 value\\n    ) internal returns (address instance) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        assembly (\\\"memory-safe\\\") {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(value, 0x09, 0x37, salt)\\n        }\\n        if (instance == address(0)) {\\n            revert Errors.FailedDeployment();\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := and(keccak256(add(ptr, 0x43), 0x55), 0xffffffffffffffffffffffffffffffffffffffff)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behavior of `implementation` with custom\\n     * immutable arguments. These are provided through `args` and cannot be changed after deployment. To\\n     * access the arguments within the implementation, use {fetchCloneArgs}.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function cloneWithImmutableArgs(address implementation, bytes memory args) internal returns (address instance) {\\n        return cloneWithImmutableArgs(implementation, args, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Clones-cloneWithImmutableArgs-address-bytes-}[cloneWithImmutableArgs], but with a `value`\\n     * parameter to send native currency to the new contract.\\n     *\\n     * NOTE: Using a non-zero value at creation will require the contract using this function (e.g. a factory)\\n     * to always have enough balance for new deployments. Consider exposing this function under a payable method.\\n     */\\n    function cloneWithImmutableArgs(\\n        address implementation,\\n        bytes memory args,\\n        uint256 value\\n    ) internal returns (address instance) {\\n        if (address(this).balance < value) {\\n            revert Errors.InsufficientBalance(address(this).balance, value);\\n        }\\n        bytes memory bytecode = _cloneCodeWithImmutableArgs(implementation, args);\\n        assembly (\\\"memory-safe\\\") {\\n            instance := create(value, add(bytecode, 0x20), mload(bytecode))\\n        }\\n        if (instance == address(0)) {\\n            revert Errors.FailedDeployment();\\n        }\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behavior of `implementation` with custom\\n     * immutable arguments. These are provided through `args` and cannot be changed after deployment. To\\n     * access the arguments within the implementation, use {fetchCloneArgs}.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy the clone. Using the same\\n     * `implementation`, `args` and `salt` multiple times will revert, since the clones cannot be deployed twice\\n     * at the same address.\\n     */\\n    function cloneDeterministicWithImmutableArgs(\\n        address implementation,\\n        bytes memory args,\\n        bytes32 salt\\n    ) internal returns (address instance) {\\n        return cloneDeterministicWithImmutableArgs(implementation, args, salt, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Clones-cloneDeterministicWithImmutableArgs-address-bytes-bytes32-}[cloneDeterministicWithImmutableArgs],\\n     * but with a `value` parameter to send native currency to the new contract.\\n     *\\n     * NOTE: Using a non-zero value at creation will require the contract using this function (e.g. a factory)\\n     * to always have enough balance for new deployments. Consider exposing this function under a payable method.\\n     */\\n    function cloneDeterministicWithImmutableArgs(\\n        address implementation,\\n        bytes memory args,\\n        bytes32 salt,\\n        uint256 value\\n    ) internal returns (address instance) {\\n        bytes memory bytecode = _cloneCodeWithImmutableArgs(implementation, args);\\n        return Create2.deploy(value, salt, bytecode);\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministicWithImmutableArgs}.\\n     */\\n    function predictDeterministicAddressWithImmutableArgs(\\n        address implementation,\\n        bytes memory args,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        bytes memory bytecode = _cloneCodeWithImmutableArgs(implementation, args);\\n        return Create2.computeAddress(salt, keccak256(bytecode), deployer);\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministicWithImmutableArgs}.\\n     */\\n    function predictDeterministicAddressWithImmutableArgs(\\n        address implementation,\\n        bytes memory args,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddressWithImmutableArgs(implementation, args, salt, address(this));\\n    }\\n\\n    /**\\n     * @dev Get the immutable args attached to a clone.\\n     *\\n     * - If `instance` is a clone that was deployed using `clone` or `cloneDeterministic`, this\\n     *   function will return an empty array.\\n     * - If `instance` is a clone that was deployed using `cloneWithImmutableArgs` or\\n     *   `cloneDeterministicWithImmutableArgs`, this function will return the args array used at\\n     *   creation.\\n     * - If `instance` is NOT a clone deployed using this library, the behavior is undefined. This\\n     *   function should only be used to check addresses that are known to be clones.\\n     */\\n    function fetchCloneArgs(address instance) internal view returns (bytes memory) {\\n        bytes memory result = new bytes(instance.code.length - 45); // revert if length is too short\\n        assembly (\\\"memory-safe\\\") {\\n            extcodecopy(instance, add(result, 32), 45, mload(result))\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Helper that prepares the initcode of the proxy with immutable args.\\n     *\\n     * An assembly variant of this function requires copying the `args` array, which can be efficiently done using\\n     * `mcopy`. Unfortunately, that opcode is not available before cancun. A pure solidity implementation using\\n     * abi.encodePacked is more expensive but also more portable and easier to review.\\n     *\\n     * NOTE: https://eips.ethereum.org/EIPS/eip-170[EIP-170] limits the length of the contract code to 24576 bytes.\\n     * With the proxy code taking 45 bytes, that limits the length of the immutable args to 24531 bytes.\\n     */\\n    function _cloneCodeWithImmutableArgs(\\n        address implementation,\\n        bytes memory args\\n    ) private pure returns (bytes memory) {\\n        if (args.length > 24531) revert CloneArgumentsTooLong();\\n        return\\n            abi.encodePacked(\\n                hex\\\"61\\\",\\n                uint16(args.length + 45),\\n                hex\\\"3d81600a3d39f3363d3d373d3d3d363d73\\\",\\n                implementation,\\n                hex\\\"5af43d82803e903d91602b57fd5bf3\\\",\\n                args\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0x7162fa3c6971aa6f0a70160fed018edbb8b1db3af9b034ef3f7c224c3bdb7431\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Create2.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Errors} from \\\"./Errors.sol\\\";\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev There's no code to deploy.\\n     */\\n    error Create2EmptyBytecode();\\n\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(uint256 amount, bytes32 salt, bytes memory bytecode) internal returns (address addr) {\\n        if (address(this).balance < amount) {\\n            revert Errors.InsufficientBalance(address(this).balance, amount);\\n        }\\n        if (bytecode.length == 0) {\\n            revert Create2EmptyBytecode();\\n        }\\n        assembly (\\\"memory-safe\\\") {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n            // if no address was created, and returndata is not empty, bubble revert\\n            if and(iszero(addr), not(iszero(returndatasize()))) {\\n                let p := mload(0x40)\\n                returndatacopy(p, 0, returndatasize())\\n                revert(p, returndatasize())\\n            }\\n        }\\n        if (addr == address(0)) {\\n            revert Errors.FailedDeployment();\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash, address deployer) internal pure returns (address addr) {\\n        assembly (\\\"memory-safe\\\") {\\n            let ptr := mload(0x40) // Get free memory pointer\\n\\n            // |                   | \\u2193 ptr ...  \\u2193 ptr + 0x0B (start) ...  \\u2193 ptr + 0x20 ...  \\u2193 ptr + 0x40 ...   |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\\n            // | 0xFF              |            FF                                                             |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\\n            // | keccak(start, 85) |            \\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191 |\\n\\n            mstore(add(ptr, 0x40), bytecodeHash)\\n            mstore(add(ptr, 0x20), salt)\\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\\n            mstore8(start, 0xff)\\n            addr := and(keccak256(start, 85), 0xffffffffffffffffffffffffffffffffffffffff)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbb7e8401583d26268ea9103013bcdcd90866a7718bd91105ebd21c9bf11f4f06\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Errors.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of common custom errors used in multiple contracts\\n *\\n * IMPORTANT: Backwards compatibility is not guaranteed in future versions of the library.\\n * It is recommended to avoid relying on the error API for critical functionality.\\n *\\n * _Available since v5.1._\\n */\\nlibrary Errors {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error InsufficientBalance(uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedCall();\\n\\n    /**\\n     * @dev The deployment failed.\\n     */\\n    error FailedDeployment();\\n\\n    /**\\n     * @dev A necessary precompile is missing.\\n     */\\n    error MissingPrecompile(address);\\n}\\n\",\"keccak256\":\"0x6afa713bfd42cf0f7656efa91201007ac465e42049d7de1d50753a373648c123\",\"license\":\"MIT\"},\"src/Interfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\ninterface IERC20 {\\n    function symbol() external view returns (string memory);\\n\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function balanceOf(address owner) external returns (uint256);\\n\\n    function totalSupply() external view returns (uint256);\\n}\\n\\n// https://github.com/RealityETH/reality-eth-monorepo/blob/main/packages/contracts/flat/RealityETH-3.0.sol\\ninterface IRealityETH_v3_0 {\\n    function askQuestionWithMinBond(\\n        uint256 template_id,\\n        string memory question,\\n        address arbitrator,\\n        uint32 timeout,\\n        uint32 opening_ts,\\n        uint256 nonce,\\n        uint256 min_bond\\n    ) external payable returns (bytes32);\\n\\n    function resultForOnceSettled(bytes32 question_id) external view returns (bytes32);\\n\\n    function getContentHash(bytes32 question_id) external view returns (bytes32);\\n\\n    function getTimeout(bytes32 question_id) external view returns (uint32);\\n\\n    function submitAnswer(bytes32 question_id, bytes32 answer, uint256 max_previous) external payable;\\n}\\n\\ninterface IConditionalTokens {\\n    function payoutNumerators(bytes32 conditionId, uint256 index) external view returns (uint256);\\n\\n    function payoutDenominator(bytes32 conditionId) external view returns (uint256);\\n\\n    function prepareCondition(address oracle, bytes32 questionId, uint256 outcomeSlotCount) external;\\n\\n    function reportPayouts(bytes32 questionId, uint256[] calldata payouts) external;\\n\\n    function splitPosition(\\n        /*IERC20*/\\n        address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint256[] calldata partition,\\n        uint256 amount\\n    ) external;\\n\\n    function mergePositions(\\n        /*IERC20*/\\n        address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint256[] calldata partition,\\n        uint256 amount\\n    ) external;\\n\\n    function redeemPositions(\\n        /*IERC20*/\\n        address collateralToken,\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint256[] calldata indexSets\\n    ) external;\\n\\n    function getConditionId(\\n        address oracle,\\n        bytes32 questionId,\\n        uint256 outcomeSlotCount\\n    ) external pure returns (bytes32);\\n\\n    function getCollectionId(\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint256 indexSet\\n    ) external view returns (bytes32);\\n\\n    function getPositionId(address collateralToken, bytes32 collectionId) external pure returns (uint256);\\n\\n    function getOutcomeSlotCount(bytes32 conditionId) external view returns (uint256);\\n\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    function balanceOf(address owner, uint256 id) external view returns (uint256);\\n}\\n\\ninterface IWrapped1155Factory {\\n    function requireWrapped1155(\\n        /*IERC1155*/\\n        address multiToken,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external /*Wrapped1155*/ returns (IERC20);\\n\\n    function unwrap(\\n        /*IERC1155*/\\n        address multiToken,\\n        uint256 tokenId,\\n        uint256 amount,\\n        address recipient,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x8892a345d504bf2d565948b1ec7a5302cf45024e6a0ea3ac810d5eb0b2827d77\",\"license\":\"MIT\"},\"src/Market.sol\":{\"content\":\"/**\\n *  @authors: [@xyzseer]\\n *  @reviewers: [@nvm1410, @madhurMongia, @unknownunknown1, @mani99brar]\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {IERC20} from \\\"./Interfaces.sol\\\";\\nimport \\\"./RealityProxy.sol\\\";\\n\\ncontract Market {\\n    /// @dev Flag to initialize the market only once.\\n    bool public initialized;\\n\\n    /// @dev Contains the information associated to Reality.\\n    /// @param questionsIds Reality questions ids.\\n    /// @param templateId Reality templateId.\\n    /// @param encodedQuestions Encoded questions parameters, needed to create and reopen a question.\\n    struct RealityParams {\\n        bytes32[] questionsIds;\\n        uint256 templateId;\\n        string[] encodedQuestions;\\n    }\\n\\n    /// @dev Contains the information associated to Conditional Tokens.\\n    /// @param conditionId Conditional Tokens conditionId.\\n    /// @param parentCollectionId Conditional Tokens parentCollectionId.\\n    /// @param parentOutcome Conditional outcome to use (optional).\\n    /// @param parentMarket Conditional market to use (optional).\\n    /// @param questionId Conditional Tokens questionId.\\n    /// @param wrapped1155 Outcome tokens Wrapped1155 address.\\n    /// @param data Wrapped1155 token data.\\n    struct ConditionalTokensParams {\\n        bytes32 conditionId;\\n        bytes32 parentCollectionId;\\n        uint256 parentOutcome;\\n        address parentMarket;\\n        bytes32 questionId;\\n        IERC20[] wrapped1155;\\n        bytes[] data;\\n    }\\n\\n    /// @dev The name of the market.\\n    string public marketName;\\n    /// @dev The market outcomes, doesn't include the INVALID_RESULT outcome.\\n    string[] public outcomes;\\n    /// @dev Lower bound, only used for scalar markets.\\n    uint256 public lowerBound;\\n    /// @dev Upper bound, only used for scalar markets.\\n    uint256 public upperBound;\\n    /// @dev Conditional Tokens parameters.\\n    ConditionalTokensParams public conditionalTokensParams;\\n    /// @dev Reality parameters.\\n    RealityParams public realityParams;\\n    /// @dev Oracle contract.\\n    RealityProxy public realityProxy;\\n\\n    /// @dev Initializer.\\n    /// @param _marketName The name of the market.\\n    /// @param _outcomes The market outcomes, doesn't include the INVALID_RESULT outcome.\\n    /// @param _lowerBound Lower bound, only used for scalar markets.\\n    /// @param _upperBound Upper bound, only used for scalar markets.\\n    /// @param _conditionalTokensParams Conditional Tokens params.\\n    /// @param _realityParams Reality params.\\n    /// @param _realityProxy Oracle contract.\\n    function initialize(\\n        string memory _marketName,\\n        string[] memory _outcomes,\\n        uint256 _lowerBound,\\n        uint256 _upperBound,\\n        ConditionalTokensParams memory _conditionalTokensParams,\\n        RealityParams memory _realityParams,\\n        RealityProxy _realityProxy\\n    ) external {\\n        require(!initialized, \\\"Already initialized.\\\");\\n\\n        marketName = _marketName;\\n        outcomes = _outcomes;\\n        lowerBound = _lowerBound;\\n        upperBound = _upperBound;\\n        conditionalTokensParams = _conditionalTokensParams;\\n        realityParams = _realityParams;\\n        realityProxy = _realityProxy;\\n\\n        initialized = true;\\n    }\\n\\n    /// @dev The templateId associated to the Reality question.\\n    /// @return The template id.\\n    function templateId() external view returns (uint256) {\\n        return realityParams.templateId;\\n    }\\n\\n    /// @dev Returns the Reality questions ids. Multi Scalar markets have one question for each outcome, while any other market has only one question.\\n    /// @return The Reality questions ids.\\n    function questionsIds() external view returns (bytes32[] memory) {\\n        return realityParams.questionsIds;\\n    }\\n\\n    /// @dev Encoded questions parameters, needed to create and reopen a question.\\n    /// @param index The question index.\\n    /// @return The encoded question.\\n    function encodedQuestions(uint256 index) external view returns (string memory) {\\n        return realityParams.encodedQuestions[index];\\n    }\\n\\n    /// @dev Conditional Tokens questionId.\\n    /// @return the question ID.\\n    function questionId() external view returns (bytes32) {\\n        return conditionalTokensParams.questionId;\\n    }\\n\\n    /// @dev Conditional Tokens conditionId.\\n    /// @return The condition ID.\\n    function conditionId() external view returns (bytes32) {\\n        return conditionalTokensParams.conditionId;\\n    }\\n\\n    /// @dev Conditional Tokens parentCollectionId.\\n    /// @return The parent collection ID.\\n    function parentCollectionId() external view returns (bytes32) {\\n        return conditionalTokensParams.parentCollectionId;\\n    }\\n\\n    /// @dev The parent market (optional). This market redeems to an outcome token of the parent market.\\n    /// @return The parent market address.\\n    function parentMarket() external view returns (address) {\\n        return conditionalTokensParams.parentMarket;\\n    }\\n\\n    /// @dev The parent outcome (optional). The parent market's outcome token this market redeems for.\\n    /// @return The parent outcome index.\\n    function parentOutcome() external view returns (uint256) {\\n        return conditionalTokensParams.parentOutcome;\\n    }\\n\\n    /// @dev Returns the wrapped1155 and the data corresponding to an outcome token.\\n    /// @param index The outcome index.\\n    /// @return wrapped1155 The wrapped token.\\n    /// @return data The token data.\\n    function wrappedOutcome(uint256 index) external view returns (IERC20 wrapped1155, bytes memory data) {\\n        return (conditionalTokensParams.wrapped1155[index], conditionalTokensParams.data[index]);\\n    }\\n\\n    /// @dev Returns the wrapped1155 and the data corresponding to the parent market.\\n    /// @return wrapped1155 The wrapped token.\\n    /// @return data The token data.\\n    function parentWrappedOutcome() external view returns (IERC20 wrapped1155, bytes memory data) {\\n        if (conditionalTokensParams.parentMarket != address(0)) {\\n            (wrapped1155, data) =\\n                Market(conditionalTokensParams.parentMarket).wrappedOutcome(conditionalTokensParams.parentOutcome);\\n        }\\n    }\\n\\n    /// @dev Returns the number of outcomes.\\n    /// Doesn't include the INVALID_RESULT outcome.\\n    /// @return numOutcomes The number of outcomes.\\n    function numOutcomes() external view returns (uint256) {\\n        return outcomes.length;\\n    }\\n\\n    /// @dev Helper function to resolve the market.\\n    function resolve() external {\\n        realityProxy.resolve(this);\\n    }\\n}\\n\",\"keccak256\":\"0xa1a7e99f16812a345d7cb9a063516632f5257704969914948016629605232a3d\",\"license\":\"MIT\"},\"src/MarketFactory.sol\":{\"content\":\"/**\\n *  @authors: [@xyzseer]\\n *  @reviewers: [@nvm1410, @madhurMongia, @unknownunknown1, @mani99brar]\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {IConditionalTokens, IRealityETH_v3_0, IWrapped1155Factory} from \\\"./Interfaces.sol\\\";\\nimport \\\"./Market.sol\\\";\\nimport \\\"./RealityProxy.sol\\\";\\nimport \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\n\\ncontract MarketFactory {\\n    using Clones for address;\\n\\n    /// @dev Workaround \\\"stack too deep\\\" errors.\\n    /// @param marketName Used only in categorical, multi categorical, and scalar markets. In multi scalar markets, the market name is formed using questionStart + outcomeType + questionEnd.\\n    /// @param outcomes The market outcomes, doesn't include the INVALID_RESULT outcome.\\n    /// @param questionStart Used to build the Reality question on multi scalar markets.\\n    /// @param questionEnd Used to build the Reality question on multi scalar markets.\\n    /// @param outcomeType Used to build the Reality question on multi scalar markets.\\n    /// @param parentOutcome conditional outcome to use (optional).\\n    /// @param parentMarket conditional market to use (optional). UNTRUSTED.\\n    /// @param category Reality question category.\\n    /// @param lang Reality question language.\\n    /// @param lowerBound Lower bound, only used for scalar markets.\\n    /// @param upperBound Upper bound, only used for scalar markets.\\n    /// @param minBond Min bond to use on Reality.\\n    /// @param openingTime Reality question opening time.\\n    /// @param tokenNames Name of the ERC20 tokens associated to each outcome.\\n    struct CreateMarketParams {\\n        string marketName;\\n        string[] outcomes;\\n        string questionStart;\\n        string questionEnd;\\n        string outcomeType;\\n        uint256 parentOutcome;\\n        address parentMarket;\\n        string category;\\n        string lang;\\n        uint256 lowerBound;\\n        uint256 upperBound;\\n        uint256 minBond;\\n        uint32 openingTime;\\n        string[] tokenNames;\\n    }\\n\\n    /// @dev Workaround \\\"stack too deep\\\" errors.\\n    /// @param encodedQuestions The encoded questions containing the Reality parameters.\\n    /// @param outcomeSlotCount Conditional Tokens outcomeSlotCount.\\n    /// @param templateId Reality templateId.\\n    struct InternalMarketConfig {\\n        string[] encodedQuestions;\\n        uint256 outcomeSlotCount;\\n        uint256 templateId;\\n    }\\n\\n    /// @dev Template for scalar and multi scalar markets.\\n    uint8 internal constant REALITY_UINT_TEMPLATE = 1;\\n    /// @dev Template for categorical markets.\\n    uint8 internal constant REALITY_SINGLE_SELECT_TEMPLATE = 2;\\n    /// @dev Template for multi categorical markets.\\n    uint8 internal constant REALITY_MULTI_SELECT_TEMPLATE = 3;\\n\\n    /// @dev Reality question timeout.\\n    uint32 public immutable questionTimeout;\\n\\n    /// @dev Arbitrator contract.\\n    address public immutable arbitrator;\\n    /// @dev Reality.eth contract.\\n    IRealityETH_v3_0 public immutable realitio;\\n    /// @dev Wrapped1155Factory contract.\\n    IWrapped1155Factory public immutable wrapped1155Factory;\\n    /// @dev Conditional Tokens contract.\\n    IConditionalTokens public immutable conditionalTokens;\\n    /// @dev Conditional Tokens collateral token contract.\\n    address public immutable collateralToken;\\n    /// @dev Oracle contract.\\n    RealityProxy public immutable realityProxy;\\n    /// @dev Markets created by this factory.\\n    address[] public markets;\\n    /// @dev Market contract.\\n    address public immutable market;\\n\\n    /// @dev To be emitted when a new market is created.\\n    /// @param market The new market address.\\n    /// @param marketName The name of the market.\\n    /// @param parentMarket Conditional market to use.\\n    /// @param conditionId Conditional Tokens conditionId.\\n    /// @param questionId Conditional Tokens questionId.\\n    /// @param questionsIds Reality questions ids.\\n    event NewMarket(\\n        address indexed market,\\n        string marketName,\\n        address parentMarket,\\n        bytes32 conditionId,\\n        bytes32 questionId,\\n        bytes32[] questionsIds\\n    );\\n\\n    /**\\n     *  @dev Constructor.\\n     *  @param _market Address of the market contract that is going to be used for each new deployment.\\n     *  @param _arbitrator Address of the arbitrator that is going to resolve Realitio disputes.\\n     *  @param _realitio Address of the Realitio implementation.\\n     *  @param _wrapped1155Factory Address of the Wrapped1155Factory implementation.\\n     *  @param _conditionalTokens Address of the ConditionalTokens implementation.\\n     *  @param _collateralToken Address of the collateral token.\\n     *  @param _realityProxy Address of the RealityProxy implementation.\\n     *  @param _questionTimeout Reality question timeout.\\n     */\\n    constructor(\\n        address _market,\\n        address _arbitrator,\\n        IRealityETH_v3_0 _realitio,\\n        IWrapped1155Factory _wrapped1155Factory,\\n        IConditionalTokens _conditionalTokens,\\n        address _collateralToken,\\n        RealityProxy _realityProxy,\\n        uint32 _questionTimeout\\n    ) {\\n        market = _market;\\n        arbitrator = _arbitrator;\\n        realitio = _realitio;\\n        wrapped1155Factory = _wrapped1155Factory;\\n        conditionalTokens = _conditionalTokens;\\n        collateralToken = _collateralToken;\\n        realityProxy = _realityProxy;\\n        questionTimeout = _questionTimeout;\\n    }\\n\\n    /// @dev Creates a Categorical market.\\n    /// @notice Categorical markets are associated with a Reality question that has only one answer.\\n    /// @param params CreateMarketParams instance.\\n    /// @return The new market address.\\n    function createCategoricalMarket(CreateMarketParams calldata params) external returns (address) {\\n        require(params.outcomes.length >= 2, \\\"Outcomes count must be 2 or more\\\");\\n\\n        string[] memory encodedQuestions = new string[](1);\\n        encodedQuestions[0] =\\n            encodeRealityQuestionWithOutcomes(params.marketName, params.outcomes, params.category, params.lang);\\n\\n        return createMarket(\\n            params,\\n            params.marketName,\\n            InternalMarketConfig({\\n                encodedQuestions: encodedQuestions,\\n                outcomeSlotCount: params.outcomes.length + 1, // additional outcome for Invalid Result.\\n                templateId: REALITY_SINGLE_SELECT_TEMPLATE\\n            })\\n        );\\n    }\\n\\n    /// @dev Creates a Multi Categorical market.\\n    /// @notice Multi Categorical markets are associated with a Reality question that has one or more answers.\\n    /// @param params CreateMarketParams instance.\\n    /// @return The new market address.\\n    function createMultiCategoricalMarket(CreateMarketParams calldata params) external returns (address) {\\n        require(params.outcomes.length >= 2, \\\"Outcomes count must be 2 or more\\\");\\n\\n        string[] memory encodedQuestions = new string[](1);\\n        encodedQuestions[0] =\\n            encodeRealityQuestionWithOutcomes(params.marketName, params.outcomes, params.category, params.lang);\\n\\n        return createMarket(\\n            params,\\n            params.marketName,\\n            InternalMarketConfig({\\n                encodedQuestions: encodedQuestions,\\n                outcomeSlotCount: params.outcomes.length + 1, // additional outcome for Invalid Result.\\n                templateId: REALITY_MULTI_SELECT_TEMPLATE\\n            })\\n        );\\n    }\\n\\n    /// @dev Creates a Scalar market.\\n    /// @notice Scalar markets are associated with a Reality question that resolves to a numeric value.\\n    /// @param params CreateMarketParams instance.\\n    /// @return The new market address.\\n    function createScalarMarket(CreateMarketParams calldata params) external returns (address) {\\n        require(params.upperBound > params.lowerBound, \\\"upperBound must be higher than lowerBound\\\");\\n        // values reserved by Reality for INVALID and UNRESOLVED_ANSWER.\\n        require(params.upperBound < type(uint256).max - 2, \\\"upperBound must be less than uint256.max - 2\\\");\\n        require(params.outcomes.length == 2, \\\"Outcomes count must be 2\\\");\\n\\n        string[] memory encodedQuestions = new string[](1);\\n        encodedQuestions[0] = encodeRealityQuestionWithoutOutcomes(params.marketName, params.category, params.lang);\\n\\n        return createMarket(\\n            params,\\n            params.marketName,\\n            InternalMarketConfig({\\n                encodedQuestions: encodedQuestions,\\n                outcomeSlotCount: 3, // additional outcome for Invalid Result.\\n                templateId: REALITY_UINT_TEMPLATE\\n            })\\n        );\\n    }\\n\\n    /// @dev Creates a Multi Scalar market.\\n    /// @notice Multi Scalar markets are associated with two or more Reality questions, and each one of them resolves to a numeric value.\\n    /// @param params CreateMarketParams instance.\\n    /// @return The new market address.\\n    function createMultiScalarMarket(CreateMarketParams calldata params) external returns (address) {\\n        require(params.outcomes.length >= 2, \\\"Outcomes count must be 2 or more\\\");\\n\\n        string[] memory encodedQuestions = new string[](params.outcomes.length);\\n\\n        for (uint256 i = 0; i < params.outcomes.length; i++) {\\n            encodedQuestions[i] = encodeRealityQuestionWithoutOutcomes(\\n                string(abi.encodePacked(params.questionStart, params.outcomes[i], params.questionEnd)),\\n                params.category,\\n                params.lang\\n            );\\n        }\\n\\n        return createMarket(\\n            params,\\n            string(abi.encodePacked(params.questionStart, \\\"[\\\", params.outcomeType, \\\"]\\\", params.questionEnd)),\\n            InternalMarketConfig({\\n                encodedQuestions: encodedQuestions,\\n                outcomeSlotCount: params.outcomes.length + 1, // additional outcome for Invalid Result.\\n                templateId: REALITY_UINT_TEMPLATE\\n            })\\n        );\\n    }\\n\\n    /// @dev Creates the Market and deploys the wrapped ERC20 tokens.\\n    /// @param params CreateMarketParams instance.\\n    /// @param marketName The market name.\\n    /// @param config InternalMarketConfig instance.\\n    /// @return The new market address.\\n    function createMarket(\\n        CreateMarketParams memory params,\\n        string memory marketName,\\n        InternalMarketConfig memory config\\n    ) internal returns (address) {\\n        (Market.ConditionalTokensParams memory conditionalTokensParams, Market.RealityParams memory realityParams) =\\n            createNewMarketParams(params, config);\\n\\n        Market instance = Market(market.clone());\\n\\n        instance.initialize(\\n            marketName,\\n            params.outcomes,\\n            params.lowerBound,\\n            params.upperBound,\\n            conditionalTokensParams,\\n            realityParams,\\n            realityProxy\\n        );\\n\\n        emit NewMarket(\\n            address(instance),\\n            marketName,\\n            params.parentMarket,\\n            conditionalTokensParams.conditionId,\\n            conditionalTokensParams.questionId,\\n            realityParams.questionsIds\\n        );\\n\\n        markets.push(address(instance));\\n\\n        return address(instance);\\n    }\\n\\n    /// @dev Creates the structures needed to initialize the new market.\\n    /// @param params CreateMarketParams instance.\\n    /// @param config InternalMarketConfig instance.\\n    /// @return Market.ConditionalTokensParams instance.\\n    /// @return Market.RealityParams instance.\\n    function createNewMarketParams(\\n        CreateMarketParams memory params,\\n        InternalMarketConfig memory config\\n    ) internal returns (Market.ConditionalTokensParams memory, Market.RealityParams memory) {\\n        bytes32 parentCollectionId = params.parentMarket == address(0)\\n            ? bytes32(0)\\n            : conditionalTokens.getCollectionId(\\n                Market(params.parentMarket).parentCollectionId(),\\n                Market(params.parentMarket).conditionId(),\\n                1 << params.parentOutcome\\n            );\\n\\n        bytes32[] memory questionsIds = new bytes32[](config.encodedQuestions.length);\\n\\n        for (uint256 i = 0; i < config.encodedQuestions.length; i++) {\\n            questionsIds[i] =\\n                askRealityQuestion(config.encodedQuestions[i], config.templateId, params.openingTime, params.minBond);\\n        }\\n\\n        // questionId must be a hash of all the values that RealityProxy.resolve() uses to resolve a market, this way if an attacker tries to resolve a fake market by changing some value its questionId will not match the id of a valid market.\\n        bytes32 questionId = keccak256(\\n            abi.encode(questionsIds, params.outcomes.length, config.templateId, params.lowerBound, params.upperBound)\\n        );\\n        bytes32 conditionId = prepareCondition(questionId, config.outcomeSlotCount);\\n\\n        (IERC20[] memory wrapped1155, bytes[] memory data) =\\n            deployERC20Positions(parentCollectionId, conditionId, config.outcomeSlotCount, params.tokenNames);\\n\\n        return (\\n            Market.ConditionalTokensParams({\\n                conditionId: conditionId,\\n                questionId: questionId,\\n                parentCollectionId: parentCollectionId,\\n                parentOutcome: params.parentOutcome,\\n                parentMarket: params.parentMarket,\\n                wrapped1155: wrapped1155,\\n                data: data\\n            }),\\n            Market.RealityParams({\\n                questionsIds: questionsIds,\\n                templateId: config.templateId,\\n                encodedQuestions: config.encodedQuestions\\n            })\\n        );\\n    }\\n\\n    /// @dev Encodes the question, outcomes, category and language following the Reality structure.\\n    /// If any parameter has a special character like quotes, it must be properly escaped.\\n    /// @param question The question text.\\n    /// @param outcomes[] The question outcomes.\\n    /// @param category The question category.\\n    /// @param lang The question language.\\n    /// @return The encoded question.\\n    function encodeRealityQuestionWithOutcomes(\\n        string memory question,\\n        string[] calldata outcomes,\\n        string memory category,\\n        string memory lang\\n    ) internal pure returns (string memory) {\\n        bytes memory separator = abi.encodePacked(unicode\\\"\\\\u241f\\\");\\n\\n        bytes memory encodedOutcomes = abi.encodePacked('\\\"', outcomes[0], '\\\"');\\n\\n        for (uint256 i = 1; i < outcomes.length; i++) {\\n            encodedOutcomes = abi.encodePacked(encodedOutcomes, ',\\\"', outcomes[i], '\\\"');\\n        }\\n\\n        return string(abi.encodePacked(question, separator, encodedOutcomes, separator, category, separator, lang));\\n    }\\n\\n    /// @dev Encodes the question, category and language following the Reality structure.\\n    /// If any parameter has a special character like quotes, it must be properly escaped.\\n    /// @param question The question text.\\n    /// @param category The question category.\\n    /// @param lang The question language.\\n    /// @return The encoded question.\\n    function encodeRealityQuestionWithoutOutcomes(\\n        string memory question,\\n        string memory category,\\n        string memory lang\\n    ) internal pure returns (string memory) {\\n        bytes memory separator = abi.encodePacked(unicode\\\"\\\\u241f\\\");\\n\\n        return string(abi.encodePacked(question, separator, category, separator, lang));\\n    }\\n\\n    /// @dev Asks a question on reality.\\n    /// @param encodedQuestion The encoded question containing the Reality parameters.\\n    /// @param templateId The Reality template id.\\n    /// @param openingTime The question opening time.\\n    /// @param minBond The question min bond.\\n    /// @return The question id.\\n    function askRealityQuestion(\\n        string memory encodedQuestion,\\n        uint256 templateId,\\n        uint32 openingTime,\\n        uint256 minBond\\n    ) internal returns (bytes32) {\\n        bytes32 content_hash = keccak256(abi.encodePacked(templateId, openingTime, encodedQuestion));\\n\\n        bytes32 question_id = keccak256(\\n            abi.encodePacked(\\n                content_hash, arbitrator, questionTimeout, minBond, address(realitio), address(this), uint256(0)\\n            )\\n        );\\n\\n        if (realitio.getTimeout(question_id) != 0) {\\n            return question_id;\\n        }\\n\\n        return realitio.askQuestionWithMinBond(\\n            templateId, encodedQuestion, arbitrator, questionTimeout, openingTime, 0, minBond\\n        );\\n    }\\n\\n    /// @dev Prepares the CTF condition and returns the conditionId.\\n    /// @param questionId An identifier for the question to be answered by the oracle.\\n    /// @param outcomeSlotCount The number of outcome slots which must be used for this condition. Must not exceed 256.\\n    /// @return Condition ID.\\n    function prepareCondition(bytes32 questionId, uint256 outcomeSlotCount) internal returns (bytes32) {\\n        bytes32 conditionId = conditionalTokens.getConditionId(address(realityProxy), questionId, outcomeSlotCount);\\n\\n        if (conditionalTokens.getOutcomeSlotCount(conditionId) == 0) {\\n            conditionalTokens.prepareCondition(address(realityProxy), questionId, outcomeSlotCount);\\n        }\\n\\n        return conditionId;\\n    }\\n\\n    /// @dev Wraps the ERC1155 outcome tokens to ERC20. The INVALID_RESULT outcome is always called SER-INVALID.\\n    /// @param parentCollectionId The parentCollectionId.\\n    /// @param conditionId The conditionId.\\n    /// @param outcomeSlotCount The amount of outcomes.\\n    /// @param tokenNames The name of each outcome token.\\n    /// @return wrapped1155 Array of outcome tokens wrapped to ERC20.\\n    /// @return data Array of token data used to create each ERC20.\\n    function deployERC20Positions(\\n        bytes32 parentCollectionId,\\n        bytes32 conditionId,\\n        uint256 outcomeSlotCount,\\n        string[] memory tokenNames\\n    ) internal returns (IERC20[] memory wrapped1155, bytes[] memory data) {\\n        uint256 invalidResultIndex = outcomeSlotCount - 1;\\n\\n        wrapped1155 = new IERC20[](outcomeSlotCount);\\n        data = new bytes[](outcomeSlotCount);\\n\\n        for (uint256 j = 0; j < outcomeSlotCount; j++) {\\n            bytes32 collectionId = conditionalTokens.getCollectionId(parentCollectionId, conditionId, 1 << j);\\n            uint256 tokenId = conditionalTokens.getPositionId(collateralToken, collectionId);\\n\\n            require(j == invalidResultIndex || bytes(tokenNames[j]).length != 0, \\\"Missing token name\\\");\\n\\n            bytes memory _data = abi.encodePacked(\\n                toString31(j == invalidResultIndex ? \\\"SER-INVALID\\\" : tokenNames[j]),\\n                toString31(j == invalidResultIndex ? \\\"SER-INVALID\\\" : tokenNames[j]),\\n                uint8(18)\\n            );\\n\\n            IERC20 _wrapped1155 = wrapped1155Factory.requireWrapped1155(address(conditionalTokens), tokenId, _data);\\n\\n            wrapped1155[j] = _wrapped1155;\\n            data[j] = _data;\\n        }\\n    }\\n\\n    /// @dev Encodes a short string (less than than 31 bytes long) as for storage as expected by Solidity.\\n    /// See https://github.com/gnosis/1155-to-20/pull/4#discussion_r573630922\\n    /// @param value String to encode.\\n    /// @return encodedString The encoded string.\\n    function toString31(string memory value) internal pure returns (bytes32 encodedString) {\\n        uint256 length = bytes(value).length;\\n        require(length < 32, \\\"string too long\\\");\\n\\n        // Read the right-padded string data, which is guaranteed to fit into a single word because its length is less than 32.\\n        assembly {\\n            encodedString := mload(add(value, 0x20))\\n        }\\n\\n        // Now mask the string data, this ensures that the bytes past the string length are all 0s.\\n        bytes32 mask = bytes32(type(uint256).max << ((32 - length) << 3));\\n        encodedString = encodedString & mask;\\n\\n        // Finally, set the least significant byte to be the hex length of the encoded string, that is its byte-length times two.\\n        encodedString = encodedString | bytes32(length << 1);\\n    }\\n\\n    /// @dev Returns all the markets created by this factory.\\n    /// @return The addresses of the markets.\\n    function allMarkets() external view returns (address[] memory) {\\n        return markets;\\n    }\\n\\n    /// @notice Returns the amount of markets created by this factory.\\n    /// @return The amount of markets.\\n    function marketCount() external view returns (uint256) {\\n        return markets.length;\\n    }\\n}\\n\",\"keccak256\":\"0xf231c44ce41cc34b681ae99e0bc5679232ca88953ffc762b6c7129070f924cb4\",\"license\":\"MIT\"},\"src/RealityProxy.sol\":{\"content\":\"/**\\n *  @authors: [@xyzseer]\\n *  @reviewers: [@nvm1410, @madhurMongia, @unknownunknown1, @mani99brar]\\n *  @auditors: []\\n *  @bounties: []\\n *  @deployments: []\\n */\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity 0.8.20;\\n\\nimport {IConditionalTokens, IRealityETH_v3_0} from \\\"./Interfaces.sol\\\";\\nimport \\\"./Market.sol\\\";\\n\\ncontract RealityProxy {\\n    /// @dev Conditional Tokens contract.\\n    IConditionalTokens public immutable conditionalTokens;\\n    /// @dev Reality.eth contract.\\n    IRealityETH_v3_0 public immutable realitio;\\n\\n    /// @dev INVALID_RESULT reserved value.\\n    bytes32 internal constant INVALID_RESULT = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff;\\n\\n    /// @dev Template for scalar and multi scalar markets.\\n    uint256 internal constant REALITY_UINT_TEMPLATE = 1;\\n    /// @dev Template for categorical markets.\\n    uint256 internal constant REALITY_SINGLE_SELECT_TEMPLATE = 2;\\n    /// @dev Template for multi categorical markets.\\n    uint256 internal constant REALITY_MULTI_SELECT_TEMPLATE = 3;\\n\\n    /// @dev Constructor.\\n    /// @param _conditionalTokens Conditional Tokens contract address.\\n    /// @param _realitio Reality.eth contract address.\\n    constructor(IConditionalTokens _conditionalTokens, IRealityETH_v3_0 _realitio) {\\n        conditionalTokens = _conditionalTokens;\\n        realitio = _realitio;\\n    }\\n\\n    /// @dev Resolves the specified market.\\n    /// @param market Market to resolve. UNTRUSTED.\\n    function resolve(Market market) external {\\n        bytes32[] memory questionsIds = market.questionsIds();\\n        uint256 numOutcomes = market.numOutcomes();\\n        uint256 templateId = market.templateId();\\n        uint256 low = market.lowerBound();\\n        uint256 high = market.upperBound();\\n\\n        // questionId must be a hash of all the values used to resolve a market, this way if an attacker tries to resolve a fake market by changing some value its questionId will not match the id of a valid market.\\n        bytes32 questionId = keccak256(abi.encode(questionsIds, numOutcomes, templateId, low, high));\\n\\n        if (templateId == REALITY_SINGLE_SELECT_TEMPLATE) {\\n            resolveCategoricalMarket(questionId, questionsIds, numOutcomes);\\n            return;\\n        }\\n\\n        if (templateId == REALITY_MULTI_SELECT_TEMPLATE) {\\n            resolveMultiCategoricalMarket(questionId, questionsIds, numOutcomes);\\n            return;\\n        }\\n\\n        if (questionsIds.length > 1) {\\n            resolveMultiScalarMarket(questionId, questionsIds, numOutcomes);\\n            return;\\n        }\\n\\n        resolveScalarMarket(questionId, questionsIds, low, high);\\n    }\\n\\n    /// @dev Resolves to invalid if the answer is invalid or the result is greater than the amount of outcomes.\\n    /// @param questionId Conditional Tokens questionId.\\n    /// @param questionsIds Reality questions ids.\\n    /// @param numOutcomes The number of outcomes, excluding the INVALID_RESULT outcome.\\n    function resolveCategoricalMarket(\\n        bytes32 questionId,\\n        bytes32[] memory questionsIds,\\n        uint256 numOutcomes\\n    ) internal {\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionsIds[0]));\\n        uint256[] memory payouts = new uint256[](numOutcomes + 1);\\n\\n        if (answer == uint256(INVALID_RESULT) || answer >= numOutcomes) {\\n            // the last outcome is INVALID_RESULT.\\n            payouts[numOutcomes] = 1;\\n        } else {\\n            payouts[answer] = 1;\\n        }\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n\\n    /// @dev Resolves to invalid if the answer is invalid or all the results are zero.\\n    /// @param questionId Conditional Tokens questionId.\\n    /// @param questionsIds Reality questions ids.\\n    /// @param numOutcomes The number of outcomes, excluding the INVALID_RESULT outcome.\\n    function resolveMultiCategoricalMarket(\\n        bytes32 questionId,\\n        bytes32[] memory questionsIds,\\n        uint256 numOutcomes\\n    ) internal {\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionsIds[0]));\\n        uint256[] memory payouts = new uint256[](numOutcomes + 1);\\n\\n        if (answer == uint256(INVALID_RESULT)) {\\n            // the last outcome is INVALID_RESULT.\\n            payouts[numOutcomes] = 1;\\n        } else {\\n            bool allZeroes = true;\\n\\n            for (uint256 i = 0; i < numOutcomes; i++) {\\n                payouts[i] = (answer >> i) & 1;\\n                allZeroes = allZeroes && payouts[i] == 0;\\n            }\\n\\n            if (allZeroes) {\\n                // invalid result.\\n                payouts[numOutcomes] = 1;\\n            }\\n        }\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n\\n    /// @dev Resolves to invalid if the answer is invalid.\\n    /// @param questionId Conditional Tokens questionId.\\n    /// @param questionsIds Reality questions ids.\\n    /// @param low Lower bound.\\n    /// @param high Upper bound.\\n    function resolveScalarMarket(\\n        bytes32 questionId,\\n        bytes32[] memory questionsIds,\\n        uint256 low,\\n        uint256 high\\n    ) internal {\\n        uint256 answer = uint256(realitio.resultForOnceSettled(questionsIds[0]));\\n        uint256[] memory payouts = new uint256[](3);\\n\\n        if (answer == uint256(INVALID_RESULT)) {\\n            // the last outcome is INVALID_RESULT.\\n            payouts[2] = 1;\\n        } else if (answer <= low) {\\n            payouts[0] = 1;\\n        } else if (answer >= high) {\\n            payouts[1] = 1;\\n        } else {\\n            payouts[0] = high - answer;\\n            payouts[1] = answer - low;\\n        }\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n\\n    /// @dev If any individual result is invalid then the corresponding payout element is set to 0.\\n    /// @dev If all the elements of the payout vector are 0 or all are invalid, the market resolves to invalid.\\n    /// @param questionId Conditional Tokens questionId.\\n    /// @param questionsIds Reality questions ids.\\n    /// @param numOutcomes The number of outcomes, excluding the INVALID_RESULT outcome.\\n    function resolveMultiScalarMarket(\\n        bytes32 questionId,\\n        bytes32[] memory questionsIds,\\n        uint256 numOutcomes\\n    ) internal {\\n        uint256[] memory payouts = new uint256[](numOutcomes + 1);\\n        bool allZeroesOrInvalid = true;\\n\\n        /*\\n         * We set maxPayout to a sufficiently large number for most possible outcomes that also avoids overflows in the following places:\\n         * https://github.com/gnosis/conditional-tokens-contracts/blob/master/contracts/ConditionalTokens.sol#L89\\n         * https://github.com/gnosis/conditional-tokens-contracts/blob/master/contracts/ConditionalTokens.sol#L242\\n         */\\n        uint256 maxPayout = 2 ** (256 / 2) - 1;\\n\\n        for (uint256 i = 0; i < numOutcomes; i++) {\\n            payouts[i] = uint256(realitio.resultForOnceSettled(questionsIds[i]));\\n\\n            if (payouts[i] == uint256(INVALID_RESULT)) {\\n                payouts[i] = 0;\\n            } else if (payouts[i] > maxPayout) {\\n                payouts[i] = maxPayout;\\n            }\\n\\n            allZeroesOrInvalid = allZeroesOrInvalid && payouts[i] == 0;\\n        }\\n\\n        if (allZeroesOrInvalid) {\\n            // invalid result.\\n            payouts[numOutcomes] = 1;\\n        }\\n\\n        conditionalTokens.reportPayouts(questionId, payouts);\\n    }\\n}\\n\",\"keccak256\":\"0x896712b726fc76f3f29f79b62c5a2976bd9df55cf5d5d42b4e69fce5c078b220\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100d55760003560e01c80637ca5cb3e116100875780637ca5cb3e146101f757806380f556051461020a5780638770b18014610231578063b1283e7714610244578063b2016bd414610257578063bc8802a21461027e578063ec979082146102a5578063ff08d88f146102b657600080fd5b8063150c5b97146100da5780631ba18b9b1461011e5780632ff8d5041461015a5780633412a3f914610181578063375a7cba146101945780635bd9e299146101a95780636cc6cde1146101d0575b600080fd5b6101017f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6101457f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff9091168152602001610115565b6101017f000000000000000000000000000000000000000000000000000000000000000081565b61010161018f366004611b9e565b6102c9565b61019c6104b6565b6040516101159190611bd9565b6101017f000000000000000000000000000000000000000000000000000000000000000081565b6101017f000000000000000000000000000000000000000000000000000000000000000081565b610101610205366004611b9e565b610518565b6101017f000000000000000000000000000000000000000000000000000000000000000081565b61010161023f366004611b9e565b6107da565b610101610252366004611c26565b6108eb565b6101017f000000000000000000000000000000000000000000000000000000000000000081565b6101017f000000000000000000000000000000000000000000000000000000000000000081565b600054604051908152602001610115565b6101016102c4366004611b9e565b610915565b600060026102da6020840184611c3f565b905010156103035760405162461bcd60e51b81526004016102fa90611c88565b60405180910390fd5b604080516001808252818301909252600091816020015b606081526020019060019003908161031a57905050905061040a61033e8480611cd3565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610380925050506020860186611c3f565b61038d60e0880188611cd3565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506103d092505050610100890189611cd3565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610b3c92505050565b8160008151811061041d5761041d611d19565b60200260200101819052506104af8361043590611eda565b61043f8580611cd3565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525050604080516060810190915286815291505060208082019061049490890189611c3f565b6104a091506001612094565b81526003602090910152610c54565b9392505050565b6060600080548060200260200160405190810160405280929190818152602001828054801561050e57602002820191906000526020600020905b81546001600160a01b031681526001909101906020018083116104f0575b5050505050905090565b6000816101200135826101400135116105855760405162461bcd60e51b815260206004820152602960248201527f7570706572426f756e64206d75737420626520686967686572207468616e206c6044820152681bddd95c909bdd5b9960ba1b60648201526084016102fa565b61059260026000196120a7565b826101400135106105fa5760405162461bcd60e51b815260206004820152602c60248201527f7570706572426f756e64206d757374206265206c657373207468616e2075696e60448201526b3a191a9b1736b0bc1016901960a11b60648201526084016102fa565b6106076020830183611c3f565b90506002146106535760405162461bcd60e51b815260206004820152601860248201527727baba31b7b6b2b99031b7bab73a1036bab9ba103132901960411b60448201526064016102fa565b604080516001808252818301909252600091816020015b606081526020019060019003908161066a57905050905061074d61068e8480611cd3565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506106d09250505060e0860186611cd3565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061071392505050610100870187611cd3565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610ddc92505050565b8160008151811061076057610760611d19565b60200260200101819052506104af8361077890611eda565b6107828580611cd3565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505060408051606081018252878152600360208201526001918101919091529150610c549050565b600060026107eb6020840184611c3f565b9050101561080b5760405162461bcd60e51b81526004016102fa90611c88565b604080516001808252818301909252600091816020015b606081526020019060019003908161082257905050905061084661033e8480611cd3565b8160008151811061085957610859611d19565b60200260200101819052506104af8361087190611eda565b61087b8580611cd3565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152505060408051606081019091528681529150506020808201906108d090890189611c3f565b6108dc91506001612094565b81526002602090910152610c54565b600081815481106108fb57600080fd5b6000918252602090912001546001600160a01b0316905081565b600060026109266020840184611c3f565b905010156109465760405162461bcd60e51b81526004016102fa90611c88565b60006109556020840184611c3f565b90506001600160401b0381111561096e5761096e611cbd565b6040519080825280602002602001820160405280156109a157816020015b606081526020019060019003908161098c5790505b50905060005b6109b46020850185611c3f565b9050811015610aae57610a7e6109cd6040860186611cd3565b6109da6020880188611c3f565b858181106109ea576109ea611d19565b90506020028101906109fc9190611cd3565b610a0960608a018a611cd3565b604051602001610a1e969594939291906120ba565b60408051601f19818403018152919052610a3b60e0870187611cd3565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061071392505050610100880188611cd3565b828281518110610a9057610a90611d19565b60200260200101819052508080610aa6906120ea565b9150506109a7565b506104af610abb84611eda565b610ac86040860186611cd3565b610ad56080880188611cd3565b610ae260608a018a611cd3565b604051602001610af796959493929190612103565b60408051601f198184030181526060830190915284825290602081810190610b2190890189611c3f565b610b2d91506001612094565b81526001602090910152610c54565b60606000604051602001610b599062e2909f60e81b815260030190565b6040516020818303038152906040529050600086866000818110610b7f57610b7f611d19565b9050602002810190610b919190611cd3565b604051602001610ba2929190612145565b60408051601f19818403018152919052905060015b86811015610c1a5781888883818110610bd257610bd2611d19565b9050602002810190610be49190611cd3565b604051602001610bf693929190612190565b60405160208183030381529060405291508080610c12906120ea565b915050610bb7565b5087828284888689604051602001610c3897969594939291906121cf565b6040516020818303038152906040529250505095945050505050565b6000806000610c638685610e3c565b915091506000610c9b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166111c9565b9050806001600160a01b031663d0e2ca658789602001518a61012001518b610140015188887f00000000000000000000000000000000000000000000000000000000000000006040518863ffffffff1660e01b8152600401610d03979695949392919061235e565b600060405180830381600087803b158015610d1d57600080fd5b505af1158015610d31573d6000803e3d6000fd5b50505060c08801518451608086015185516040516001600160a01b03871695507f109e5ac06d4835cca9a97d9014f7bb1bfafb85a2de6d4af1ad22aa8730e12c8794610d82948d9491939092612464565b60405180910390a2600080546001810182559080527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630180546001600160a01b0319166001600160a01b0383161790559695505050505050565b60606000604051602001610df99062e2909f60e81b815260030190565b60405160208183030381529060405290508481858386604051602001610e239594939291906124a6565b6040516020818303038152906040529150509392505050565b6040805160e0810182526000808252602080830182905282840182905260608084018390526080840183905260a0840181905260c084018190528451808201865281815291820192909252928301529060c08401516000906001600160a01b031615611018577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663856296f78660c001516001600160a01b03166344bea37e6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f379190612511565b8760c001516001600160a01b0316632ddc7de76040518163ffffffff1660e01b8152600401602060405180830381865afa158015610f79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9d9190612511565b60a08901516040516001600160e01b031960e086901b168152600481019390935260248301919091526001901b6044820152606401602060405180830381865afa158015610fef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110139190612511565b61101b565b60005b905060008460000151516001600160401b0381111561103c5761103c611cbd565b604051908082528060200260200182016040528015611065578160200160208202803683370190505b50905060005b8551518110156110db576110ac8660000151828151811061108e5761108e611d19565b602002602001015187604001518961018001518a61016001516111dc565b8282815181106110be576110be611d19565b6020908102919091010152806110d3816120ea565b91505061106b565b5060008187602001515187604001518961012001518a610140015160405160200161110a95949392919061252a565b604051602081830303815290604052805190602001209050600061113282886020015161146d565b905060008061114c86848b602001518d6101a0015161165d565b915091506040518060e001604052808481526020018781526020018b60a0015181526020018b60c001516001600160a01b031681526020018581526020018381526020018281525060405180606001604052808781526020018b6040015181526020018b60000151815250975097505050505050505b9250929050565b60006111d6826000611a92565b92915050565b6000808484876040516020016111f493929190612561565b60408051601f1981840301815282825280516020918201209083018190526bffffffffffffffffffffffff197f0000000000000000000000000000000000000000000000000000000000000000606090811b8216938501939093526001600160e01b03197f000000000000000000000000000000000000000000000000000000000000000060e01b166054850152605884018790527f0000000000000000000000000000000000000000000000000000000000000000831b811660788501523090921b909116608c830152600060a083018190529092509060c00160408051808303601f19018152908290528051602090910120634f8812e360e11b82526004820181905291507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690639f1025c690602401602060405180830381865afa15801561134c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611370919061259a565b63ffffffff16156113845791506114659050565b604051631212e4f160e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063484b93c49061141d9089908b907f0000000000000000000000000000000000000000000000000000000000000000907f0000000000000000000000000000000000000000000000000000000000000000908c906000908d906004016125b7565b6020604051808303816000875af115801561143c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114609190612511565b925050505b949350505050565b6000807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663852c6ae27f000000000000000000000000000000000000000000000000000000000000000086866040518463ffffffff1660e01b81526004016114e093929190612607565b602060405180830381865afa1580156114fd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115219190612511565b604051636a16e06160e11b8152600481018290529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063d42dc0c290602401602060405180830381865afa158015611589573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ad9190612511565b6000036104af5760405163365bb9d560e21b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169063d96ee75490611624907f00000000000000000000000000000000000000000000000000000000000000009088908890600401612607565b600060405180830381600087803b15801561163e57600080fd5b505af1158015611652573d6000803e3d6000fd5b505050509392505050565b606080600061166d6001866120a7565b9050846001600160401b0381111561168757611687611cbd565b6040519080825280602002602001820160405280156116b0578160200160208202803683370190505b509250846001600160401b038111156116cb576116cb611cbd565b6040519080825280602002602001820160405280156116fe57816020015b60608152602001906001900390816116e95790505b50915060005b85811015611a875760405163856296f760e01b815260048101899052602481018890526001821b60448201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063856296f790606401602060405180830381865afa158015611784573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a89190612511565b60405163039dd75360e41b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390529192506000917f000000000000000000000000000000000000000000000000000000000000000016906339dd753090604401602060405180830381865afa15801561183b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061185f9190612511565b90508383148061188a575086838151811061187c5761187c611d19565b602002602001015151600014155b6118cb5760405162461bcd60e51b81526020600482015260126024820152714d697373696e6720746f6b656e206e616d6560701b60448201526064016102fa565b600061191f8585146118f6578885815181106118e9576118e9611d19565b6020026020010151611b28565b6040518060400160405280600b81526020016a14d1548b5253959053125160aa1b815250611b28565b61193b8686146118f6578986815181106118e9576118e9611d19565b604080516020810193909352820152600960f91b606082015260610160408051601f1981840301815290829052631892c08760e11b825291506000906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001690633125810e906119da907f00000000000000000000000000000000000000000000000000000000000000009087908790600401612628565b6020604051808303816000875af11580156119f9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a1d919061264f565b905080888681518110611a3257611a32611d19565b60200260200101906001600160a01b031690816001600160a01b03168152505081878681518110611a6557611a65611d19565b6020026020010181905250505050508080611a7f906120ea565b915050611704565b505094509492505050565b600081471015611abe5760405163cf47918160e01b8152476004820152602481018390526044016102fa565b763d602d80600a3d3981f3363d3d373d3d3d363d730000008360601b60e81c176000526e5af43d82803e903d91602b57fd5bf38360781b176020526037600983f090506001600160a01b0381166111d65760405163b06ebf3d60e01b815260040160405180910390fd5b805160009060208110611b6f5760405162461bcd60e51b815260206004820152600f60248201526e737472696e6720746f6f206c6f6e6760881b60448201526064016102fa565b6020830151915060006003826020611b8791906120a7565b600019911b1b9290921660019190911b1792915050565b600060208284031215611bb057600080fd5b81356001600160401b03811115611bc657600080fd5b82016101c081850312156104af57600080fd5b6020808252825182820181905260009190848201906040850190845b81811015611c1a5783516001600160a01b031683529284019291840191600101611bf5565b50909695505050505050565b600060208284031215611c3857600080fd5b5035919050565b6000808335601e19843603018112611c5657600080fd5b8301803591506001600160401b03821115611c7057600080fd5b6020019150600581901b36038213156111c257600080fd5b6020808252818101527f4f7574636f6d657320636f756e74206d7573742062652032206f72206d6f7265604082015260600190565b634e487b7160e01b600052604160045260246000fd5b6000808335601e19843603018112611cea57600080fd5b8301803591506001600160401b03821115611d0457600080fd5b6020019150368190038213156111c257600080fd5b634e487b7160e01b600052603260045260246000fd5b6040516101c081016001600160401b0381118282101715611d5257611d52611cbd565b60405290565b604051601f8201601f191681016001600160401b0381118282101715611d8057611d80611cbd565b604052919050565b600082601f830112611d9957600080fd5b81356001600160401b03811115611db257611db2611cbd565b611dc5601f8201601f1916602001611d58565b818152846020838601011115611dda57600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f830112611e0857600080fd5b813560206001600160401b0380831115611e2457611e24611cbd565b8260051b611e33838201611d58565b9384528581018301938381019088861115611e4d57600080fd5b84880192505b85831015611e8957823584811115611e6b5760008081fd5b611e798a87838c0101611d88565b8352509184019190840190611e53565b98975050505050505050565b6001600160a01b0381168114611eaa57600080fd5b50565b8035611eb881611e95565b919050565b63ffffffff81168114611eaa57600080fd5b8035611eb881611ebd565b60006101c08236031215611eed57600080fd5b611ef5611d2f565b82356001600160401b0380821115611f0c57600080fd5b611f1836838701611d88565b83526020850135915080821115611f2e57600080fd5b611f3a36838701611df7565b60208401526040850135915080821115611f5357600080fd5b611f5f36838701611d88565b60408401526060850135915080821115611f7857600080fd5b611f8436838701611d88565b60608401526080850135915080821115611f9d57600080fd5b611fa936838701611d88565b608084015260a085013560a0840152611fc460c08601611ead565b60c084015260e0850135915080821115611fdd57600080fd5b611fe936838701611d88565b60e08401526101009150818501358181111561200457600080fd5b61201036828801611d88565b928401929092526101208581013590840152610140808601359084015261016080860135908401526101809150612048828601611ecf565b828401526101a09150818501358181111561206257600080fd5b61206e36828801611df7565b8385015250505080915050919050565b634e487b7160e01b600052601160045260246000fd5b808201808211156111d6576111d661207e565b818103818111156111d6576111d661207e565b85878237600086820160008152858782376000908601908152838582376000930192835250909695505050505050565b6000600182016120fc576120fc61207e565b5060010190565b858782376000868201605b60f81b815285876001830137605d60f81b600191870191820152838560028301376000930160020192835250909695505050505050565b601160f91b8082526000908385600185013792909101600181019290925250600201919050565b60005b8381101561218757818101518382015260200161216f565b50506000910152565b600084516121a281846020890161216c565b61161160f11b90830190815283856002830137601160f91b93016002810193909352505060030192915050565b6000885160206121e28285838e0161216c565b8951918401916121f58184848e0161216c565b89519201916122078184848d0161216c565b88519201916122198184848c0161216c565b875192019161222b8184848b0161216c565b865192019161223d8184848a0161216c565b855192019161224f818484890161216c565b919091019a9950505050505050505050565b6000815180845261227981602086016020860161216c565b601f01601f19169290920160200192915050565b600081518084526020808501808196508360051b8101915082860160005b858110156122d55782840389526122c3848351612261565b988501989350908401906001016122ab565b5091979650505050505050565b600081518084526020808501945080840160005b83811015612312578151875295820195908201906001016122f6565b509495945050505050565b600081516060845261233260608501826122e2565b90506020830151602085015260408301518482036040860152612355828261228d565b95945050505050565b60e08152600061237160e083018a612261565b602083820381850152612384828b61228d565b9150886040850152876060850152838203608085015260e0820187518352818801518284015260408801516040840152606088015160018060a01b03808216606086015260808a0151608086015260a08a0151915060e060a0860152828251808552610100870191508584019450600093505b80841015612419578451831682529385019360019390930192908501906123f7565b5060c08b0151945085810360c0870152612433818661228d565b9550505050505082810360a084015261244c818661231d565b915050611e8960c08301846001600160a01b03169052565b60a08152600061247760a0830188612261565b6001600160a01b038716602084015260408301869052606083018590528281036080840152611e8981856122e2565b600086516124b8818460208b0161216c565b8651908301906124cc818360208b0161216c565b86519101906124df818360208a0161216c565b85519101906124f281836020890161216c565b845191019061250581836020880161216c565b01979650505050505050565b60006020828403121561252357600080fd5b5051919050565b60a08152600061253d60a08301886122e2565b90508560208301528460408301528360608301528260808301529695505050505050565b83815263ffffffff60e01b8360e01b1660208201526000825161258b81602485016020870161216c565b91909101602401949350505050565b6000602082840312156125ac57600080fd5b81516104af81611ebd565b87815260e0602082015260006125d060e0830189612261565b6001600160a01b039790971660408301525063ffffffff948516606082015292909316608083015260a082015260c0015292915050565b6001600160a01b039390931683526020830191909152604082015260600190565b60018060a01b03841681528260208201526060604082015260006123556060830184612261565b60006020828403121561266157600080fd5b81516104af81611e9556fea264697066735822122047ad13d5ce5368fbdf8b6f1624ebee6ee80c3111ce449e24bea47adb40a985fd64736f6c63430008140033",
  "devdoc": {
    "errors": {
      "FailedDeployment()": [
        {
          "details": "The deployment failed."
        }
      ],
      "InsufficientBalance(uint256,uint256)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ]
    },
    "events": {
      "NewMarket(address,string,address,bytes32,bytes32,bytes32[])": {
        "details": "To be emitted when a new market is created.",
        "params": {
          "conditionId": "Conditional Tokens conditionId.",
          "market": "The new market address.",
          "marketName": "The name of the market.",
          "parentMarket": "Conditional market to use.",
          "questionId": "Conditional Tokens questionId.",
          "questionsIds": "Reality questions ids."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "allMarkets()": {
        "details": "Returns all the markets created by this factory.",
        "returns": {
          "_0": "The addresses of the markets."
        }
      },
      "constructor": {
        "details": "Constructor.",
        "params": {
          "_arbitrator": "Address of the arbitrator that is going to resolve Realitio disputes.",
          "_collateralToken": "Address of the collateral token.",
          "_conditionalTokens": "Address of the ConditionalTokens implementation.",
          "_market": "Address of the market contract that is going to be used for each new deployment.",
          "_questionTimeout": "Reality question timeout.",
          "_realitio": "Address of the Realitio implementation.",
          "_realityProxy": "Address of the RealityProxy implementation.",
          "_wrapped1155Factory": "Address of the Wrapped1155Factory implementation."
        }
      },
      "createCategoricalMarket((string,string[],string,string,string,uint256,address,string,string,uint256,uint256,uint256,uint32,string[]))": {
        "details": "Creates a Categorical market.",
        "params": {
          "params": "CreateMarketParams instance."
        },
        "returns": {
          "_0": "The new market address."
        }
      },
      "createMultiCategoricalMarket((string,string[],string,string,string,uint256,address,string,string,uint256,uint256,uint256,uint32,string[]))": {
        "details": "Creates a Multi Categorical market.",
        "params": {
          "params": "CreateMarketParams instance."
        },
        "returns": {
          "_0": "The new market address."
        }
      },
      "createMultiScalarMarket((string,string[],string,string,string,uint256,address,string,string,uint256,uint256,uint256,uint32,string[]))": {
        "details": "Creates a Multi Scalar market.",
        "params": {
          "params": "CreateMarketParams instance."
        },
        "returns": {
          "_0": "The new market address."
        }
      },
      "createScalarMarket((string,string[],string,string,string,uint256,address,string,string,uint256,uint256,uint256,uint32,string[]))": {
        "details": "Creates a Scalar market.",
        "params": {
          "params": "CreateMarketParams instance."
        },
        "returns": {
          "_0": "The new market address."
        }
      },
      "marketCount()": {
        "returns": {
          "_0": "The amount of markets."
        }
      }
    },
    "stateVariables": {
      "REALITY_MULTI_SELECT_TEMPLATE": {
        "details": "Template for multi categorical markets."
      },
      "REALITY_SINGLE_SELECT_TEMPLATE": {
        "details": "Template for categorical markets."
      },
      "REALITY_UINT_TEMPLATE": {
        "details": "Template for scalar and multi scalar markets."
      },
      "arbitrator": {
        "details": "Arbitrator contract."
      },
      "collateralToken": {
        "details": "Conditional Tokens collateral token contract."
      },
      "conditionalTokens": {
        "details": "Conditional Tokens contract."
      },
      "market": {
        "details": "Market contract."
      },
      "markets": {
        "details": "Markets created by this factory."
      },
      "questionTimeout": {
        "details": "Reality question timeout."
      },
      "realitio": {
        "details": "Reality.eth contract."
      },
      "realityProxy": {
        "details": "Oracle contract."
      },
      "wrapped1155Factory": {
        "details": "Wrapped1155Factory contract."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createCategoricalMarket((string,string[],string,string,string,uint256,address,string,string,uint256,uint256,uint256,uint32,string[]))": {
        "notice": "Categorical markets are associated with a Reality question that has only one answer."
      },
      "createMultiCategoricalMarket((string,string[],string,string,string,uint256,address,string,string,uint256,uint256,uint256,uint32,string[]))": {
        "notice": "Multi Categorical markets are associated with a Reality question that has one or more answers."
      },
      "createMultiScalarMarket((string,string[],string,string,string,uint256,address,string,string,uint256,uint256,uint256,uint32,string[]))": {
        "notice": "Multi Scalar markets are associated with two or more Reality questions, and each one of them resolves to a numeric value."
      },
      "createScalarMarket((string,string[],string,string,string,uint256,address,string,string,uint256,uint256,uint256,uint32,string[]))": {
        "notice": "Scalar markets are associated with a Reality question that resolves to a numeric value."
      },
      "marketCount()": {
        "notice": "Returns the amount of markets created by this factory."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4658,
        "contract": "src/MarketFactory.sol:MarketFactory",
        "label": "markets",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      }
    }
  }
}