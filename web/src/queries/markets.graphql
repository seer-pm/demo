fragment Question on Question {
  id
  index
  arbitrator
  opening_ts
  timeout
  finalize_ts
  is_pending_arbitration
  best_answer
  bond
  min_bond
}

fragment Market on Market {
  id
  type
  marketName
  outcomes
  wrappedTokens
  collateralToken
  collateralToken1
  collateralToken2
  parentMarket {
    id
    payoutReported
    conditionId
    payoutNumerators
  }
  parentOutcome
  parentCollectionId
  conditionId
  questionId
  templateId
  hasAnswers
  questionsInArbitration
  questions {
    question {
      id
      arbitrator
      opening_ts
      timeout
      finalize_ts
      is_pending_arbitration
      best_answer
      bond
      min_bond
      index
    }
  }
  openingTs
  finalizeTs
  encodedQuestions
  lowerBound
  upperBound
  payoutReported
  payoutNumerators
  factory
  creator
  outcomesSupply
  blockTimestamp
}

query GetMarkets(
  $skip: Int = 0
  $first: Int = 100
  $orderBy: Market_orderBy
  $orderDirection: OrderDirection
  $where: Market_filter
  $block: Block_height
  $subgraphError: _SubgraphErrorPolicy_! = deny
) {
  markets(
    skip: $skip
    first: $first
    orderBy: $orderBy
    orderDirection: $orderDirection
    where: $where
    block: $block
    subgraphError: $subgraphError
  ) {
    ...Market
  }
}

query GetMarket($id: ID!) {
  market(id: $id) {
    ...Market
  }
}

query GetConditionalEvents(
  $skip: Int = 0
  $first: Int = 100
  $orderBy: ConditionalEvent_orderBy
  $orderDirection: OrderDirection
  $where: ConditionalEvent_filter
  $block: Block_height
  $subgraphError: _SubgraphErrorPolicy_! = deny
) {
  conditionalEvents(
    skip: $skip
    first: $first
    orderBy: $orderBy
    orderDirection: $orderDirection
    where: $where
    block: $block
    subgraphError: $subgraphError
  ) {
    id
    market {
      id
      marketName
    }
    accountId
    type
    amount
    blockNumber
    collateral
    transactionHash
  }
}

query GetCurateMetadata($id: ID!) {
  curateMetadata(id: $id) {
    registrationMetaEvidenceURI
  }
}

query GetArbitratorMetadata($id: ID!) {
  arbitratorMetadata(id: $id) {
    registrationMetaEvidenceURI
  }
}
